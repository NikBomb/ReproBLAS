key folders:
  /:
    this contains config.py and the main makefile; all other directories should have makefiles meant to be included.
  src/ref:
    this is where the reference code lives, including the files that need to be run through cog. also, it kinda makes sense to put create_params.py here.
  src/gen:
    this is where the generator lives, and associated utility functions. if we want, we can put cog in here. this is where depend_params lives.
  src/tune:
    This is where the autotuner lives
  src/args:
    here is where we put predefined args files, including ref.args
  build/code:
    this is where the generated code goes, as well as build.params, and it kinda makes sense to put built.args here.
  build/obj
    this is where the objects go
  build/args
    here is where autotuned parameter output goes, as well as default.args.

key files: (* means that it this file is the same across different projects, no star means that the file depends on the particular project we’re talking about)
  config.args
    a python file that describes what parameters need to be generated, in a human readable format. all makefile targets should depend on this, but it should be noted that changes to this file should not affect code when python is not defined.
  build_params.py
    a python file that defines a function taking a dictionary containing some configuration arguments and enumerates the space of all python parameters. The file includes params.py, containing a function that does all of the crazy parameter building work and takes this function as input. the function in params.py reads in config.args and dumps all of the parameters (in the form of a dictionary (param name->param space)) into a file specified on the command line with the extension params. It also dumps the default arguments to a file called default.args
  *params.py
  *literal.py
    a python file that contains functions supporting reads and writes of python literals to files (possibly this file can be extended to include appropriate dictionary structure checking)
  built.params
    a python file that contains a dictionary consisting of all possible parameters and their ranges and files and benchmarks (and arguments used to call each benchmark function) that depend on each one
  default.args
    a python file consisting only of a dictionary containing values for each parameter specified.
  built.args
    a python file generated by depend_params.py that contains the parameters used for the last build of the library
  depend_params.py (all makefile targets should depend on this one) #may not be necessary pending cog’s behavior. we should make all files depend on ARGS and first see if that works. I think that cog does not change files (or edit their time stamp) if the python doesn’t change.
    a python file that reads in the currently specified parameters and args and file, comparing it with built.args and touching all files that need to be regenerated.
  build_tune.py
    a python file that creates  from built.params, default_tune.py a default tuning script for the whole library which can be edited.
  built_tune.py
    consists of an import of autotune.py and then a call to tune with a set of ranges,
      metaparameters for the autotuner (# of trials, tuning strategy)
      dictionary mapping parameters to ranges (not all parameters neccesary to specify)
      list of lambdas that should return true given current arguments.
      also, this file includes benchmark.py. the only other files that should include this are build_params.py and benchmark test suite functions.
  *autotune.py
    takes a tuning file, current args, benchmark functions, and output args as input
    runs the autotuner. this consists of testing all of the specified combinations of parameters and sets them in output args, using current args for unspecified parameters. then it remakes, and runs necessary benchmarks. The output arguments go into build/args.
  benchmarks.py
    a file containing a dictionary mapping to a bunch of functions that call benchmarks. the dictionary is named benchmarks. this file is included by config_params.py and autotuner.py a benchmark takes as input a dictionary of arguments and returns a number normalized from 0 to 1


Key makefile targets:

  make GEN = 0 ARGS = ?(default to default.args)
    first we run create_params.py if config.args has changed. all files depend on build.params which depends on config.args
    we then run depend_params.py on ARGS and built.args.
    for each file that should be in build, we first check if we have python. if we have python, then in order to build the source file it depends on in build, we cog the file from ref into build/code. 
    make build

  make build:
    we build the code in built/code into a library as usual.

  make 
