key folders:
  /:
    this contains config.py and the main makefile; all other directories should have makefiles meant to be included.
  src/ref:
    this is where the reference code lives, including the files that need to be run through cog. also, it kinda makes sense to put create_params.py here.
  src/gen:
    this is where the generator lives, and associated utility functions. if we want, we can put cog in here. this is where depend_params lives.
  src/tune:
    This is where the autotuner lives
  src/args:
    here is where we put predefined args files, including ref.args
  build/code:
    this is where the generated code goes, as well as build.params, and it kinda makes sense to put built.args here.
  build/obj
    this is where the objects go
  build/args
    here is where autotuned parameter output goes, as well as default.args.

key files:
  config.args
    a python file that describes what parameters need to be generated, in a human readable format. all makefile targets should depend on this, but it should be noted that changes to this file should not affect code when python is not defined.
  create_params.py
    a python file that reads in config.py and enumerates the space of all python parameters. It dumps all of the parameters (in the form of a dictionary (param name->param space)) into a file specified on the command line with the extension params. It also dumps the default arguments to a file called default.args
  built.params
    a python file that contains two lines: a dictionary consisting of all possible parameters, the files and benchmarks that depend on each one, and another line consisting of a list of lambda functions all of which should return true if any given combination of parameters is valid.
  default.args
    a python file consisting only of a dictionary containing values for each parameter specified.
  built.args
    a python file generated by depend_params.py that contains the parameters used for the last build of the library
  depend_params.py (all makefile targets should depend on this one)
    a python file that reads in the currently specified parameters and args and file, comparing it with built.args and touching all files that need to be regenerated.
  create_tune.py
    a python file that creates default.tune, a default tuning script for the whole library which can be edited.
  default.tune
    three lines:
      metaparameters for the autotuner (# of trials, tuning strategy)
      dictionary mapping parameters to ranges (not all parameters neccesary to specify)
      list of lambdas that should return true
  autotune.py
    takes a tuning file, current args, and output args as input
    runs the autotuner. this consists of testing all of the specified combinations of parameters and if they are valid (as determined by built.params and the tune file itself), sets them in output args, using current args for unspecified parameters. then it remakes, and runs necessary benchmarks. The output arguments go into build/args.

Key makefile targets:

  make generate ARGS = ?(default to default.args)
    first we run create_params.py if config.args has changed. all files depend on build.params which depends on config.args
    we then run depend_params.py on ARGS and built.args.
    for each file that should be in build, we first check if we have python. if we have python, then in order to build the source file it depends on in build, we cog the file from ref into build/code. 
    make build
  make build:
    we build the code in built/code into a library as usual.

  make 
