#include <mpi.h>
#include <stdio.h>

#include <idxd.h>

#include <../config.h>

/*[[[cog
import cog
from scripts import terminal
for fold in range(2, terminal.get_dimaxindex() + 1):
  cog.outl("static void idxdMPI_ziziadd_{}(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){{".format(fold))
  cog.outl("  idxd_didiaddv({}, *len, (double_complex_indexed*)invec, 1, (double_complex_indexed*)inoutvec, 1);".format(fold))
  cog.outl("}")
  cog.outl("")
]]]*/
static void idxdMPI_ziziadd_2(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  idxd_didiaddv(2, *len, (double_complex_indexed*)invec, 1, (double_complex_indexed*)inoutvec, 1);
}

static void idxdMPI_ziziadd_3(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  idxd_didiaddv(3, *len, (double_complex_indexed*)invec, 1, (double_complex_indexed*)inoutvec, 1);
}

static void idxdMPI_ziziadd_4(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  idxd_didiaddv(4, *len, (double_complex_indexed*)invec, 1, (double_complex_indexed*)inoutvec, 1);
}

static void idxdMPI_ziziadd_5(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  idxd_didiaddv(5, *len, (double_complex_indexed*)invec, 1, (double_complex_indexed*)inoutvec, 1);
}

static void idxdMPI_ziziadd_6(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  idxd_didiaddv(6, *len, (double_complex_indexed*)invec, 1, (double_complex_indexed*)inoutvec, 1);
}

static void idxdMPI_ziziadd_7(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  idxd_didiaddv(7, *len, (double_complex_indexed*)invec, 1, (double_complex_indexed*)inoutvec, 1);
}

static void idxdMPI_ziziadd_8(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  idxd_didiaddv(8, *len, (double_complex_indexed*)invec, 1, (double_complex_indexed*)inoutvec, 1);
}

static void idxdMPI_ziziadd_9(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  idxd_didiaddv(9, *len, (double_complex_indexed*)invec, 1, (double_complex_indexed*)inoutvec, 1);
}

static void idxdMPI_ziziadd_10(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  idxd_didiaddv(10, *len, (double_complex_indexed*)invec, 1, (double_complex_indexed*)inoutvec, 1);
}

static void idxdMPI_ziziadd_11(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  idxd_didiaddv(11, *len, (double_complex_indexed*)invec, 1, (double_complex_indexed*)inoutvec, 1);
}

static void idxdMPI_ziziadd_12(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  idxd_didiaddv(12, *len, (double_complex_indexed*)invec, 1, (double_complex_indexed*)inoutvec, 1);
}

static void idxdMPI_ziziadd_13(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  idxd_didiaddv(13, *len, (double_complex_indexed*)invec, 1, (double_complex_indexed*)inoutvec, 1);
}

static void idxdMPI_ziziadd_14(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  idxd_didiaddv(14, *len, (double_complex_indexed*)invec, 1, (double_complex_indexed*)inoutvec, 1);
}

static void idxdMPI_ziziadd_15(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  idxd_didiaddv(15, *len, (double_complex_indexed*)invec, 1, (double_complex_indexed*)inoutvec, 1);
}

static void idxdMPI_ziziadd_16(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  idxd_didiaddv(16, *len, (double_complex_indexed*)invec, 1, (double_complex_indexed*)inoutvec, 1);
}

static void idxdMPI_ziziadd_17(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  idxd_didiaddv(17, *len, (double_complex_indexed*)invec, 1, (double_complex_indexed*)inoutvec, 1);
}

static void idxdMPI_ziziadd_18(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  idxd_didiaddv(18, *len, (double_complex_indexed*)invec, 1, (double_complex_indexed*)inoutvec, 1);
}

static void idxdMPI_ziziadd_19(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  idxd_didiaddv(19, *len, (double_complex_indexed*)invec, 1, (double_complex_indexed*)inoutvec, 1);
}

static void idxdMPI_ziziadd_20(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  idxd_didiaddv(20, *len, (double_complex_indexed*)invec, 1, (double_complex_indexed*)inoutvec, 1);
}

static void idxdMPI_ziziadd_21(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  idxd_didiaddv(21, *len, (double_complex_indexed*)invec, 1, (double_complex_indexed*)inoutvec, 1);
}

static void idxdMPI_ziziadd_22(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  idxd_didiaddv(22, *len, (double_complex_indexed*)invec, 1, (double_complex_indexed*)inoutvec, 1);
}

static void idxdMPI_ziziadd_23(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  idxd_didiaddv(23, *len, (double_complex_indexed*)invec, 1, (double_complex_indexed*)inoutvec, 1);
}

static void idxdMPI_ziziadd_24(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  idxd_didiaddv(24, *len, (double_complex_indexed*)invec, 1, (double_complex_indexed*)inoutvec, 1);
}

static void idxdMPI_ziziadd_25(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  idxd_didiaddv(25, *len, (double_complex_indexed*)invec, 1, (double_complex_indexed*)inoutvec, 1);
}

static void idxdMPI_ziziadd_26(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  idxd_didiaddv(26, *len, (double_complex_indexed*)invec, 1, (double_complex_indexed*)inoutvec, 1);
}

static void idxdMPI_ziziadd_27(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  idxd_didiaddv(27, *len, (double_complex_indexed*)invec, 1, (double_complex_indexed*)inoutvec, 1);
}

static void idxdMPI_ziziadd_28(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  idxd_didiaddv(28, *len, (double_complex_indexed*)invec, 1, (double_complex_indexed*)inoutvec, 1);
}

static void idxdMPI_ziziadd_29(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  idxd_didiaddv(29, *len, (double_complex_indexed*)invec, 1, (double_complex_indexed*)inoutvec, 1);
}

static void idxdMPI_ziziadd_30(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  idxd_didiaddv(30, *len, (double_complex_indexed*)invec, 1, (double_complex_indexed*)inoutvec, 1);
}

static void idxdMPI_ziziadd_31(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  idxd_didiaddv(31, *len, (double_complex_indexed*)invec, 1, (double_complex_indexed*)inoutvec, 1);
}

static void idxdMPI_ziziadd_32(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  idxd_didiaddv(32, *len, (double_complex_indexed*)invec, 1, (double_complex_indexed*)inoutvec, 1);
}

static void idxdMPI_ziziadd_33(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  idxd_didiaddv(33, *len, (double_complex_indexed*)invec, 1, (double_complex_indexed*)inoutvec, 1);
}

static void idxdMPI_ziziadd_34(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  idxd_didiaddv(34, *len, (double_complex_indexed*)invec, 1, (double_complex_indexed*)inoutvec, 1);
}

static void idxdMPI_ziziadd_35(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  idxd_didiaddv(35, *len, (double_complex_indexed*)invec, 1, (double_complex_indexed*)inoutvec, 1);
}

static void idxdMPI_ziziadd_36(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  idxd_didiaddv(36, *len, (double_complex_indexed*)invec, 1, (double_complex_indexed*)inoutvec, 1);
}

static void idxdMPI_ziziadd_37(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  idxd_didiaddv(37, *len, (double_complex_indexed*)invec, 1, (double_complex_indexed*)inoutvec, 1);
}

static void idxdMPI_ziziadd_38(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  idxd_didiaddv(38, *len, (double_complex_indexed*)invec, 1, (double_complex_indexed*)inoutvec, 1);
}

static void idxdMPI_ziziadd_39(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  idxd_didiaddv(39, *len, (double_complex_indexed*)invec, 1, (double_complex_indexed*)inoutvec, 1);
}

static void idxdMPI_ziziadd_40(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  idxd_didiaddv(40, *len, (double_complex_indexed*)invec, 1, (double_complex_indexed*)inoutvec, 1);
}

static void idxdMPI_ziziadd_41(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  idxd_didiaddv(41, *len, (double_complex_indexed*)invec, 1, (double_complex_indexed*)inoutvec, 1);
}

static void idxdMPI_ziziadd_42(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  idxd_didiaddv(42, *len, (double_complex_indexed*)invec, 1, (double_complex_indexed*)inoutvec, 1);
}

static void idxdMPI_ziziadd_43(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  idxd_didiaddv(43, *len, (double_complex_indexed*)invec, 1, (double_complex_indexed*)inoutvec, 1);
}

static void idxdMPI_ziziadd_44(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  idxd_didiaddv(44, *len, (double_complex_indexed*)invec, 1, (double_complex_indexed*)inoutvec, 1);
}

static void idxdMPI_ziziadd_45(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  idxd_didiaddv(45, *len, (double_complex_indexed*)invec, 1, (double_complex_indexed*)inoutvec, 1);
}

static void idxdMPI_ziziadd_46(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  idxd_didiaddv(46, *len, (double_complex_indexed*)invec, 1, (double_complex_indexed*)inoutvec, 1);
}

static void idxdMPI_ziziadd_47(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  idxd_didiaddv(47, *len, (double_complex_indexed*)invec, 1, (double_complex_indexed*)inoutvec, 1);
}

static void idxdMPI_ziziadd_48(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  idxd_didiaddv(48, *len, (double_complex_indexed*)invec, 1, (double_complex_indexed*)inoutvec, 1);
}

static void idxdMPI_ziziadd_49(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  idxd_didiaddv(49, *len, (double_complex_indexed*)invec, 1, (double_complex_indexed*)inoutvec, 1);
}

static void idxdMPI_ziziadd_50(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  idxd_didiaddv(50, *len, (double_complex_indexed*)invec, 1, (double_complex_indexed*)inoutvec, 1);
}

static void idxdMPI_ziziadd_51(void *invec, void *inoutvec, int *len, MPI_Datatype* datatype){
  idxd_didiaddv(51, *len, (double_complex_indexed*)invec, 1, (double_complex_indexed*)inoutvec, 1);
}

//[[[end]]]

static MPI_Op ops[DIMAXFOLD + 1];
static int ops_initialized[DIMAXFOLD + 1]; //initializes to 0

MPI_Op idxdMPI_ZIZIADD(const int fold){
  int rc;
  if(!ops_initialized[fold]){
    switch(fold){
      /*[[[cog
      import cog
      from scripts import terminal
      for fold in range(2, terminal.get_dimaxindex() + 1):
        cog.outl("case {}:".format(fold))
        cog.outl("  rc = MPI_Op_create(&idxdMPI_ziziadd_{0}, 1, ops + {0});".format(fold))
        cog.outl("  break;")
        cog.outl("")
      ]]]*/
      case 2:
        rc = MPI_Op_create(&idxdMPI_ziziadd_2, 1, ops + 2);
        break;

      case 3:
        rc = MPI_Op_create(&idxdMPI_ziziadd_3, 1, ops + 3);
        break;

      case 4:
        rc = MPI_Op_create(&idxdMPI_ziziadd_4, 1, ops + 4);
        break;

      case 5:
        rc = MPI_Op_create(&idxdMPI_ziziadd_5, 1, ops + 5);
        break;

      case 6:
        rc = MPI_Op_create(&idxdMPI_ziziadd_6, 1, ops + 6);
        break;

      case 7:
        rc = MPI_Op_create(&idxdMPI_ziziadd_7, 1, ops + 7);
        break;

      case 8:
        rc = MPI_Op_create(&idxdMPI_ziziadd_8, 1, ops + 8);
        break;

      case 9:
        rc = MPI_Op_create(&idxdMPI_ziziadd_9, 1, ops + 9);
        break;

      case 10:
        rc = MPI_Op_create(&idxdMPI_ziziadd_10, 1, ops + 10);
        break;

      case 11:
        rc = MPI_Op_create(&idxdMPI_ziziadd_11, 1, ops + 11);
        break;

      case 12:
        rc = MPI_Op_create(&idxdMPI_ziziadd_12, 1, ops + 12);
        break;

      case 13:
        rc = MPI_Op_create(&idxdMPI_ziziadd_13, 1, ops + 13);
        break;

      case 14:
        rc = MPI_Op_create(&idxdMPI_ziziadd_14, 1, ops + 14);
        break;

      case 15:
        rc = MPI_Op_create(&idxdMPI_ziziadd_15, 1, ops + 15);
        break;

      case 16:
        rc = MPI_Op_create(&idxdMPI_ziziadd_16, 1, ops + 16);
        break;

      case 17:
        rc = MPI_Op_create(&idxdMPI_ziziadd_17, 1, ops + 17);
        break;

      case 18:
        rc = MPI_Op_create(&idxdMPI_ziziadd_18, 1, ops + 18);
        break;

      case 19:
        rc = MPI_Op_create(&idxdMPI_ziziadd_19, 1, ops + 19);
        break;

      case 20:
        rc = MPI_Op_create(&idxdMPI_ziziadd_20, 1, ops + 20);
        break;

      case 21:
        rc = MPI_Op_create(&idxdMPI_ziziadd_21, 1, ops + 21);
        break;

      case 22:
        rc = MPI_Op_create(&idxdMPI_ziziadd_22, 1, ops + 22);
        break;

      case 23:
        rc = MPI_Op_create(&idxdMPI_ziziadd_23, 1, ops + 23);
        break;

      case 24:
        rc = MPI_Op_create(&idxdMPI_ziziadd_24, 1, ops + 24);
        break;

      case 25:
        rc = MPI_Op_create(&idxdMPI_ziziadd_25, 1, ops + 25);
        break;

      case 26:
        rc = MPI_Op_create(&idxdMPI_ziziadd_26, 1, ops + 26);
        break;

      case 27:
        rc = MPI_Op_create(&idxdMPI_ziziadd_27, 1, ops + 27);
        break;

      case 28:
        rc = MPI_Op_create(&idxdMPI_ziziadd_28, 1, ops + 28);
        break;

      case 29:
        rc = MPI_Op_create(&idxdMPI_ziziadd_29, 1, ops + 29);
        break;

      case 30:
        rc = MPI_Op_create(&idxdMPI_ziziadd_30, 1, ops + 30);
        break;

      case 31:
        rc = MPI_Op_create(&idxdMPI_ziziadd_31, 1, ops + 31);
        break;

      case 32:
        rc = MPI_Op_create(&idxdMPI_ziziadd_32, 1, ops + 32);
        break;

      case 33:
        rc = MPI_Op_create(&idxdMPI_ziziadd_33, 1, ops + 33);
        break;

      case 34:
        rc = MPI_Op_create(&idxdMPI_ziziadd_34, 1, ops + 34);
        break;

      case 35:
        rc = MPI_Op_create(&idxdMPI_ziziadd_35, 1, ops + 35);
        break;

      case 36:
        rc = MPI_Op_create(&idxdMPI_ziziadd_36, 1, ops + 36);
        break;

      case 37:
        rc = MPI_Op_create(&idxdMPI_ziziadd_37, 1, ops + 37);
        break;

      case 38:
        rc = MPI_Op_create(&idxdMPI_ziziadd_38, 1, ops + 38);
        break;

      case 39:
        rc = MPI_Op_create(&idxdMPI_ziziadd_39, 1, ops + 39);
        break;

      case 40:
        rc = MPI_Op_create(&idxdMPI_ziziadd_40, 1, ops + 40);
        break;

      case 41:
        rc = MPI_Op_create(&idxdMPI_ziziadd_41, 1, ops + 41);
        break;

      case 42:
        rc = MPI_Op_create(&idxdMPI_ziziadd_42, 1, ops + 42);
        break;

      case 43:
        rc = MPI_Op_create(&idxdMPI_ziziadd_43, 1, ops + 43);
        break;

      case 44:
        rc = MPI_Op_create(&idxdMPI_ziziadd_44, 1, ops + 44);
        break;

      case 45:
        rc = MPI_Op_create(&idxdMPI_ziziadd_45, 1, ops + 45);
        break;

      case 46:
        rc = MPI_Op_create(&idxdMPI_ziziadd_46, 1, ops + 46);
        break;

      case 47:
        rc = MPI_Op_create(&idxdMPI_ziziadd_47, 1, ops + 47);
        break;

      case 48:
        rc = MPI_Op_create(&idxdMPI_ziziadd_48, 1, ops + 48);
        break;

      case 49:
        rc = MPI_Op_create(&idxdMPI_ziziadd_49, 1, ops + 49);
        break;

      case 50:
        rc = MPI_Op_create(&idxdMPI_ziziadd_50, 1, ops + 50);
        break;

      case 51:
        rc = MPI_Op_create(&idxdMPI_ziziadd_51, 1, ops + 51);
        break;

      //[[[end]]]
    }
    if(rc != MPI_SUCCESS){
      fprintf(stderr, "[%s.%d] ReproBLAS error: MPI_Op_create error: %d\n", __FILE__, __LINE__, rc);
      MPI_Abort(MPI_COMM_WORLD, rc);
      return 0;
    }
    ops_initialized[fold] = 1;
  }
  return ops[fold];
}
