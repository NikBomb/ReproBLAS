#include <stdlib.h>

#include <idxdBLAS.h>
#include <idxd.h>

#include "../common/common.h"

/*[[[cog
import cog
import generate
import dataTypes
from src.common import blockSize
from scripts import terminal

cog.out(generate.generate(blockSize.BlockSize("sisgemm", "Y_BLOCK", 1, 128, 128, ["bench_rsgemm_TransB_fold_{}".format(terminal.get_sidefaultfold())]), cog.inFile, args, params, mode))
cog.out(generate.generate(blockSize.BlockSize("sisgemm", "X_BLOCK", 1, 2 * terminal.get_siendurance(), 2 * terminal.get_siendurance(), ["bench_rsgemm_TransB_fold_{}".format(terminal.get_sidefaultfold())]), cog.inFile, args, params, mode))
cog.out(generate.generate(blockSize.BlockSize("sisgemm", "YT_BLOCK", 1, 128, 128, ["bench_rsgemm_TransA_fold_{}".format(terminal.get_sidefaultfold())]), cog.inFile, args, params, mode))
cog.out(generate.generate(blockSize.BlockSize("sisgemm", "XT_BLOCK", 1, 2 * terminal.get_siendurance(), 2 * terminal.get_siendurance(), ["bench_rsgemm_TransA_fold_{}".format(terminal.get_sidefaultfold())]), cog.inFile, args, params, mode))
]]]*/
#define Y_BLOCK 128
#define X_BLOCK 1024
#define YT_BLOCK 128
#define XT_BLOCK 1024
//[[[end]]]

void idxdBLAS_sisgemm(const int fold, const char Order,
             const char TransA, const char TransB,
             const int M, const int N, const int K,
             const float alpha, const float *A, const int lda,
             const float *B, const int ldb,
             float_indexed *C, const int ldc){
  int i;
  int ii;
  int k;
  int kk;
  int j;
  int jj;
  float *bufA;
  int ldbufa;
  float *bufB;

  //early returns
  if(M == 0 || N == 0 || K == 0 || alpha == 0.0){
    return;
  }

  switch(Order){

    //row major
    case 'r':
    case 'R':
      switch(TransA){

        //row major A not transposed
        case 'n':
        case 'N':
          if(alpha == 1.0){
            bufA = (float*)A;
            ldbufa = lda;
          }else{
            bufA = (float*)malloc(M * K * sizeof(float));
            for(i = 0; i < M; i++){
              for(k = 0; k < K; k++){
                bufA[i * K + k] = A[i * lda + k] * alpha;
              }
            }
            ldbufa = K;
          }
          switch(TransB){

            //row major A not transposed B not transposed
            case 'n':
            case 'N':
              bufB = (float*)malloc(XT_BLOCK * YT_BLOCK * sizeof(float));
              for(i = 0; i < M; i += Y_BLOCK){
                for(j = 0; j < N; j += YT_BLOCK){
                  for(k = 0; k < K; k += XT_BLOCK){
                    for(kk = k; kk < K && kk < k + XT_BLOCK; kk++){
                      for(jj = j; jj < N && jj < j + YT_BLOCK; jj++){
                        bufB[(jj - j) * XT_BLOCK + (kk - k)] = B[kk * ldb + jj];
                      }
                    }
                    for(ii = i; ii < M && ii < i + Y_BLOCK; ii++){
                      for(jj = j; jj < N && jj < j + YT_BLOCK; jj++){
                        idxdBLAS_sisdot(fold, MIN(XT_BLOCK, K - k), bufA + ii * ldbufa + k, 1, bufB + (jj - j) * XT_BLOCK, 1, C + (ii * ldc + jj) * idxd_sinum(fold));
                      }
                    }
                  }
                }
              }
              free(bufB);
              break;

            //row major A not transposed B transposed
            default:
              for(i = 0; i < M; i += Y_BLOCK){
                for(j = 0; j < N; j += Y_BLOCK){
                  for(k = 0; k < K; k += X_BLOCK){
                    for(ii = i; ii < M && ii < i + Y_BLOCK; ii++){
                      for(jj = j; jj < N && jj < j + Y_BLOCK; jj++){
                        idxdBLAS_sisdot(fold, MIN(X_BLOCK, K - k), bufA + ii * ldbufa + k, 1, B + jj * ldb + k, 1, C + (ii * ldc + jj) * idxd_sinum(fold));
                      }
                    }
                  }
                }
              }
              break;

          }
          if(alpha != 1.0){
            free(bufA);
          }
          break;

        //row major A transposed
        default:
          switch(TransB){

            //row major A transposed B not transposed
            case 'n':
            case 'N':
              bufA = (float*)malloc(XT_BLOCK * YT_BLOCK * sizeof(float));
              bufB = (float*)malloc(XT_BLOCK * YT_BLOCK * sizeof(float));
              if(alpha == 1.0){
                for(i = 0; i < M; i += YT_BLOCK){
                  for(j = 0; j < N; j += YT_BLOCK){
                    for(k = 0; k < K; k += XT_BLOCK){
                      for(kk = k; kk < K && kk < k + XT_BLOCK; kk++){
                        for(ii = i; ii < M && ii < i + YT_BLOCK; ii++){
                          bufA[(ii - i) * XT_BLOCK + (kk - k)] = A[kk * lda + ii];
                        }
                      }
                      for(kk = k; kk < K && kk < k + XT_BLOCK; kk++){
                        for(jj = j; jj < N && jj < j + YT_BLOCK; jj++){
                          bufB[(jj - j) * XT_BLOCK + (kk - k)] = B[kk * ldb + jj];
                        }
                      }
                      for(ii = i; ii < M && ii < i + YT_BLOCK; ii++){
                        for(jj = j; jj < N && jj < j + YT_BLOCK; jj++){
                          idxdBLAS_sisdot(fold, MIN(XT_BLOCK, K - k), bufA + (ii - i) * XT_BLOCK, 1, bufB + (jj - j) * XT_BLOCK, 1, C + (ii * ldc + jj) * idxd_sinum(fold));
                        }
                      }
                    }
                  }
                }
              }else{
                for(i = 0; i < M; i += YT_BLOCK){
                  for(j = 0; j < N; j += YT_BLOCK){
                    for(k = 0; k < K; k += XT_BLOCK){
                      for(kk = k; kk < K && kk < k + XT_BLOCK; kk++){
                        for(ii = i; ii < M && ii < i + YT_BLOCK; ii++){
                          bufA[(ii - i) * XT_BLOCK + (kk - k)] = A[kk * lda + ii] * alpha;
                        }
                      }
                      for(kk = k; kk < K && kk < k + XT_BLOCK; kk++){
                        for(jj = j; jj < N && jj < j + YT_BLOCK; jj++){
                          bufB[(jj - j) * XT_BLOCK + (kk - k)] = B[kk * ldb + jj];
                        }
                      }
                      for(ii = i; ii < M && ii < i + YT_BLOCK; ii++){
                        for(jj = j; jj < N && jj < j + YT_BLOCK; jj++){
                          idxdBLAS_sisdot(fold, MIN(XT_BLOCK, K - k), bufA + (ii - i) * XT_BLOCK, 1, bufB + (jj - j) * XT_BLOCK, 1, C + (ii * ldc + jj) * idxd_sinum(fold));
                        }
                      }
                    }
                  }
                }
              }
              free(bufA);
              free(bufB);
              break;

            //row major A transposed B transposed
            default:
              bufA = (float*)malloc(XT_BLOCK * YT_BLOCK * sizeof(float));
              if(alpha == 1.0){
                for(i = 0; i < M; i += YT_BLOCK){
                  for(j = 0; j < N; j += Y_BLOCK){
                    for(k = 0; k < K; k += XT_BLOCK){
                      for(kk = k; kk < K && kk < k + XT_BLOCK; kk++){
                        for(ii = i; ii < M && ii < i + YT_BLOCK; ii++){
                          bufA[(ii - i) * XT_BLOCK + (kk - k)] = A[kk * lda + ii];
                        }
                      }
                      for(ii = i; ii < M && ii < i + YT_BLOCK; ii++){
                        for(jj = j; jj < N && jj < j + Y_BLOCK; jj++){
                          idxdBLAS_sisdot(fold, MIN(XT_BLOCK, K - k), bufA + (ii - i) * XT_BLOCK, 1, B + jj * ldb + k, 1, C + (ii * ldc + jj) * idxd_sinum(fold));
                        }
                      }
                    }
                  }
                }
              }else{
                for(i = 0; i < M; i += YT_BLOCK){
                  for(j = 0; j < N; j += Y_BLOCK){
                    for(k = 0; k < K; k += XT_BLOCK){
                      for(kk = k; kk < K && kk < k + XT_BLOCK; kk++){
                        for(ii = i; ii < M && ii < i + YT_BLOCK; ii++){
                          bufA[(ii - i) * XT_BLOCK + (kk - k)] = A[kk * lda + ii] * alpha;
                        }
                      }
                      for(ii = i; ii < M && ii < i + YT_BLOCK; ii++){
                        for(jj = j; jj < N && jj < j + Y_BLOCK; jj++){
                          idxdBLAS_sisdot(fold, MIN(XT_BLOCK, K - k), bufA + (ii - i) * XT_BLOCK, 1, B + jj * ldb + k, 1, C + (ii * ldc + jj) * idxd_sinum(fold));
                        }
                      }
                    }
                  }
                }
              }
              free(bufA);
              break;
          }
          break;
      }
      break;

    //column major
    default:
      switch(TransA){

        //column major A not transposed
        case 'n':
        case 'N':
          switch(TransB){

            //column major A not transposed B not transposed
            case 'n':
            case 'N':
              bufA = (float*)malloc(XT_BLOCK * YT_BLOCK * sizeof(float));
              if(alpha == 1.0){
                for(i = 0; i < M; i += YT_BLOCK){
                  for(j = 0; j < N; j += Y_BLOCK){
                    for(k = 0; k < K; k += XT_BLOCK){
                      for(kk = k; kk < K && kk < k + XT_BLOCK; kk++){
                        for(ii = i; ii < M && ii < i + YT_BLOCK; ii++){
                          bufA[(ii - i) * XT_BLOCK + (kk - k)] = A[kk * lda + ii];
                        }
                      }
                      for(jj = j; jj < N && jj < j + Y_BLOCK; jj++){
                        for(ii = i; ii < M && ii < i + YT_BLOCK; ii++){
                          idxdBLAS_sisdot(fold, MIN(XT_BLOCK, K - k), bufA + (ii - i) * XT_BLOCK, 1, B + jj * ldb + k, 1, C + (jj * ldc + ii) * idxd_sinum(fold));
                        }
                      }
                    }
                  }
                }
              }else{
                for(i = 0; i < M; i += YT_BLOCK){
                  for(j = 0; j < N; j += Y_BLOCK){
                    for(k = 0; k < K; k += XT_BLOCK){
                      for(kk = k; kk < K && kk < k + XT_BLOCK; kk++){
                        for(ii = i; ii < M && ii < i + YT_BLOCK; ii++){
                          bufA[(ii - i) * XT_BLOCK + (kk - k)] = A[kk * lda + ii] * alpha;
                        }
                      }
                      for(jj = j; jj < N && jj < j + Y_BLOCK; jj++){
                        for(ii = i; ii < M && ii < i + YT_BLOCK; ii++){
                          idxdBLAS_sisdot(fold, MIN(XT_BLOCK, K - k), bufA + (ii - i) * XT_BLOCK, 1, B + jj * ldb + k, 1, C + (jj * ldc + ii) * idxd_sinum(fold));
                        }
                      }
                    }
                  }
                }
              }
              free(bufA);
              break;

            //column major A not transposed B transposed
            default:
              bufA = (float*)malloc(XT_BLOCK * YT_BLOCK * sizeof(float));
              bufB = (float*)malloc(XT_BLOCK * YT_BLOCK * sizeof(float));
              if(alpha == 1.0){
                for(i = 0; i < M; i += YT_BLOCK){
                  for(j = 0; j < N; j += YT_BLOCK){
                    for(k = 0; k < K; k += XT_BLOCK){
                      for(kk = k; kk < K && kk < k + XT_BLOCK; kk++){
                        for(ii = i; ii < M && ii < i + YT_BLOCK; ii++){
                          bufA[(ii - i) * XT_BLOCK + (kk - k)] = A[kk * lda + ii];
                        }
                      }
                      for(kk = k; kk < K && kk < k + XT_BLOCK; kk++){
                        for(jj = j; jj < N && jj < j + YT_BLOCK; jj++){
                          bufB[(jj - j) * XT_BLOCK + (kk - k)] = B[kk * ldb + jj];
                        }
                      }
                      for(jj = j; jj < N && jj < j + YT_BLOCK; jj++){
                        for(ii = i; ii < M && ii < i + YT_BLOCK; ii++){
                          idxdBLAS_sisdot(fold, MIN(XT_BLOCK, K - k), bufA + (ii - i) * XT_BLOCK, 1, bufB + (jj - j) * XT_BLOCK, 1, C + (jj * ldc + ii) * idxd_sinum(fold));
                        }
                      }
                    }
                  }
                }
              }else{
                for(i = 0; i < M; i += YT_BLOCK){
                  for(j = 0; j < N; j += YT_BLOCK){
                    for(k = 0; k < K; k += XT_BLOCK){
                      for(kk = k; kk < K && kk < k + XT_BLOCK; kk++){
                        for(ii = i; ii < M && ii < i + YT_BLOCK; ii++){
                          bufA[(ii - i) * XT_BLOCK + (kk - k)] = A[kk * lda + ii] * alpha;
                        }
                      }
                      for(kk = k; kk < K && kk < k + XT_BLOCK; kk++){
                        for(jj = j; jj < N && jj < j + YT_BLOCK; jj++){
                          bufB[(jj - j) * XT_BLOCK + (kk - k)] = B[kk * ldb + jj];
                        }
                      }
                      for(jj = j; jj < N && jj < j + YT_BLOCK; jj++){
                        for(ii = i; ii < M && ii < i + YT_BLOCK; ii++){
                          idxdBLAS_sisdot(fold, MIN(XT_BLOCK, K - k), bufA + (ii - i) * XT_BLOCK, 1, bufB + (jj - j) * XT_BLOCK, 1, C + (jj * ldc + ii) * idxd_sinum(fold));
                        }
                      }
                    }
                  }
                }
              }
              free(bufA);
              free(bufB);
              break;
          }
          break;

        //column major A transposed
        default:
          if(alpha == 1.0){
            bufA = (float*)A;
            ldbufa = lda;
          }else{
            bufA = (float*)malloc(M * K * sizeof(float));
            for(i = 0; i < M; i++){
              for(k = 0; k < K; k++){
                bufA[i * K + k] = A[i * lda + k] * alpha;
              }
            }
            ldbufa = K;
          }
          switch(TransB){

            //column major A transposed B not transposed
            case 'n':
            case 'N':
              for(i = 0; i < M; i += Y_BLOCK){
                for(j = 0; j < N; j += Y_BLOCK){
                  for(k = 0; k < K; k += X_BLOCK){
                    for(jj = j; jj < N && jj < j + Y_BLOCK; jj++){
                      for(ii = i; ii < M && ii < i + Y_BLOCK; ii++){
                        idxdBLAS_sisdot(fold, MIN(X_BLOCK, K - k), bufA + ii * ldbufa + k, 1, B + jj * ldb + k, 1, C + (jj * ldc + ii) * idxd_sinum(fold));
                      }
                    }
                  }
                }
              }
              break;

            //column major A transposed B transposed
            default:
              bufB = (float*)malloc(XT_BLOCK * YT_BLOCK * sizeof(float));
              for(i = 0; i < M; i += Y_BLOCK){
                for(j = 0; j < N; j += YT_BLOCK){
                  for(k = 0; k < K; k += XT_BLOCK){
                    for(kk = k; kk < K && kk < k + XT_BLOCK; kk++){
                      for(jj = j; jj < N && jj < j + YT_BLOCK; jj++){
                        bufB[(jj - j) * XT_BLOCK + (kk - k)] = B[kk * ldb + jj];
                      }
                    }
                    for(jj = j; jj < N && jj < j + YT_BLOCK; jj++){
                      for(ii = i; ii < M && ii < i + Y_BLOCK; ii++){
                        idxdBLAS_sisdot(fold, MIN(XT_BLOCK, K - k), bufA + ii * ldbufa + k, 1, bufB + (jj - j) * XT_BLOCK, 1, C + (jj * ldc + ii) * idxd_sinum(fold));
                      }
                    }
                  }
                }
              }
              free(bufB);
              break;
          }
          if(alpha != 1.0){
            free(bufA);
          }
          break;
      }
      break;
  }
}
