/*
 *  Created   13/10/25   H.D. Nguyen
 */

#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include <float.h>

#include "../config.h"
#include "../common/common.h"
#include "idxdBLAS.h"

/*[[[cog
import cog
import generate
import dataTypes
import depositASum
import vectorizations
from src.common import blockSize
from scripts import terminal

code_block = generate.CodeBlock()
vectorizations.conditionally_include_vectorizations(code_block)
cog.out(str(code_block))

cog.outl()

cog.out(generate.generate(blockSize.BlockSize("smcasum", "N_block_MAX", 32, terminal.get_siendurance()//2, terminal.get_siendurance()//2, ["bench_rscasum_fold_{}".format(terminal.get_sidefaultfold())]), cog.inFile, args, params, mode))
]]]*/
//[[[end]]]

void idxdBLAS_smcasum(const int fold, const int N, const void *X, const int incX, float *manY, const int incmanY, float *carY, const int inccarY){
  float amax_tmp[2];
  float amax;
  int i, j;
  int N_block = N_block_MAX;
  int deposits = 0;
  float_complex_indexed *asum = idxd_cialloc(fold);
  idxd_cisetzero(fold, asum);

  const float *x = (const float*)X;

  for (i = 0; i < N; i += N_block) {
    N_block = MIN((N - i), N_block);

    idxdBLAS_camax_sub(N_block, x, incX, amax_tmp);
    amax = MAX(amax_tmp[0], amax_tmp[1]);

    if (isinf(amax) || isinf(manY[0])){
      for (j = 0; j < N_block; j++){
        manY[0] += fabsf(x[j * 2 * incX]);
        manY[0] += fabsf(x[j * 2 * incX + 1]);
      }
    }
    if (isnan(manY[0]) || isnan(asum[0]) || isnan(asum[1])){
      manY[0] += asum[0] + asum[1];
      free(asum);
      return;
    } else if (isinf(manY[0])){
      x += N_block * 2 * incX;
      continue;
    }

    if (deposits + N_block > idxd_SIENDURANCE) {
      idxd_cirenorm(fold, asum);
      deposits = 0;
    }

    idxd_cisupdate(fold, amax, asum);

    /*[[[cog
      cog.out(generate.generate(depositASum.DepositASum(dataTypes.FloatComplex, "fold", "N_block", "x", "incX", "asum", 1), cog.inFile, args, params, mode))
      ]]]*/
    //[[[end]]]

    deposits += N_block;
  }

  idxd_cirenorm(fold, asum);
  idxd_smsmadd(fold, asum, 2, asum + 2 * fold, 2, manY, incmanY, carY, inccarY);
  idxd_smsmadd(fold, asum + 1, 2, asum + 2 * fold + 1, 2, manY, incmanY, carY, inccarY);

  free(asum);

  return;
}
