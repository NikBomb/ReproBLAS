#include <stdlib.h>

#include "../common/common.h"
#include "idxdBLAS.h"

/*[[[cog
import cog
import generate
import dataTypes
from src.common import blockSize
from scripts import terminal

rounded_cache = 2**(int(terminal.get_cache()).bit_length() - 1)
xy_block = rounded_cache//dataTypes.Float.byte_size
y_block = max(xy_block//256, 1)

cog.out(generate.generate(blockSize.BlockSize("sisgemv", "Y_BLOCK", 1, y_block, y_block, ["bench_rsgemv_fold_{}".format(terminal.get_sidefaultfold())]), cog.inFile, args, params, mode))
cog.out(generate.generate(blockSize.BlockSize("sisgemv", "XY_BLOCK", y_block, xy_block, xy_block, ["bench_rsgemv_fold_{}".format(terminal.get_sidefaultfold())]), cog.inFile, args, params, mode))
cog.out(generate.generate(blockSize.BlockSize("sisgemv", "YT_BLOCK", 1, y_block, y_block, ["bench_rsgemv_fold_TransA_{}".format(terminal.get_sidefaultfold())]), cog.inFile, args, params, mode))
cog.out(generate.generate(blockSize.BlockSize("sisgemv", "XYT_BLOCK", y_block, xy_block, xy_block, ["bench_rsgemv_fold_TransA_{}".format(terminal.get_sidefaultfold())]), cog.inFile, args, params, mode))
cog.out(generate.generate(blockSize.BlockSize("sisgemv", "T_BLOCK", 1, 32, 32, ["bench_rsgemv_TransA_fold_{}".format(terminal.get_sidefaultfold())]), cog.inFile, args, params, mode))
]]]*/
#define Y_BLOCK 32
#define XY_BLOCK 65536
#define YT_BLOCK 256
#define XYT_BLOCK 65536
#define T_BLOCK 16
//[[[end]]]
#define X_BLOCK (XY_BLOCK/Y_BLOCK)
#define XT_BLOCK (XYT_BLOCK/YT_BLOCK)

/**
 * @brief Add to indexed single precision vector Y the matrix-vector product of single precision matrix A and single precision vector X
 *
 * Performs one of the matrix-vector operations
 *
 *   y := alpha*A*x + beta*y   or   y := alpha*A**T*x + beta*y,
 *
 * where alpha and beta are scalars, x is a vector, y is an indexed vector, and A is an M by N matrix.
 *
 * @param fold the fold of the indexed types
 * @param Order a character specifying the matrix ordering ('r' or 'R' for row-major, 'c' or 'C' for column major)
 * @param TransA a character specifying whether or not to transpose A before taking the matrix-vector product ('n' or 'N' not to transpose, 't' or 'T' or 'c' or 'C' to transpose)
 * @param M number of rows of matrix A
 * @param N number of columns of matrix A
 * @param alpha scalar alpha
 * @param A single precision matrix of dimension (M, lda) in row-major or (lda, N) in column-major
 * @param lda the first dimension of A as declared in the calling program
 * @param X single precision vector of at least size N if not transposed or size M otherwise
 * @param incX X vector stride (use every incX'th element)
 * @param beta scalar beta
 * @param Y indexed single precision vector Y of at least size M if not transposed or size N otherwise
 * @param incY Y vector stride (use every incY'th element)
 *
 * @author Peter Ahrens
 * @date   18 Jan 2016
 */
void idxdBLAS_sisgemv(const int fold, const char Order,
                      const char TransA, const int M, const int N,
                      const float alpha, const float *A, const int lda,
                      const float *X, const int incX,
                      float_indexed *Y, const int incY){
  int i;
  int ii;
  int iii;
  int j;
  int jj;
  int jjj;
  float *bufX;
  int incbufX;
  float *bufA;

  if(M == 0 || N == 0 || alpha == 0.0){
    return;
  }

  switch(Order){

    //row major
    case 'r':
    case 'R':
      switch(TransA){

        //row major A not transposed
        case 'n':
        case 'N':
          if(alpha == 1.0){
            bufX = (float*)X;
            incbufX = incX;
          }else{
            bufX = (float*)malloc(N * sizeof(float));
            for(j = 0; j < N; j++){
              bufX[j] = X[j * incX] * alpha;
            }
            incbufX = 1;
          }
          for(i = 0; i < M; i += Y_BLOCK){
            for(j = 0; j < N; j += X_BLOCK){
              for(ii = i; ii < M && ii < i + Y_BLOCK; ii++){
                idxdBLAS_sisdot(fold, MIN(X_BLOCK, N - j), A + ii * lda + j, 1, bufX + j * incbufX, incbufX, Y + ii * incY * idxd_sinum(fold));
              }
            }
          }
          if(alpha != 1.0){
            free(bufX);
          }
          break;

        //row major A transposed
        default:
          if(alpha == 1.0){
            bufX = (float*)X;
            incbufX = incX;
          }else{
            bufX = (float*)malloc(M * sizeof(float));
            for(j = 0; j < M; j++){
              bufX[j] = X[j * incX] * alpha;
            }
            incbufX = 1;
          }
          bufA = (float*)malloc(XT_BLOCK * YT_BLOCK * sizeof(float));
          for(i = 0; i < N; i += YT_BLOCK){
            for(j = 0; j < M; j += XT_BLOCK){
              for(jj = j; jj < M && jj < j + XT_BLOCK; jj += T_BLOCK){
                for(ii = i; ii < N && ii < i + YT_BLOCK; ii+= T_BLOCK){
                  for(jjj = jj; jjj < M && jjj < jj + MIN(T_BLOCK, XT_BLOCK); jjj++){
                    for(iii = ii; iii < N && iii < ii + MIN(T_BLOCK, YT_BLOCK); iii++){
                      bufA[(iii - i) * XT_BLOCK + (jjj - j)] = A[jjj * lda + iii];
                    }
                  }
                }
              }
              for(ii = i; ii < N && ii < i + YT_BLOCK; ii++){
                idxdBLAS_sisdot(fold, MIN(XT_BLOCK, M - j), bufA + (ii - i) * XT_BLOCK, 1, bufX + j * incbufX, incbufX, Y + ii * incY * idxd_sinum(fold));
              }
            }
          }
          free(bufA);
          if(alpha != 1.0){
            free(bufX);
          }
          break;
      }
      break;

    //column major
    default:
      switch(TransA){

        //column major A not transposed
        case 'n':
        case 'N':
          idxdBLAS_sisgemv(fold, 'r', 't', N, M, alpha, A, lda, X, incX, Y, incY);
          break;

        //column major A transposed
        default:
          idxdBLAS_sisgemv(fold, 'r', 'n', N, M, alpha, A, lda, X, incX, Y, incY);
          break;
      }
      break;
  }
}
