#include <complex.h>
#include <stdio.h>
#include <stdlib.h>
#include <float.h>
#include <math.h>
#include "../config.h"
#include "../Common/Common.h"
#include "indexedBLAS.h"
#include <immintrin.h>
#include <emmintrin.h>

/*[[[cog
import cog
import generate
import dataTypes
import dotcI2
]]]*/
//[[[end]]]

void cdotcI2(int n, float complex* v, int incv, float complex* y, int incy, int fold, float complex* sum){
  /*[[[cog
  cog.out(generate.generate(dotcI2.DotCI2(dataTypes.FloatComplex, "n", "v", "incv", "sum", 1, "y", "incy"), cog.inFile, args, params, mode))
  ]]]*/
  #ifdef __AVX__
    __m256 mask_CONJ; AVX_CONJ_MASKS(mask_CONJ);
    __m256 mask_BLP; AVX_BLP_MASKS(mask_BLP);
    float complex tmp_cons[4] __attribute__((aligned(32)));
    SET_DAZ_FLAG;
    switch(fold){
      case 3:{
        int i;

        float* sum_base = (float*) sum;
        float* v_base = (float*) v;
        float* y_base = (float*) y;
        __m256 v_0, v_1, v_2, v_3;
        __m256 y_0, y_1;
        __m256 q_0, q_1;
        __m256 s_0_0, s_0_1;
        __m256 s_1_0, s_1_1;
        __m256 s_2_0, s_2_1;

        s_0_0 = s_0_1 = (__m256)_mm256_broadcast_sd((double *)(sum_base));
        s_1_0 = s_1_1 = (__m256)_mm256_broadcast_sd((double *)(sum_base + 2));
        s_2_0 = s_2_1 = (__m256)_mm256_broadcast_sd((double *)(sum_base + 4));
        if(incv == 1){
          if(incy == 1){

            for(i = 0; i + 8 <= n; i += 8, v_base += 16, y_base += 16){
              v_0 = _mm256_loadu_ps(v_base);
              v_1 = _mm256_loadu_ps(v_base + 8);
              y_0 = _mm256_loadu_ps(y_base);
              y_1 = _mm256_loadu_ps(y_base + 8);
              v_2 = _mm256_xor_ps(_mm256_mul_ps(_mm256_permute_ps(v_0, 0b10110001), _mm256_permute_ps(y_0, 0b11110101)), mask_CONJ);
              v_3 = _mm256_xor_ps(_mm256_mul_ps(_mm256_permute_ps(v_1, 0b10110001), _mm256_permute_ps(y_1, 0b11110101)), mask_CONJ);
              v_0 = _mm256_mul_ps(v_0, _mm256_permute_ps(y_0, 0b10100000));
              v_1 = _mm256_mul_ps(v_1, _mm256_permute_ps(y_1, 0b10100000));
              q_0 = s_0_0;
              q_1 = s_0_1;
              s_0_0 = _mm256_add_ps(s_0_0, _mm256_or_ps(v_0, mask_BLP));
              s_0_1 = _mm256_add_ps(s_0_1, _mm256_or_ps(v_1, mask_BLP));
              q_0 = _mm256_sub_ps(q_0, s_0_0);
              q_1 = _mm256_sub_ps(q_1, s_0_1);
              v_0 = _mm256_add_ps(v_0, q_0);
              v_1 = _mm256_add_ps(v_1, q_1);
              q_0 = s_1_0;
              q_1 = s_1_1;
              s_1_0 = _mm256_add_ps(s_1_0, _mm256_or_ps(v_0, mask_BLP));
              s_1_1 = _mm256_add_ps(s_1_1, _mm256_or_ps(v_1, mask_BLP));
              q_0 = _mm256_sub_ps(q_0, s_1_0);
              q_1 = _mm256_sub_ps(q_1, s_1_1);
              v_0 = _mm256_add_ps(v_0, q_0);
              v_1 = _mm256_add_ps(v_1, q_1);
              s_2_0 = _mm256_add_ps(s_2_0, _mm256_or_ps(v_0, mask_BLP));
              s_2_1 = _mm256_add_ps(s_2_1, _mm256_or_ps(v_1, mask_BLP));
              q_0 = s_0_0;
              q_1 = s_0_1;
              s_0_0 = _mm256_add_ps(s_0_0, _mm256_or_ps(v_2, mask_BLP));
              s_0_1 = _mm256_add_ps(s_0_1, _mm256_or_ps(v_3, mask_BLP));
              q_0 = _mm256_sub_ps(q_0, s_0_0);
              q_1 = _mm256_sub_ps(q_1, s_0_1);
              v_2 = _mm256_add_ps(v_2, q_0);
              v_3 = _mm256_add_ps(v_3, q_1);
              q_0 = s_1_0;
              q_1 = s_1_1;
              s_1_0 = _mm256_add_ps(s_1_0, _mm256_or_ps(v_2, mask_BLP));
              s_1_1 = _mm256_add_ps(s_1_1, _mm256_or_ps(v_3, mask_BLP));
              q_0 = _mm256_sub_ps(q_0, s_1_0);
              q_1 = _mm256_sub_ps(q_1, s_1_1);
              v_2 = _mm256_add_ps(v_2, q_0);
              v_3 = _mm256_add_ps(v_3, q_1);
              s_2_0 = _mm256_add_ps(s_2_0, _mm256_or_ps(v_2, mask_BLP));
              s_2_1 = _mm256_add_ps(s_2_1, _mm256_or_ps(v_3, mask_BLP));
            }
            if(i + 4 <= n){
              v_0 = _mm256_loadu_ps(v_base);
              y_0 = _mm256_loadu_ps(y_base);
              v_1 = _mm256_xor_ps(_mm256_mul_ps(_mm256_permute_ps(v_0, 0b10110001), _mm256_permute_ps(y_0, 0b11110101)), mask_CONJ);
              v_0 = _mm256_mul_ps(v_0, _mm256_permute_ps(y_0, 0b10100000));
              q_0 = s_0_0;
              q_1 = s_0_1;
              s_0_0 = _mm256_add_ps(s_0_0, _mm256_or_ps(v_0, mask_BLP));
              s_0_1 = _mm256_add_ps(s_0_1, _mm256_or_ps(v_1, mask_BLP));
              q_0 = _mm256_sub_ps(q_0, s_0_0);
              q_1 = _mm256_sub_ps(q_1, s_0_1);
              v_0 = _mm256_add_ps(v_0, q_0);
              v_1 = _mm256_add_ps(v_1, q_1);
              q_0 = s_1_0;
              q_1 = s_1_1;
              s_1_0 = _mm256_add_ps(s_1_0, _mm256_or_ps(v_0, mask_BLP));
              s_1_1 = _mm256_add_ps(s_1_1, _mm256_or_ps(v_1, mask_BLP));
              q_0 = _mm256_sub_ps(q_0, s_1_0);
              q_1 = _mm256_sub_ps(q_1, s_1_1);
              v_0 = _mm256_add_ps(v_0, q_0);
              v_1 = _mm256_add_ps(v_1, q_1);
              s_2_0 = _mm256_add_ps(s_2_0, _mm256_or_ps(v_0, mask_BLP));
              s_2_1 = _mm256_add_ps(s_2_1, _mm256_or_ps(v_1, mask_BLP));
              i += 4, v_base += 8, y_base += 8;
            }
            if(i < n){
              v_0 = (__m256)_mm256_set_pd(0, (n - i)>2?((double*)v_base)[2]:0, (n - i)>1?((double*)v_base)[1]:0, ((double*)v_base)[0]);
              y_0 = (__m256)_mm256_set_pd(0, (n - i)>2?((double*)y_base)[2]:0, (n - i)>1?((double*)y_base)[1]:0, ((double*)y_base)[0]);
              v_1 = _mm256_xor_ps(_mm256_mul_ps(_mm256_permute_ps(v_0, 0b10110001), _mm256_permute_ps(y_0, 0b11110101)), mask_CONJ);
              v_0 = _mm256_mul_ps(v_0, _mm256_permute_ps(y_0, 0b10100000));
              q_0 = s_0_0;
              q_1 = s_0_1;
              s_0_0 = _mm256_add_ps(s_0_0, _mm256_or_ps(v_0, mask_BLP));
              s_0_1 = _mm256_add_ps(s_0_1, _mm256_or_ps(v_1, mask_BLP));
              q_0 = _mm256_sub_ps(q_0, s_0_0);
              q_1 = _mm256_sub_ps(q_1, s_0_1);
              v_0 = _mm256_add_ps(v_0, q_0);
              v_1 = _mm256_add_ps(v_1, q_1);
              q_0 = s_1_0;
              q_1 = s_1_1;
              s_1_0 = _mm256_add_ps(s_1_0, _mm256_or_ps(v_0, mask_BLP));
              s_1_1 = _mm256_add_ps(s_1_1, _mm256_or_ps(v_1, mask_BLP));
              q_0 = _mm256_sub_ps(q_0, s_1_0);
              q_1 = _mm256_sub_ps(q_1, s_1_1);
              v_0 = _mm256_add_ps(v_0, q_0);
              v_1 = _mm256_add_ps(v_1, q_1);
              s_2_0 = _mm256_add_ps(s_2_0, _mm256_or_ps(v_0, mask_BLP));
              s_2_1 = _mm256_add_ps(s_2_1, _mm256_or_ps(v_1, mask_BLP));
            }
          }else{

            for(i = 0; i + 8 <= n; i += 8, v_base += 16, y_base += (incy * 16)){
              v_0 = _mm256_loadu_ps(v_base);
              v_1 = _mm256_loadu_ps(v_base + 8);
              y_0 = _mm256_set_ps(y_base[((incy * 6) + 1)], y_base[(incy * 6)], y_base[((incy * 4) + 1)], y_base[(incy * 4)], y_base[((incy * 2) + 1)], y_base[(incy * 2)], y_base[1], y_base[0]);
              y_1 = _mm256_set_ps(y_base[((incy * 14) + 1)], y_base[(incy * 14)], y_base[((incy * 12) + 1)], y_base[(incy * 12)], y_base[((incy * 10) + 1)], y_base[(incy * 10)], y_base[((incy * 8) + 1)], y_base[(incy * 8)]);
              v_2 = _mm256_xor_ps(_mm256_mul_ps(_mm256_permute_ps(v_0, 0b10110001), _mm256_permute_ps(y_0, 0b11110101)), mask_CONJ);
              v_3 = _mm256_xor_ps(_mm256_mul_ps(_mm256_permute_ps(v_1, 0b10110001), _mm256_permute_ps(y_1, 0b11110101)), mask_CONJ);
              v_0 = _mm256_mul_ps(v_0, _mm256_permute_ps(y_0, 0b10100000));
              v_1 = _mm256_mul_ps(v_1, _mm256_permute_ps(y_1, 0b10100000));
              q_0 = s_0_0;
              q_1 = s_0_1;
              s_0_0 = _mm256_add_ps(s_0_0, _mm256_or_ps(v_0, mask_BLP));
              s_0_1 = _mm256_add_ps(s_0_1, _mm256_or_ps(v_1, mask_BLP));
              q_0 = _mm256_sub_ps(q_0, s_0_0);
              q_1 = _mm256_sub_ps(q_1, s_0_1);
              v_0 = _mm256_add_ps(v_0, q_0);
              v_1 = _mm256_add_ps(v_1, q_1);
              q_0 = s_1_0;
              q_1 = s_1_1;
              s_1_0 = _mm256_add_ps(s_1_0, _mm256_or_ps(v_0, mask_BLP));
              s_1_1 = _mm256_add_ps(s_1_1, _mm256_or_ps(v_1, mask_BLP));
              q_0 = _mm256_sub_ps(q_0, s_1_0);
              q_1 = _mm256_sub_ps(q_1, s_1_1);
              v_0 = _mm256_add_ps(v_0, q_0);
              v_1 = _mm256_add_ps(v_1, q_1);
              s_2_0 = _mm256_add_ps(s_2_0, _mm256_or_ps(v_0, mask_BLP));
              s_2_1 = _mm256_add_ps(s_2_1, _mm256_or_ps(v_1, mask_BLP));
              q_0 = s_0_0;
              q_1 = s_0_1;
              s_0_0 = _mm256_add_ps(s_0_0, _mm256_or_ps(v_2, mask_BLP));
              s_0_1 = _mm256_add_ps(s_0_1, _mm256_or_ps(v_3, mask_BLP));
              q_0 = _mm256_sub_ps(q_0, s_0_0);
              q_1 = _mm256_sub_ps(q_1, s_0_1);
              v_2 = _mm256_add_ps(v_2, q_0);
              v_3 = _mm256_add_ps(v_3, q_1);
              q_0 = s_1_0;
              q_1 = s_1_1;
              s_1_0 = _mm256_add_ps(s_1_0, _mm256_or_ps(v_2, mask_BLP));
              s_1_1 = _mm256_add_ps(s_1_1, _mm256_or_ps(v_3, mask_BLP));
              q_0 = _mm256_sub_ps(q_0, s_1_0);
              q_1 = _mm256_sub_ps(q_1, s_1_1);
              v_2 = _mm256_add_ps(v_2, q_0);
              v_3 = _mm256_add_ps(v_3, q_1);
              s_2_0 = _mm256_add_ps(s_2_0, _mm256_or_ps(v_2, mask_BLP));
              s_2_1 = _mm256_add_ps(s_2_1, _mm256_or_ps(v_3, mask_BLP));
            }
            if(i + 4 <= n){
              v_0 = _mm256_loadu_ps(v_base);
              y_0 = _mm256_set_ps(y_base[((incy * 6) + 1)], y_base[(incy * 6)], y_base[((incy * 4) + 1)], y_base[(incy * 4)], y_base[((incy * 2) + 1)], y_base[(incy * 2)], y_base[1], y_base[0]);
              v_1 = _mm256_xor_ps(_mm256_mul_ps(_mm256_permute_ps(v_0, 0b10110001), _mm256_permute_ps(y_0, 0b11110101)), mask_CONJ);
              v_0 = _mm256_mul_ps(v_0, _mm256_permute_ps(y_0, 0b10100000));
              q_0 = s_0_0;
              q_1 = s_0_1;
              s_0_0 = _mm256_add_ps(s_0_0, _mm256_or_ps(v_0, mask_BLP));
              s_0_1 = _mm256_add_ps(s_0_1, _mm256_or_ps(v_1, mask_BLP));
              q_0 = _mm256_sub_ps(q_0, s_0_0);
              q_1 = _mm256_sub_ps(q_1, s_0_1);
              v_0 = _mm256_add_ps(v_0, q_0);
              v_1 = _mm256_add_ps(v_1, q_1);
              q_0 = s_1_0;
              q_1 = s_1_1;
              s_1_0 = _mm256_add_ps(s_1_0, _mm256_or_ps(v_0, mask_BLP));
              s_1_1 = _mm256_add_ps(s_1_1, _mm256_or_ps(v_1, mask_BLP));
              q_0 = _mm256_sub_ps(q_0, s_1_0);
              q_1 = _mm256_sub_ps(q_1, s_1_1);
              v_0 = _mm256_add_ps(v_0, q_0);
              v_1 = _mm256_add_ps(v_1, q_1);
              s_2_0 = _mm256_add_ps(s_2_0, _mm256_or_ps(v_0, mask_BLP));
              s_2_1 = _mm256_add_ps(s_2_1, _mm256_or_ps(v_1, mask_BLP));
              i += 4, v_base += 8, y_base += (incy * 8);
            }
            if(i < n){
              v_0 = (__m256)_mm256_set_pd(0, (n - i)>2?((double*)v_base)[2]:0, (n - i)>1?((double*)v_base)[1]:0, ((double*)v_base)[0]);
              y_0 = (__m256)_mm256_set_pd(0, (n - i)>2?((double*)y_base)[(incy * 2)]:0, (n - i)>1?((double*)y_base)[incy]:0, ((double*)y_base)[0]);
              v_1 = _mm256_xor_ps(_mm256_mul_ps(_mm256_permute_ps(v_0, 0b10110001), _mm256_permute_ps(y_0, 0b11110101)), mask_CONJ);
              v_0 = _mm256_mul_ps(v_0, _mm256_permute_ps(y_0, 0b10100000));
              q_0 = s_0_0;
              q_1 = s_0_1;
              s_0_0 = _mm256_add_ps(s_0_0, _mm256_or_ps(v_0, mask_BLP));
              s_0_1 = _mm256_add_ps(s_0_1, _mm256_or_ps(v_1, mask_BLP));
              q_0 = _mm256_sub_ps(q_0, s_0_0);
              q_1 = _mm256_sub_ps(q_1, s_0_1);
              v_0 = _mm256_add_ps(v_0, q_0);
              v_1 = _mm256_add_ps(v_1, q_1);
              q_0 = s_1_0;
              q_1 = s_1_1;
              s_1_0 = _mm256_add_ps(s_1_0, _mm256_or_ps(v_0, mask_BLP));
              s_1_1 = _mm256_add_ps(s_1_1, _mm256_or_ps(v_1, mask_BLP));
              q_0 = _mm256_sub_ps(q_0, s_1_0);
              q_1 = _mm256_sub_ps(q_1, s_1_1);
              v_0 = _mm256_add_ps(v_0, q_0);
              v_1 = _mm256_add_ps(v_1, q_1);
              s_2_0 = _mm256_add_ps(s_2_0, _mm256_or_ps(v_0, mask_BLP));
              s_2_1 = _mm256_add_ps(s_2_1, _mm256_or_ps(v_1, mask_BLP));
            }
          }
        }else{
          if(incy == 1){

            for(i = 0; i + 8 <= n; i += 8, v_base += (incv * 16), y_base += 16){
              v_0 = _mm256_set_ps(v_base[((incv * 6) + 1)], v_base[(incv * 6)], v_base[((incv * 4) + 1)], v_base[(incv * 4)], v_base[((incv * 2) + 1)], v_base[(incv * 2)], v_base[1], v_base[0]);
              v_1 = _mm256_set_ps(v_base[((incv * 14) + 1)], v_base[(incv * 14)], v_base[((incv * 12) + 1)], v_base[(incv * 12)], v_base[((incv * 10) + 1)], v_base[(incv * 10)], v_base[((incv * 8) + 1)], v_base[(incv * 8)]);
              y_0 = _mm256_loadu_ps(y_base);
              y_1 = _mm256_loadu_ps(y_base + 8);
              v_2 = _mm256_xor_ps(_mm256_mul_ps(_mm256_permute_ps(v_0, 0b10110001), _mm256_permute_ps(y_0, 0b11110101)), mask_CONJ);
              v_3 = _mm256_xor_ps(_mm256_mul_ps(_mm256_permute_ps(v_1, 0b10110001), _mm256_permute_ps(y_1, 0b11110101)), mask_CONJ);
              v_0 = _mm256_mul_ps(v_0, _mm256_permute_ps(y_0, 0b10100000));
              v_1 = _mm256_mul_ps(v_1, _mm256_permute_ps(y_1, 0b10100000));
              q_0 = s_0_0;
              q_1 = s_0_1;
              s_0_0 = _mm256_add_ps(s_0_0, _mm256_or_ps(v_0, mask_BLP));
              s_0_1 = _mm256_add_ps(s_0_1, _mm256_or_ps(v_1, mask_BLP));
              q_0 = _mm256_sub_ps(q_0, s_0_0);
              q_1 = _mm256_sub_ps(q_1, s_0_1);
              v_0 = _mm256_add_ps(v_0, q_0);
              v_1 = _mm256_add_ps(v_1, q_1);
              q_0 = s_1_0;
              q_1 = s_1_1;
              s_1_0 = _mm256_add_ps(s_1_0, _mm256_or_ps(v_0, mask_BLP));
              s_1_1 = _mm256_add_ps(s_1_1, _mm256_or_ps(v_1, mask_BLP));
              q_0 = _mm256_sub_ps(q_0, s_1_0);
              q_1 = _mm256_sub_ps(q_1, s_1_1);
              v_0 = _mm256_add_ps(v_0, q_0);
              v_1 = _mm256_add_ps(v_1, q_1);
              s_2_0 = _mm256_add_ps(s_2_0, _mm256_or_ps(v_0, mask_BLP));
              s_2_1 = _mm256_add_ps(s_2_1, _mm256_or_ps(v_1, mask_BLP));
              q_0 = s_0_0;
              q_1 = s_0_1;
              s_0_0 = _mm256_add_ps(s_0_0, _mm256_or_ps(v_2, mask_BLP));
              s_0_1 = _mm256_add_ps(s_0_1, _mm256_or_ps(v_3, mask_BLP));
              q_0 = _mm256_sub_ps(q_0, s_0_0);
              q_1 = _mm256_sub_ps(q_1, s_0_1);
              v_2 = _mm256_add_ps(v_2, q_0);
              v_3 = _mm256_add_ps(v_3, q_1);
              q_0 = s_1_0;
              q_1 = s_1_1;
              s_1_0 = _mm256_add_ps(s_1_0, _mm256_or_ps(v_2, mask_BLP));
              s_1_1 = _mm256_add_ps(s_1_1, _mm256_or_ps(v_3, mask_BLP));
              q_0 = _mm256_sub_ps(q_0, s_1_0);
              q_1 = _mm256_sub_ps(q_1, s_1_1);
              v_2 = _mm256_add_ps(v_2, q_0);
              v_3 = _mm256_add_ps(v_3, q_1);
              s_2_0 = _mm256_add_ps(s_2_0, _mm256_or_ps(v_2, mask_BLP));
              s_2_1 = _mm256_add_ps(s_2_1, _mm256_or_ps(v_3, mask_BLP));
            }
            if(i + 4 <= n){
              v_0 = _mm256_set_ps(v_base[((incv * 6) + 1)], v_base[(incv * 6)], v_base[((incv * 4) + 1)], v_base[(incv * 4)], v_base[((incv * 2) + 1)], v_base[(incv * 2)], v_base[1], v_base[0]);
              y_0 = _mm256_loadu_ps(y_base);
              v_1 = _mm256_xor_ps(_mm256_mul_ps(_mm256_permute_ps(v_0, 0b10110001), _mm256_permute_ps(y_0, 0b11110101)), mask_CONJ);
              v_0 = _mm256_mul_ps(v_0, _mm256_permute_ps(y_0, 0b10100000));
              q_0 = s_0_0;
              q_1 = s_0_1;
              s_0_0 = _mm256_add_ps(s_0_0, _mm256_or_ps(v_0, mask_BLP));
              s_0_1 = _mm256_add_ps(s_0_1, _mm256_or_ps(v_1, mask_BLP));
              q_0 = _mm256_sub_ps(q_0, s_0_0);
              q_1 = _mm256_sub_ps(q_1, s_0_1);
              v_0 = _mm256_add_ps(v_0, q_0);
              v_1 = _mm256_add_ps(v_1, q_1);
              q_0 = s_1_0;
              q_1 = s_1_1;
              s_1_0 = _mm256_add_ps(s_1_0, _mm256_or_ps(v_0, mask_BLP));
              s_1_1 = _mm256_add_ps(s_1_1, _mm256_or_ps(v_1, mask_BLP));
              q_0 = _mm256_sub_ps(q_0, s_1_0);
              q_1 = _mm256_sub_ps(q_1, s_1_1);
              v_0 = _mm256_add_ps(v_0, q_0);
              v_1 = _mm256_add_ps(v_1, q_1);
              s_2_0 = _mm256_add_ps(s_2_0, _mm256_or_ps(v_0, mask_BLP));
              s_2_1 = _mm256_add_ps(s_2_1, _mm256_or_ps(v_1, mask_BLP));
              i += 4, v_base += (incv * 8), y_base += 8;
            }
            if(i < n){
              v_0 = (__m256)_mm256_set_pd(0, (n - i)>2?((double*)v_base)[(incv * 2)]:0, (n - i)>1?((double*)v_base)[incv]:0, ((double*)v_base)[0]);
              y_0 = (__m256)_mm256_set_pd(0, (n - i)>2?((double*)y_base)[2]:0, (n - i)>1?((double*)y_base)[1]:0, ((double*)y_base)[0]);
              v_1 = _mm256_xor_ps(_mm256_mul_ps(_mm256_permute_ps(v_0, 0b10110001), _mm256_permute_ps(y_0, 0b11110101)), mask_CONJ);
              v_0 = _mm256_mul_ps(v_0, _mm256_permute_ps(y_0, 0b10100000));
              q_0 = s_0_0;
              q_1 = s_0_1;
              s_0_0 = _mm256_add_ps(s_0_0, _mm256_or_ps(v_0, mask_BLP));
              s_0_1 = _mm256_add_ps(s_0_1, _mm256_or_ps(v_1, mask_BLP));
              q_0 = _mm256_sub_ps(q_0, s_0_0);
              q_1 = _mm256_sub_ps(q_1, s_0_1);
              v_0 = _mm256_add_ps(v_0, q_0);
              v_1 = _mm256_add_ps(v_1, q_1);
              q_0 = s_1_0;
              q_1 = s_1_1;
              s_1_0 = _mm256_add_ps(s_1_0, _mm256_or_ps(v_0, mask_BLP));
              s_1_1 = _mm256_add_ps(s_1_1, _mm256_or_ps(v_1, mask_BLP));
              q_0 = _mm256_sub_ps(q_0, s_1_0);
              q_1 = _mm256_sub_ps(q_1, s_1_1);
              v_0 = _mm256_add_ps(v_0, q_0);
              v_1 = _mm256_add_ps(v_1, q_1);
              s_2_0 = _mm256_add_ps(s_2_0, _mm256_or_ps(v_0, mask_BLP));
              s_2_1 = _mm256_add_ps(s_2_1, _mm256_or_ps(v_1, mask_BLP));
            }
          }else{

            for(i = 0; i + 8 <= n; i += 8, v_base += (incv * 16), y_base += (incy * 16)){
              v_0 = _mm256_set_ps(v_base[((incv * 6) + 1)], v_base[(incv * 6)], v_base[((incv * 4) + 1)], v_base[(incv * 4)], v_base[((incv * 2) + 1)], v_base[(incv * 2)], v_base[1], v_base[0]);
              v_1 = _mm256_set_ps(v_base[((incv * 14) + 1)], v_base[(incv * 14)], v_base[((incv * 12) + 1)], v_base[(incv * 12)], v_base[((incv * 10) + 1)], v_base[(incv * 10)], v_base[((incv * 8) + 1)], v_base[(incv * 8)]);
              y_0 = _mm256_set_ps(y_base[((incy * 6) + 1)], y_base[(incy * 6)], y_base[((incy * 4) + 1)], y_base[(incy * 4)], y_base[((incy * 2) + 1)], y_base[(incy * 2)], y_base[1], y_base[0]);
              y_1 = _mm256_set_ps(y_base[((incy * 14) + 1)], y_base[(incy * 14)], y_base[((incy * 12) + 1)], y_base[(incy * 12)], y_base[((incy * 10) + 1)], y_base[(incy * 10)], y_base[((incy * 8) + 1)], y_base[(incy * 8)]);
              v_2 = _mm256_xor_ps(_mm256_mul_ps(_mm256_permute_ps(v_0, 0b10110001), _mm256_permute_ps(y_0, 0b11110101)), mask_CONJ);
              v_3 = _mm256_xor_ps(_mm256_mul_ps(_mm256_permute_ps(v_1, 0b10110001), _mm256_permute_ps(y_1, 0b11110101)), mask_CONJ);
              v_0 = _mm256_mul_ps(v_0, _mm256_permute_ps(y_0, 0b10100000));
              v_1 = _mm256_mul_ps(v_1, _mm256_permute_ps(y_1, 0b10100000));
              q_0 = s_0_0;
              q_1 = s_0_1;
              s_0_0 = _mm256_add_ps(s_0_0, _mm256_or_ps(v_0, mask_BLP));
              s_0_1 = _mm256_add_ps(s_0_1, _mm256_or_ps(v_1, mask_BLP));
              q_0 = _mm256_sub_ps(q_0, s_0_0);
              q_1 = _mm256_sub_ps(q_1, s_0_1);
              v_0 = _mm256_add_ps(v_0, q_0);
              v_1 = _mm256_add_ps(v_1, q_1);
              q_0 = s_1_0;
              q_1 = s_1_1;
              s_1_0 = _mm256_add_ps(s_1_0, _mm256_or_ps(v_0, mask_BLP));
              s_1_1 = _mm256_add_ps(s_1_1, _mm256_or_ps(v_1, mask_BLP));
              q_0 = _mm256_sub_ps(q_0, s_1_0);
              q_1 = _mm256_sub_ps(q_1, s_1_1);
              v_0 = _mm256_add_ps(v_0, q_0);
              v_1 = _mm256_add_ps(v_1, q_1);
              s_2_0 = _mm256_add_ps(s_2_0, _mm256_or_ps(v_0, mask_BLP));
              s_2_1 = _mm256_add_ps(s_2_1, _mm256_or_ps(v_1, mask_BLP));
              q_0 = s_0_0;
              q_1 = s_0_1;
              s_0_0 = _mm256_add_ps(s_0_0, _mm256_or_ps(v_2, mask_BLP));
              s_0_1 = _mm256_add_ps(s_0_1, _mm256_or_ps(v_3, mask_BLP));
              q_0 = _mm256_sub_ps(q_0, s_0_0);
              q_1 = _mm256_sub_ps(q_1, s_0_1);
              v_2 = _mm256_add_ps(v_2, q_0);
              v_3 = _mm256_add_ps(v_3, q_1);
              q_0 = s_1_0;
              q_1 = s_1_1;
              s_1_0 = _mm256_add_ps(s_1_0, _mm256_or_ps(v_2, mask_BLP));
              s_1_1 = _mm256_add_ps(s_1_1, _mm256_or_ps(v_3, mask_BLP));
              q_0 = _mm256_sub_ps(q_0, s_1_0);
              q_1 = _mm256_sub_ps(q_1, s_1_1);
              v_2 = _mm256_add_ps(v_2, q_0);
              v_3 = _mm256_add_ps(v_3, q_1);
              s_2_0 = _mm256_add_ps(s_2_0, _mm256_or_ps(v_2, mask_BLP));
              s_2_1 = _mm256_add_ps(s_2_1, _mm256_or_ps(v_3, mask_BLP));
            }
            if(i + 4 <= n){
              v_0 = _mm256_set_ps(v_base[((incv * 6) + 1)], v_base[(incv * 6)], v_base[((incv * 4) + 1)], v_base[(incv * 4)], v_base[((incv * 2) + 1)], v_base[(incv * 2)], v_base[1], v_base[0]);
              y_0 = _mm256_set_ps(y_base[((incy * 6) + 1)], y_base[(incy * 6)], y_base[((incy * 4) + 1)], y_base[(incy * 4)], y_base[((incy * 2) + 1)], y_base[(incy * 2)], y_base[1], y_base[0]);
              v_1 = _mm256_xor_ps(_mm256_mul_ps(_mm256_permute_ps(v_0, 0b10110001), _mm256_permute_ps(y_0, 0b11110101)), mask_CONJ);
              v_0 = _mm256_mul_ps(v_0, _mm256_permute_ps(y_0, 0b10100000));
              q_0 = s_0_0;
              q_1 = s_0_1;
              s_0_0 = _mm256_add_ps(s_0_0, _mm256_or_ps(v_0, mask_BLP));
              s_0_1 = _mm256_add_ps(s_0_1, _mm256_or_ps(v_1, mask_BLP));
              q_0 = _mm256_sub_ps(q_0, s_0_0);
              q_1 = _mm256_sub_ps(q_1, s_0_1);
              v_0 = _mm256_add_ps(v_0, q_0);
              v_1 = _mm256_add_ps(v_1, q_1);
              q_0 = s_1_0;
              q_1 = s_1_1;
              s_1_0 = _mm256_add_ps(s_1_0, _mm256_or_ps(v_0, mask_BLP));
              s_1_1 = _mm256_add_ps(s_1_1, _mm256_or_ps(v_1, mask_BLP));
              q_0 = _mm256_sub_ps(q_0, s_1_0);
              q_1 = _mm256_sub_ps(q_1, s_1_1);
              v_0 = _mm256_add_ps(v_0, q_0);
              v_1 = _mm256_add_ps(v_1, q_1);
              s_2_0 = _mm256_add_ps(s_2_0, _mm256_or_ps(v_0, mask_BLP));
              s_2_1 = _mm256_add_ps(s_2_1, _mm256_or_ps(v_1, mask_BLP));
              i += 4, v_base += (incv * 8), y_base += (incy * 8);
            }
            if(i < n){
              v_0 = (__m256)_mm256_set_pd(0, (n - i)>2?((double*)v_base)[(incv * 2)]:0, (n - i)>1?((double*)v_base)[incv]:0, ((double*)v_base)[0]);
              y_0 = (__m256)_mm256_set_pd(0, (n - i)>2?((double*)y_base)[(incy * 2)]:0, (n - i)>1?((double*)y_base)[incy]:0, ((double*)y_base)[0]);
              v_1 = _mm256_xor_ps(_mm256_mul_ps(_mm256_permute_ps(v_0, 0b10110001), _mm256_permute_ps(y_0, 0b11110101)), mask_CONJ);
              v_0 = _mm256_mul_ps(v_0, _mm256_permute_ps(y_0, 0b10100000));
              q_0 = s_0_0;
              q_1 = s_0_1;
              s_0_0 = _mm256_add_ps(s_0_0, _mm256_or_ps(v_0, mask_BLP));
              s_0_1 = _mm256_add_ps(s_0_1, _mm256_or_ps(v_1, mask_BLP));
              q_0 = _mm256_sub_ps(q_0, s_0_0);
              q_1 = _mm256_sub_ps(q_1, s_0_1);
              v_0 = _mm256_add_ps(v_0, q_0);
              v_1 = _mm256_add_ps(v_1, q_1);
              q_0 = s_1_0;
              q_1 = s_1_1;
              s_1_0 = _mm256_add_ps(s_1_0, _mm256_or_ps(v_0, mask_BLP));
              s_1_1 = _mm256_add_ps(s_1_1, _mm256_or_ps(v_1, mask_BLP));
              q_0 = _mm256_sub_ps(q_0, s_1_0);
              q_1 = _mm256_sub_ps(q_1, s_1_1);
              v_0 = _mm256_add_ps(v_0, q_0);
              v_1 = _mm256_add_ps(v_1, q_1);
              s_2_0 = _mm256_add_ps(s_2_0, _mm256_or_ps(v_0, mask_BLP));
              s_2_1 = _mm256_add_ps(s_2_1, _mm256_or_ps(v_1, mask_BLP));
            }
          }
        }
        s_0_0 = _mm256_sub_ps(s_0_0, _mm256_set_ps(sum_base[1], sum_base[0], sum_base[1], sum_base[0], sum_base[1], sum_base[0], 0, 0));
        q_0 = (__m256)_mm256_broadcast_sd((double *)(sum_base));
        s_0_0 = _mm256_add_ps(s_0_0, _mm256_sub_ps(s_0_1, q_0));
        _mm256_store_ps((float*)tmp_cons, s_0_0);
        sum[0] = tmp_cons[0] + tmp_cons[1] + tmp_cons[2] + tmp_cons[3];
        s_1_0 = _mm256_sub_ps(s_1_0, _mm256_set_ps(sum_base[3], sum_base[2], sum_base[3], sum_base[2], sum_base[3], sum_base[2], 0, 0));
        q_0 = (__m256)_mm256_broadcast_sd((double *)(sum_base + 2));
        s_1_0 = _mm256_add_ps(s_1_0, _mm256_sub_ps(s_1_1, q_0));
        _mm256_store_ps((float*)tmp_cons, s_1_0);
        sum[1] = tmp_cons[0] + tmp_cons[1] + tmp_cons[2] + tmp_cons[3];
        s_2_0 = _mm256_sub_ps(s_2_0, _mm256_set_ps(sum_base[5], sum_base[4], sum_base[5], sum_base[4], sum_base[5], sum_base[4], 0, 0));
        q_0 = (__m256)_mm256_broadcast_sd((double *)(sum_base + 4));
        s_2_0 = _mm256_add_ps(s_2_0, _mm256_sub_ps(s_2_1, q_0));
        _mm256_store_ps((float*)tmp_cons, s_2_0);
        sum[2] = tmp_cons[0] + tmp_cons[1] + tmp_cons[2] + tmp_cons[3];
        RESET_DAZ_FLAG
        return;
      }
      default:{
        int i, j;

        float* sum_base = (float*) sum;
        float* v_base = (float*) v;
        float* y_base = (float*) y;
        __m256 v_0, v_1;
        __m256 y_0;
        __m256 q_0, q_1;
        __m256 s_0, s_1;
        __m256 s_buffer[(MAX_FOLD * 2)];

        for(j = 0; j < fold; j += 1){
          s_buffer[(j * 2)] = s_buffer[((j * 2) + 1)] = (__m256)_mm256_broadcast_sd((double *)(sum_base + (j * 2)));
        }
        if(incv == 1){
          if(incy == 1){

            for(i = 0; i + 4 <= n; i += 4, v_base += 8, y_base += 8){
              v_0 = _mm256_loadu_ps(v_base);
              y_0 = _mm256_loadu_ps(y_base);
              v_1 = _mm256_xor_ps(_mm256_mul_ps(_mm256_permute_ps(v_0, 0b10110001), _mm256_permute_ps(y_0, 0b11110101)), mask_CONJ);
              v_0 = _mm256_mul_ps(v_0, _mm256_permute_ps(y_0, 0b10100000));
              for(j = 0; j < fold - 1; j++){
                s_0 = s_buffer[(j * 2)];
                s_1 = s_buffer[((j * 2) + 1)];
                q_0 = _mm256_add_ps(s_0, _mm256_or_ps(v_0, mask_BLP));
                q_1 = _mm256_add_ps(s_1, _mm256_or_ps(v_1, mask_BLP));
                s_buffer[(j * 2)] = q_0;
                s_buffer[((j * 2) + 1)] = q_1;
                q_0 = _mm256_sub_ps(s_0, q_0);
                q_1 = _mm256_sub_ps(s_1, q_1);
                v_0 = _mm256_add_ps(v_0, q_0);
                v_1 = _mm256_add_ps(v_1, q_1);
              }
              s_buffer[(j * 2)] = _mm256_add_ps(s_buffer[(j * 2)], _mm256_or_ps(v_0, mask_BLP));
              s_buffer[((j * 2) + 1)] = _mm256_add_ps(s_buffer[((j * 2) + 1)], _mm256_or_ps(v_1, mask_BLP));
            }
            if(i < n){
              v_0 = (__m256)_mm256_set_pd(0, (n - i)>2?((double*)v_base)[2]:0, (n - i)>1?((double*)v_base)[1]:0, ((double*)v_base)[0]);
              y_0 = (__m256)_mm256_set_pd(0, (n - i)>2?((double*)y_base)[2]:0, (n - i)>1?((double*)y_base)[1]:0, ((double*)y_base)[0]);
              v_1 = _mm256_xor_ps(_mm256_mul_ps(_mm256_permute_ps(v_0, 0b10110001), _mm256_permute_ps(y_0, 0b11110101)), mask_CONJ);
              v_0 = _mm256_mul_ps(v_0, _mm256_permute_ps(y_0, 0b10100000));
              for(j = 0; j < fold - 1; j++){
                s_0 = s_buffer[(j * 2)];
                s_1 = s_buffer[((j * 2) + 1)];
                q_0 = _mm256_add_ps(s_0, _mm256_or_ps(v_0, mask_BLP));
                q_1 = _mm256_add_ps(s_1, _mm256_or_ps(v_1, mask_BLP));
                s_buffer[(j * 2)] = q_0;
                s_buffer[((j * 2) + 1)] = q_1;
                q_0 = _mm256_sub_ps(s_0, q_0);
                q_1 = _mm256_sub_ps(s_1, q_1);
                v_0 = _mm256_add_ps(v_0, q_0);
                v_1 = _mm256_add_ps(v_1, q_1);
              }
              s_buffer[(j * 2)] = _mm256_add_ps(s_buffer[(j * 2)], _mm256_or_ps(v_0, mask_BLP));
              s_buffer[((j * 2) + 1)] = _mm256_add_ps(s_buffer[((j * 2) + 1)], _mm256_or_ps(v_1, mask_BLP));
            }
          }else{

            for(i = 0; i + 4 <= n; i += 4, v_base += 8, y_base += (incy * 8)){
              v_0 = _mm256_loadu_ps(v_base);
              y_0 = _mm256_set_ps(y_base[((incy * 6) + 1)], y_base[(incy * 6)], y_base[((incy * 4) + 1)], y_base[(incy * 4)], y_base[((incy * 2) + 1)], y_base[(incy * 2)], y_base[1], y_base[0]);
              v_1 = _mm256_xor_ps(_mm256_mul_ps(_mm256_permute_ps(v_0, 0b10110001), _mm256_permute_ps(y_0, 0b11110101)), mask_CONJ);
              v_0 = _mm256_mul_ps(v_0, _mm256_permute_ps(y_0, 0b10100000));
              for(j = 0; j < fold - 1; j++){
                s_0 = s_buffer[(j * 2)];
                s_1 = s_buffer[((j * 2) + 1)];
                q_0 = _mm256_add_ps(s_0, _mm256_or_ps(v_0, mask_BLP));
                q_1 = _mm256_add_ps(s_1, _mm256_or_ps(v_1, mask_BLP));
                s_buffer[(j * 2)] = q_0;
                s_buffer[((j * 2) + 1)] = q_1;
                q_0 = _mm256_sub_ps(s_0, q_0);
                q_1 = _mm256_sub_ps(s_1, q_1);
                v_0 = _mm256_add_ps(v_0, q_0);
                v_1 = _mm256_add_ps(v_1, q_1);
              }
              s_buffer[(j * 2)] = _mm256_add_ps(s_buffer[(j * 2)], _mm256_or_ps(v_0, mask_BLP));
              s_buffer[((j * 2) + 1)] = _mm256_add_ps(s_buffer[((j * 2) + 1)], _mm256_or_ps(v_1, mask_BLP));
            }
            if(i < n){
              v_0 = (__m256)_mm256_set_pd(0, (n - i)>2?((double*)v_base)[2]:0, (n - i)>1?((double*)v_base)[1]:0, ((double*)v_base)[0]);
              y_0 = (__m256)_mm256_set_pd(0, (n - i)>2?((double*)y_base)[(incy * 2)]:0, (n - i)>1?((double*)y_base)[incy]:0, ((double*)y_base)[0]);
              v_1 = _mm256_xor_ps(_mm256_mul_ps(_mm256_permute_ps(v_0, 0b10110001), _mm256_permute_ps(y_0, 0b11110101)), mask_CONJ);
              v_0 = _mm256_mul_ps(v_0, _mm256_permute_ps(y_0, 0b10100000));
              for(j = 0; j < fold - 1; j++){
                s_0 = s_buffer[(j * 2)];
                s_1 = s_buffer[((j * 2) + 1)];
                q_0 = _mm256_add_ps(s_0, _mm256_or_ps(v_0, mask_BLP));
                q_1 = _mm256_add_ps(s_1, _mm256_or_ps(v_1, mask_BLP));
                s_buffer[(j * 2)] = q_0;
                s_buffer[((j * 2) + 1)] = q_1;
                q_0 = _mm256_sub_ps(s_0, q_0);
                q_1 = _mm256_sub_ps(s_1, q_1);
                v_0 = _mm256_add_ps(v_0, q_0);
                v_1 = _mm256_add_ps(v_1, q_1);
              }
              s_buffer[(j * 2)] = _mm256_add_ps(s_buffer[(j * 2)], _mm256_or_ps(v_0, mask_BLP));
              s_buffer[((j * 2) + 1)] = _mm256_add_ps(s_buffer[((j * 2) + 1)], _mm256_or_ps(v_1, mask_BLP));
            }
          }
        }else{
          if(incy == 1){

            for(i = 0; i + 4 <= n; i += 4, v_base += (incv * 8), y_base += 8){
              v_0 = _mm256_set_ps(v_base[((incv * 6) + 1)], v_base[(incv * 6)], v_base[((incv * 4) + 1)], v_base[(incv * 4)], v_base[((incv * 2) + 1)], v_base[(incv * 2)], v_base[1], v_base[0]);
              y_0 = _mm256_loadu_ps(y_base);
              v_1 = _mm256_xor_ps(_mm256_mul_ps(_mm256_permute_ps(v_0, 0b10110001), _mm256_permute_ps(y_0, 0b11110101)), mask_CONJ);
              v_0 = _mm256_mul_ps(v_0, _mm256_permute_ps(y_0, 0b10100000));
              for(j = 0; j < fold - 1; j++){
                s_0 = s_buffer[(j * 2)];
                s_1 = s_buffer[((j * 2) + 1)];
                q_0 = _mm256_add_ps(s_0, _mm256_or_ps(v_0, mask_BLP));
                q_1 = _mm256_add_ps(s_1, _mm256_or_ps(v_1, mask_BLP));
                s_buffer[(j * 2)] = q_0;
                s_buffer[((j * 2) + 1)] = q_1;
                q_0 = _mm256_sub_ps(s_0, q_0);
                q_1 = _mm256_sub_ps(s_1, q_1);
                v_0 = _mm256_add_ps(v_0, q_0);
                v_1 = _mm256_add_ps(v_1, q_1);
              }
              s_buffer[(j * 2)] = _mm256_add_ps(s_buffer[(j * 2)], _mm256_or_ps(v_0, mask_BLP));
              s_buffer[((j * 2) + 1)] = _mm256_add_ps(s_buffer[((j * 2) + 1)], _mm256_or_ps(v_1, mask_BLP));
            }
            if(i < n){
              v_0 = (__m256)_mm256_set_pd(0, (n - i)>2?((double*)v_base)[(incv * 2)]:0, (n - i)>1?((double*)v_base)[incv]:0, ((double*)v_base)[0]);
              y_0 = (__m256)_mm256_set_pd(0, (n - i)>2?((double*)y_base)[2]:0, (n - i)>1?((double*)y_base)[1]:0, ((double*)y_base)[0]);
              v_1 = _mm256_xor_ps(_mm256_mul_ps(_mm256_permute_ps(v_0, 0b10110001), _mm256_permute_ps(y_0, 0b11110101)), mask_CONJ);
              v_0 = _mm256_mul_ps(v_0, _mm256_permute_ps(y_0, 0b10100000));
              for(j = 0; j < fold - 1; j++){
                s_0 = s_buffer[(j * 2)];
                s_1 = s_buffer[((j * 2) + 1)];
                q_0 = _mm256_add_ps(s_0, _mm256_or_ps(v_0, mask_BLP));
                q_1 = _mm256_add_ps(s_1, _mm256_or_ps(v_1, mask_BLP));
                s_buffer[(j * 2)] = q_0;
                s_buffer[((j * 2) + 1)] = q_1;
                q_0 = _mm256_sub_ps(s_0, q_0);
                q_1 = _mm256_sub_ps(s_1, q_1);
                v_0 = _mm256_add_ps(v_0, q_0);
                v_1 = _mm256_add_ps(v_1, q_1);
              }
              s_buffer[(j * 2)] = _mm256_add_ps(s_buffer[(j * 2)], _mm256_or_ps(v_0, mask_BLP));
              s_buffer[((j * 2) + 1)] = _mm256_add_ps(s_buffer[((j * 2) + 1)], _mm256_or_ps(v_1, mask_BLP));
            }
          }else{

            for(i = 0; i + 4 <= n; i += 4, v_base += (incv * 8), y_base += (incy * 8)){
              v_0 = _mm256_set_ps(v_base[((incv * 6) + 1)], v_base[(incv * 6)], v_base[((incv * 4) + 1)], v_base[(incv * 4)], v_base[((incv * 2) + 1)], v_base[(incv * 2)], v_base[1], v_base[0]);
              y_0 = _mm256_set_ps(y_base[((incy * 6) + 1)], y_base[(incy * 6)], y_base[((incy * 4) + 1)], y_base[(incy * 4)], y_base[((incy * 2) + 1)], y_base[(incy * 2)], y_base[1], y_base[0]);
              v_1 = _mm256_xor_ps(_mm256_mul_ps(_mm256_permute_ps(v_0, 0b10110001), _mm256_permute_ps(y_0, 0b11110101)), mask_CONJ);
              v_0 = _mm256_mul_ps(v_0, _mm256_permute_ps(y_0, 0b10100000));
              for(j = 0; j < fold - 1; j++){
                s_0 = s_buffer[(j * 2)];
                s_1 = s_buffer[((j * 2) + 1)];
                q_0 = _mm256_add_ps(s_0, _mm256_or_ps(v_0, mask_BLP));
                q_1 = _mm256_add_ps(s_1, _mm256_or_ps(v_1, mask_BLP));
                s_buffer[(j * 2)] = q_0;
                s_buffer[((j * 2) + 1)] = q_1;
                q_0 = _mm256_sub_ps(s_0, q_0);
                q_1 = _mm256_sub_ps(s_1, q_1);
                v_0 = _mm256_add_ps(v_0, q_0);
                v_1 = _mm256_add_ps(v_1, q_1);
              }
              s_buffer[(j * 2)] = _mm256_add_ps(s_buffer[(j * 2)], _mm256_or_ps(v_0, mask_BLP));
              s_buffer[((j * 2) + 1)] = _mm256_add_ps(s_buffer[((j * 2) + 1)], _mm256_or_ps(v_1, mask_BLP));
            }
            if(i < n){
              v_0 = (__m256)_mm256_set_pd(0, (n - i)>2?((double*)v_base)[(incv * 2)]:0, (n - i)>1?((double*)v_base)[incv]:0, ((double*)v_base)[0]);
              y_0 = (__m256)_mm256_set_pd(0, (n - i)>2?((double*)y_base)[(incy * 2)]:0, (n - i)>1?((double*)y_base)[incy]:0, ((double*)y_base)[0]);
              v_1 = _mm256_xor_ps(_mm256_mul_ps(_mm256_permute_ps(v_0, 0b10110001), _mm256_permute_ps(y_0, 0b11110101)), mask_CONJ);
              v_0 = _mm256_mul_ps(v_0, _mm256_permute_ps(y_0, 0b10100000));
              for(j = 0; j < fold - 1; j++){
                s_0 = s_buffer[(j * 2)];
                s_1 = s_buffer[((j * 2) + 1)];
                q_0 = _mm256_add_ps(s_0, _mm256_or_ps(v_0, mask_BLP));
                q_1 = _mm256_add_ps(s_1, _mm256_or_ps(v_1, mask_BLP));
                s_buffer[(j * 2)] = q_0;
                s_buffer[((j * 2) + 1)] = q_1;
                q_0 = _mm256_sub_ps(s_0, q_0);
                q_1 = _mm256_sub_ps(s_1, q_1);
                v_0 = _mm256_add_ps(v_0, q_0);
                v_1 = _mm256_add_ps(v_1, q_1);
              }
              s_buffer[(j * 2)] = _mm256_add_ps(s_buffer[(j * 2)], _mm256_or_ps(v_0, mask_BLP));
              s_buffer[((j * 2) + 1)] = _mm256_add_ps(s_buffer[((j * 2) + 1)], _mm256_or_ps(v_1, mask_BLP));
            }
          }
        }
        for(j = 0; j < fold; j += 1){
          s_buffer[(j * 2)] = _mm256_sub_ps(s_buffer[(j * 2)], _mm256_set_ps(sum_base[((j * 2) + 1)], sum_base[(j * 2)], sum_base[((j * 2) + 1)], sum_base[(j * 2)], sum_base[((j * 2) + 1)], sum_base[(j * 2)], 0, 0));
          q_0 = (__m256)_mm256_broadcast_sd((double *)(sum_base + (j * 2)));
          s_buffer[(j * 2)] = _mm256_add_ps(s_buffer[(j * 2)], _mm256_sub_ps(s_buffer[((j * 2) + 1)], q_0));
          _mm256_store_ps((float*)tmp_cons, s_buffer[(j * 2)]);
          sum[j] = tmp_cons[0] + tmp_cons[1] + tmp_cons[2] + tmp_cons[3];
        }
        RESET_DAZ_FLAG
        return;
      }
    }
  #elif defined(__SSE2__)
    __m128 mask_CONJ; SSE_CONJ_MASKS(mask_CONJ);
    __m128 mask_BLP; SSE_BLP_MASKS(mask_BLP);
    float complex tmp_cons[2] __attribute__((aligned(16)));
    SET_DAZ_FLAG;
    switch(fold){
      case 3:{
        int i;

        float* sum_base = (float*) sum;
        float* v_base = (float*) v;
        float* y_base = (float*) y;
        __m128 v_0, v_1, v_2, v_3;
        __m128 y_0, y_1;
        __m128 q_0, q_1;
        __m128 s_0_0, s_0_1;
        __m128 s_1_0, s_1_1;
        __m128 s_2_0, s_2_1;

        s_0_0 = s_0_1 = (__m128)_mm_load1_pd((double *)(sum_base));
        s_1_0 = s_1_1 = (__m128)_mm_load1_pd((double *)(sum_base + 2));
        s_2_0 = s_2_1 = (__m128)_mm_load1_pd((double *)(sum_base + 4));
        if(incv == 1){
          if(incy == 1){

            for(i = 0; i + 4 <= n; i += 4, v_base += 8, y_base += 8){
              v_0 = _mm_loadu_ps(v_base);
              v_1 = _mm_loadu_ps(v_base + 4);
              y_0 = _mm_loadu_ps(y_base);
              y_1 = _mm_loadu_ps(y_base + 4);
              v_2 = _mm_xor_ps(_mm_mul_ps(_mm_shuffle_ps(v_0, v_0, 0b10110001), _mm_shuffle_ps(y_0, y_0, 0b11110101)), mask_CONJ);
              v_3 = _mm_xor_ps(_mm_mul_ps(_mm_shuffle_ps(v_1, v_1, 0b10110001), _mm_shuffle_ps(y_1, y_1, 0b11110101)), mask_CONJ);
              v_0 = _mm_mul_ps(v_0, _mm_shuffle_ps(y_0, y_0, 0b10100000));
              v_1 = _mm_mul_ps(v_1, _mm_shuffle_ps(y_1, y_1, 0b10100000));
              q_0 = s_0_0;
              q_1 = s_0_1;
              s_0_0 = _mm_add_ps(s_0_0, _mm_or_ps(v_0, mask_BLP));
              s_0_1 = _mm_add_ps(s_0_1, _mm_or_ps(v_1, mask_BLP));
              q_0 = _mm_sub_ps(q_0, s_0_0);
              q_1 = _mm_sub_ps(q_1, s_0_1);
              v_0 = _mm_add_ps(v_0, q_0);
              v_1 = _mm_add_ps(v_1, q_1);
              q_0 = s_1_0;
              q_1 = s_1_1;
              s_1_0 = _mm_add_ps(s_1_0, _mm_or_ps(v_0, mask_BLP));
              s_1_1 = _mm_add_ps(s_1_1, _mm_or_ps(v_1, mask_BLP));
              q_0 = _mm_sub_ps(q_0, s_1_0);
              q_1 = _mm_sub_ps(q_1, s_1_1);
              v_0 = _mm_add_ps(v_0, q_0);
              v_1 = _mm_add_ps(v_1, q_1);
              s_2_0 = _mm_add_ps(s_2_0, _mm_or_ps(v_0, mask_BLP));
              s_2_1 = _mm_add_ps(s_2_1, _mm_or_ps(v_1, mask_BLP));
              q_0 = s_0_0;
              q_1 = s_0_1;
              s_0_0 = _mm_add_ps(s_0_0, _mm_or_ps(v_2, mask_BLP));
              s_0_1 = _mm_add_ps(s_0_1, _mm_or_ps(v_3, mask_BLP));
              q_0 = _mm_sub_ps(q_0, s_0_0);
              q_1 = _mm_sub_ps(q_1, s_0_1);
              v_2 = _mm_add_ps(v_2, q_0);
              v_3 = _mm_add_ps(v_3, q_1);
              q_0 = s_1_0;
              q_1 = s_1_1;
              s_1_0 = _mm_add_ps(s_1_0, _mm_or_ps(v_2, mask_BLP));
              s_1_1 = _mm_add_ps(s_1_1, _mm_or_ps(v_3, mask_BLP));
              q_0 = _mm_sub_ps(q_0, s_1_0);
              q_1 = _mm_sub_ps(q_1, s_1_1);
              v_2 = _mm_add_ps(v_2, q_0);
              v_3 = _mm_add_ps(v_3, q_1);
              s_2_0 = _mm_add_ps(s_2_0, _mm_or_ps(v_2, mask_BLP));
              s_2_1 = _mm_add_ps(s_2_1, _mm_or_ps(v_3, mask_BLP));
            }
            if(i + 2 <= n){
              v_0 = _mm_loadu_ps(v_base);
              y_0 = _mm_loadu_ps(y_base);
              v_1 = _mm_xor_ps(_mm_mul_ps(_mm_shuffle_ps(v_0, v_0, 0b10110001), _mm_shuffle_ps(y_0, y_0, 0b11110101)), mask_CONJ);
              v_0 = _mm_mul_ps(v_0, _mm_shuffle_ps(y_0, y_0, 0b10100000));
              q_0 = s_0_0;
              q_1 = s_0_1;
              s_0_0 = _mm_add_ps(s_0_0, _mm_or_ps(v_0, mask_BLP));
              s_0_1 = _mm_add_ps(s_0_1, _mm_or_ps(v_1, mask_BLP));
              q_0 = _mm_sub_ps(q_0, s_0_0);
              q_1 = _mm_sub_ps(q_1, s_0_1);
              v_0 = _mm_add_ps(v_0, q_0);
              v_1 = _mm_add_ps(v_1, q_1);
              q_0 = s_1_0;
              q_1 = s_1_1;
              s_1_0 = _mm_add_ps(s_1_0, _mm_or_ps(v_0, mask_BLP));
              s_1_1 = _mm_add_ps(s_1_1, _mm_or_ps(v_1, mask_BLP));
              q_0 = _mm_sub_ps(q_0, s_1_0);
              q_1 = _mm_sub_ps(q_1, s_1_1);
              v_0 = _mm_add_ps(v_0, q_0);
              v_1 = _mm_add_ps(v_1, q_1);
              s_2_0 = _mm_add_ps(s_2_0, _mm_or_ps(v_0, mask_BLP));
              s_2_1 = _mm_add_ps(s_2_1, _mm_or_ps(v_1, mask_BLP));
              i += 2, v_base += 4, y_base += 4;
            }
            if(i < n){
              v_0 = _mm_set_ps(0, 0, v_base[1], v_base[0]);
              y_0 = _mm_set_ps(0, 0, y_base[1], y_base[0]);
              v_1 = _mm_xor_ps(_mm_mul_ps(_mm_shuffle_ps(v_0, v_0, 0b10110001), _mm_shuffle_ps(y_0, y_0, 0b11110101)), mask_CONJ);
              v_0 = _mm_mul_ps(v_0, _mm_shuffle_ps(y_0, y_0, 0b10100000));
              q_0 = s_0_0;
              q_1 = s_0_1;
              s_0_0 = _mm_add_ps(s_0_0, _mm_or_ps(v_0, mask_BLP));
              s_0_1 = _mm_add_ps(s_0_1, _mm_or_ps(v_1, mask_BLP));
              q_0 = _mm_sub_ps(q_0, s_0_0);
              q_1 = _mm_sub_ps(q_1, s_0_1);
              v_0 = _mm_add_ps(v_0, q_0);
              v_1 = _mm_add_ps(v_1, q_1);
              q_0 = s_1_0;
              q_1 = s_1_1;
              s_1_0 = _mm_add_ps(s_1_0, _mm_or_ps(v_0, mask_BLP));
              s_1_1 = _mm_add_ps(s_1_1, _mm_or_ps(v_1, mask_BLP));
              q_0 = _mm_sub_ps(q_0, s_1_0);
              q_1 = _mm_sub_ps(q_1, s_1_1);
              v_0 = _mm_add_ps(v_0, q_0);
              v_1 = _mm_add_ps(v_1, q_1);
              s_2_0 = _mm_add_ps(s_2_0, _mm_or_ps(v_0, mask_BLP));
              s_2_1 = _mm_add_ps(s_2_1, _mm_or_ps(v_1, mask_BLP));
            }
          }else{

            for(i = 0; i + 4 <= n; i += 4, v_base += 8, y_base += (incy * 8)){
              v_0 = _mm_loadu_ps(v_base);
              v_1 = _mm_loadu_ps(v_base + 4);
              y_0 = _mm_set_ps(y_base[((incy * 2) + 1)], y_base[(incy * 2)], y_base[1], y_base[0]);
              y_1 = _mm_set_ps(y_base[((incy * 6) + 1)], y_base[(incy * 6)], y_base[((incy * 4) + 1)], y_base[(incy * 4)]);
              v_2 = _mm_xor_ps(_mm_mul_ps(_mm_shuffle_ps(v_0, v_0, 0b10110001), _mm_shuffle_ps(y_0, y_0, 0b11110101)), mask_CONJ);
              v_3 = _mm_xor_ps(_mm_mul_ps(_mm_shuffle_ps(v_1, v_1, 0b10110001), _mm_shuffle_ps(y_1, y_1, 0b11110101)), mask_CONJ);
              v_0 = _mm_mul_ps(v_0, _mm_shuffle_ps(y_0, y_0, 0b10100000));
              v_1 = _mm_mul_ps(v_1, _mm_shuffle_ps(y_1, y_1, 0b10100000));
              q_0 = s_0_0;
              q_1 = s_0_1;
              s_0_0 = _mm_add_ps(s_0_0, _mm_or_ps(v_0, mask_BLP));
              s_0_1 = _mm_add_ps(s_0_1, _mm_or_ps(v_1, mask_BLP));
              q_0 = _mm_sub_ps(q_0, s_0_0);
              q_1 = _mm_sub_ps(q_1, s_0_1);
              v_0 = _mm_add_ps(v_0, q_0);
              v_1 = _mm_add_ps(v_1, q_1);
              q_0 = s_1_0;
              q_1 = s_1_1;
              s_1_0 = _mm_add_ps(s_1_0, _mm_or_ps(v_0, mask_BLP));
              s_1_1 = _mm_add_ps(s_1_1, _mm_or_ps(v_1, mask_BLP));
              q_0 = _mm_sub_ps(q_0, s_1_0);
              q_1 = _mm_sub_ps(q_1, s_1_1);
              v_0 = _mm_add_ps(v_0, q_0);
              v_1 = _mm_add_ps(v_1, q_1);
              s_2_0 = _mm_add_ps(s_2_0, _mm_or_ps(v_0, mask_BLP));
              s_2_1 = _mm_add_ps(s_2_1, _mm_or_ps(v_1, mask_BLP));
              q_0 = s_0_0;
              q_1 = s_0_1;
              s_0_0 = _mm_add_ps(s_0_0, _mm_or_ps(v_2, mask_BLP));
              s_0_1 = _mm_add_ps(s_0_1, _mm_or_ps(v_3, mask_BLP));
              q_0 = _mm_sub_ps(q_0, s_0_0);
              q_1 = _mm_sub_ps(q_1, s_0_1);
              v_2 = _mm_add_ps(v_2, q_0);
              v_3 = _mm_add_ps(v_3, q_1);
              q_0 = s_1_0;
              q_1 = s_1_1;
              s_1_0 = _mm_add_ps(s_1_0, _mm_or_ps(v_2, mask_BLP));
              s_1_1 = _mm_add_ps(s_1_1, _mm_or_ps(v_3, mask_BLP));
              q_0 = _mm_sub_ps(q_0, s_1_0);
              q_1 = _mm_sub_ps(q_1, s_1_1);
              v_2 = _mm_add_ps(v_2, q_0);
              v_3 = _mm_add_ps(v_3, q_1);
              s_2_0 = _mm_add_ps(s_2_0, _mm_or_ps(v_2, mask_BLP));
              s_2_1 = _mm_add_ps(s_2_1, _mm_or_ps(v_3, mask_BLP));
            }
            if(i + 2 <= n){
              v_0 = _mm_loadu_ps(v_base);
              y_0 = _mm_set_ps(y_base[((incy * 2) + 1)], y_base[(incy * 2)], y_base[1], y_base[0]);
              v_1 = _mm_xor_ps(_mm_mul_ps(_mm_shuffle_ps(v_0, v_0, 0b10110001), _mm_shuffle_ps(y_0, y_0, 0b11110101)), mask_CONJ);
              v_0 = _mm_mul_ps(v_0, _mm_shuffle_ps(y_0, y_0, 0b10100000));
              q_0 = s_0_0;
              q_1 = s_0_1;
              s_0_0 = _mm_add_ps(s_0_0, _mm_or_ps(v_0, mask_BLP));
              s_0_1 = _mm_add_ps(s_0_1, _mm_or_ps(v_1, mask_BLP));
              q_0 = _mm_sub_ps(q_0, s_0_0);
              q_1 = _mm_sub_ps(q_1, s_0_1);
              v_0 = _mm_add_ps(v_0, q_0);
              v_1 = _mm_add_ps(v_1, q_1);
              q_0 = s_1_0;
              q_1 = s_1_1;
              s_1_0 = _mm_add_ps(s_1_0, _mm_or_ps(v_0, mask_BLP));
              s_1_1 = _mm_add_ps(s_1_1, _mm_or_ps(v_1, mask_BLP));
              q_0 = _mm_sub_ps(q_0, s_1_0);
              q_1 = _mm_sub_ps(q_1, s_1_1);
              v_0 = _mm_add_ps(v_0, q_0);
              v_1 = _mm_add_ps(v_1, q_1);
              s_2_0 = _mm_add_ps(s_2_0, _mm_or_ps(v_0, mask_BLP));
              s_2_1 = _mm_add_ps(s_2_1, _mm_or_ps(v_1, mask_BLP));
              i += 2, v_base += 4, y_base += (incy * 4);
            }
            if(i < n){
              v_0 = _mm_set_ps(0, 0, v_base[1], v_base[0]);
              y_0 = _mm_set_ps(0, 0, y_base[1], y_base[0]);
              v_1 = _mm_xor_ps(_mm_mul_ps(_mm_shuffle_ps(v_0, v_0, 0b10110001), _mm_shuffle_ps(y_0, y_0, 0b11110101)), mask_CONJ);
              v_0 = _mm_mul_ps(v_0, _mm_shuffle_ps(y_0, y_0, 0b10100000));
              q_0 = s_0_0;
              q_1 = s_0_1;
              s_0_0 = _mm_add_ps(s_0_0, _mm_or_ps(v_0, mask_BLP));
              s_0_1 = _mm_add_ps(s_0_1, _mm_or_ps(v_1, mask_BLP));
              q_0 = _mm_sub_ps(q_0, s_0_0);
              q_1 = _mm_sub_ps(q_1, s_0_1);
              v_0 = _mm_add_ps(v_0, q_0);
              v_1 = _mm_add_ps(v_1, q_1);
              q_0 = s_1_0;
              q_1 = s_1_1;
              s_1_0 = _mm_add_ps(s_1_0, _mm_or_ps(v_0, mask_BLP));
              s_1_1 = _mm_add_ps(s_1_1, _mm_or_ps(v_1, mask_BLP));
              q_0 = _mm_sub_ps(q_0, s_1_0);
              q_1 = _mm_sub_ps(q_1, s_1_1);
              v_0 = _mm_add_ps(v_0, q_0);
              v_1 = _mm_add_ps(v_1, q_1);
              s_2_0 = _mm_add_ps(s_2_0, _mm_or_ps(v_0, mask_BLP));
              s_2_1 = _mm_add_ps(s_2_1, _mm_or_ps(v_1, mask_BLP));
            }
          }
        }else{
          if(incy == 1){

            for(i = 0; i + 4 <= n; i += 4, v_base += (incv * 8), y_base += 8){
              v_0 = _mm_set_ps(v_base[((incv * 2) + 1)], v_base[(incv * 2)], v_base[1], v_base[0]);
              v_1 = _mm_set_ps(v_base[((incv * 6) + 1)], v_base[(incv * 6)], v_base[((incv * 4) + 1)], v_base[(incv * 4)]);
              y_0 = _mm_loadu_ps(y_base);
              y_1 = _mm_loadu_ps(y_base + 4);
              v_2 = _mm_xor_ps(_mm_mul_ps(_mm_shuffle_ps(v_0, v_0, 0b10110001), _mm_shuffle_ps(y_0, y_0, 0b11110101)), mask_CONJ);
              v_3 = _mm_xor_ps(_mm_mul_ps(_mm_shuffle_ps(v_1, v_1, 0b10110001), _mm_shuffle_ps(y_1, y_1, 0b11110101)), mask_CONJ);
              v_0 = _mm_mul_ps(v_0, _mm_shuffle_ps(y_0, y_0, 0b10100000));
              v_1 = _mm_mul_ps(v_1, _mm_shuffle_ps(y_1, y_1, 0b10100000));
              q_0 = s_0_0;
              q_1 = s_0_1;
              s_0_0 = _mm_add_ps(s_0_0, _mm_or_ps(v_0, mask_BLP));
              s_0_1 = _mm_add_ps(s_0_1, _mm_or_ps(v_1, mask_BLP));
              q_0 = _mm_sub_ps(q_0, s_0_0);
              q_1 = _mm_sub_ps(q_1, s_0_1);
              v_0 = _mm_add_ps(v_0, q_0);
              v_1 = _mm_add_ps(v_1, q_1);
              q_0 = s_1_0;
              q_1 = s_1_1;
              s_1_0 = _mm_add_ps(s_1_0, _mm_or_ps(v_0, mask_BLP));
              s_1_1 = _mm_add_ps(s_1_1, _mm_or_ps(v_1, mask_BLP));
              q_0 = _mm_sub_ps(q_0, s_1_0);
              q_1 = _mm_sub_ps(q_1, s_1_1);
              v_0 = _mm_add_ps(v_0, q_0);
              v_1 = _mm_add_ps(v_1, q_1);
              s_2_0 = _mm_add_ps(s_2_0, _mm_or_ps(v_0, mask_BLP));
              s_2_1 = _mm_add_ps(s_2_1, _mm_or_ps(v_1, mask_BLP));
              q_0 = s_0_0;
              q_1 = s_0_1;
              s_0_0 = _mm_add_ps(s_0_0, _mm_or_ps(v_2, mask_BLP));
              s_0_1 = _mm_add_ps(s_0_1, _mm_or_ps(v_3, mask_BLP));
              q_0 = _mm_sub_ps(q_0, s_0_0);
              q_1 = _mm_sub_ps(q_1, s_0_1);
              v_2 = _mm_add_ps(v_2, q_0);
              v_3 = _mm_add_ps(v_3, q_1);
              q_0 = s_1_0;
              q_1 = s_1_1;
              s_1_0 = _mm_add_ps(s_1_0, _mm_or_ps(v_2, mask_BLP));
              s_1_1 = _mm_add_ps(s_1_1, _mm_or_ps(v_3, mask_BLP));
              q_0 = _mm_sub_ps(q_0, s_1_0);
              q_1 = _mm_sub_ps(q_1, s_1_1);
              v_2 = _mm_add_ps(v_2, q_0);
              v_3 = _mm_add_ps(v_3, q_1);
              s_2_0 = _mm_add_ps(s_2_0, _mm_or_ps(v_2, mask_BLP));
              s_2_1 = _mm_add_ps(s_2_1, _mm_or_ps(v_3, mask_BLP));
            }
            if(i + 2 <= n){
              v_0 = _mm_set_ps(v_base[((incv * 2) + 1)], v_base[(incv * 2)], v_base[1], v_base[0]);
              y_0 = _mm_loadu_ps(y_base);
              v_1 = _mm_xor_ps(_mm_mul_ps(_mm_shuffle_ps(v_0, v_0, 0b10110001), _mm_shuffle_ps(y_0, y_0, 0b11110101)), mask_CONJ);
              v_0 = _mm_mul_ps(v_0, _mm_shuffle_ps(y_0, y_0, 0b10100000));
              q_0 = s_0_0;
              q_1 = s_0_1;
              s_0_0 = _mm_add_ps(s_0_0, _mm_or_ps(v_0, mask_BLP));
              s_0_1 = _mm_add_ps(s_0_1, _mm_or_ps(v_1, mask_BLP));
              q_0 = _mm_sub_ps(q_0, s_0_0);
              q_1 = _mm_sub_ps(q_1, s_0_1);
              v_0 = _mm_add_ps(v_0, q_0);
              v_1 = _mm_add_ps(v_1, q_1);
              q_0 = s_1_0;
              q_1 = s_1_1;
              s_1_0 = _mm_add_ps(s_1_0, _mm_or_ps(v_0, mask_BLP));
              s_1_1 = _mm_add_ps(s_1_1, _mm_or_ps(v_1, mask_BLP));
              q_0 = _mm_sub_ps(q_0, s_1_0);
              q_1 = _mm_sub_ps(q_1, s_1_1);
              v_0 = _mm_add_ps(v_0, q_0);
              v_1 = _mm_add_ps(v_1, q_1);
              s_2_0 = _mm_add_ps(s_2_0, _mm_or_ps(v_0, mask_BLP));
              s_2_1 = _mm_add_ps(s_2_1, _mm_or_ps(v_1, mask_BLP));
              i += 2, v_base += (incv * 4), y_base += 4;
            }
            if(i < n){
              v_0 = _mm_set_ps(0, 0, v_base[1], v_base[0]);
              y_0 = _mm_set_ps(0, 0, y_base[1], y_base[0]);
              v_1 = _mm_xor_ps(_mm_mul_ps(_mm_shuffle_ps(v_0, v_0, 0b10110001), _mm_shuffle_ps(y_0, y_0, 0b11110101)), mask_CONJ);
              v_0 = _mm_mul_ps(v_0, _mm_shuffle_ps(y_0, y_0, 0b10100000));
              q_0 = s_0_0;
              q_1 = s_0_1;
              s_0_0 = _mm_add_ps(s_0_0, _mm_or_ps(v_0, mask_BLP));
              s_0_1 = _mm_add_ps(s_0_1, _mm_or_ps(v_1, mask_BLP));
              q_0 = _mm_sub_ps(q_0, s_0_0);
              q_1 = _mm_sub_ps(q_1, s_0_1);
              v_0 = _mm_add_ps(v_0, q_0);
              v_1 = _mm_add_ps(v_1, q_1);
              q_0 = s_1_0;
              q_1 = s_1_1;
              s_1_0 = _mm_add_ps(s_1_0, _mm_or_ps(v_0, mask_BLP));
              s_1_1 = _mm_add_ps(s_1_1, _mm_or_ps(v_1, mask_BLP));
              q_0 = _mm_sub_ps(q_0, s_1_0);
              q_1 = _mm_sub_ps(q_1, s_1_1);
              v_0 = _mm_add_ps(v_0, q_0);
              v_1 = _mm_add_ps(v_1, q_1);
              s_2_0 = _mm_add_ps(s_2_0, _mm_or_ps(v_0, mask_BLP));
              s_2_1 = _mm_add_ps(s_2_1, _mm_or_ps(v_1, mask_BLP));
            }
          }else{

            for(i = 0; i + 4 <= n; i += 4, v_base += (incv * 8), y_base += (incy * 8)){
              v_0 = _mm_set_ps(v_base[((incv * 2) + 1)], v_base[(incv * 2)], v_base[1], v_base[0]);
              v_1 = _mm_set_ps(v_base[((incv * 6) + 1)], v_base[(incv * 6)], v_base[((incv * 4) + 1)], v_base[(incv * 4)]);
              y_0 = _mm_set_ps(y_base[((incy * 2) + 1)], y_base[(incy * 2)], y_base[1], y_base[0]);
              y_1 = _mm_set_ps(y_base[((incy * 6) + 1)], y_base[(incy * 6)], y_base[((incy * 4) + 1)], y_base[(incy * 4)]);
              v_2 = _mm_xor_ps(_mm_mul_ps(_mm_shuffle_ps(v_0, v_0, 0b10110001), _mm_shuffle_ps(y_0, y_0, 0b11110101)), mask_CONJ);
              v_3 = _mm_xor_ps(_mm_mul_ps(_mm_shuffle_ps(v_1, v_1, 0b10110001), _mm_shuffle_ps(y_1, y_1, 0b11110101)), mask_CONJ);
              v_0 = _mm_mul_ps(v_0, _mm_shuffle_ps(y_0, y_0, 0b10100000));
              v_1 = _mm_mul_ps(v_1, _mm_shuffle_ps(y_1, y_1, 0b10100000));
              q_0 = s_0_0;
              q_1 = s_0_1;
              s_0_0 = _mm_add_ps(s_0_0, _mm_or_ps(v_0, mask_BLP));
              s_0_1 = _mm_add_ps(s_0_1, _mm_or_ps(v_1, mask_BLP));
              q_0 = _mm_sub_ps(q_0, s_0_0);
              q_1 = _mm_sub_ps(q_1, s_0_1);
              v_0 = _mm_add_ps(v_0, q_0);
              v_1 = _mm_add_ps(v_1, q_1);
              q_0 = s_1_0;
              q_1 = s_1_1;
              s_1_0 = _mm_add_ps(s_1_0, _mm_or_ps(v_0, mask_BLP));
              s_1_1 = _mm_add_ps(s_1_1, _mm_or_ps(v_1, mask_BLP));
              q_0 = _mm_sub_ps(q_0, s_1_0);
              q_1 = _mm_sub_ps(q_1, s_1_1);
              v_0 = _mm_add_ps(v_0, q_0);
              v_1 = _mm_add_ps(v_1, q_1);
              s_2_0 = _mm_add_ps(s_2_0, _mm_or_ps(v_0, mask_BLP));
              s_2_1 = _mm_add_ps(s_2_1, _mm_or_ps(v_1, mask_BLP));
              q_0 = s_0_0;
              q_1 = s_0_1;
              s_0_0 = _mm_add_ps(s_0_0, _mm_or_ps(v_2, mask_BLP));
              s_0_1 = _mm_add_ps(s_0_1, _mm_or_ps(v_3, mask_BLP));
              q_0 = _mm_sub_ps(q_0, s_0_0);
              q_1 = _mm_sub_ps(q_1, s_0_1);
              v_2 = _mm_add_ps(v_2, q_0);
              v_3 = _mm_add_ps(v_3, q_1);
              q_0 = s_1_0;
              q_1 = s_1_1;
              s_1_0 = _mm_add_ps(s_1_0, _mm_or_ps(v_2, mask_BLP));
              s_1_1 = _mm_add_ps(s_1_1, _mm_or_ps(v_3, mask_BLP));
              q_0 = _mm_sub_ps(q_0, s_1_0);
              q_1 = _mm_sub_ps(q_1, s_1_1);
              v_2 = _mm_add_ps(v_2, q_0);
              v_3 = _mm_add_ps(v_3, q_1);
              s_2_0 = _mm_add_ps(s_2_0, _mm_or_ps(v_2, mask_BLP));
              s_2_1 = _mm_add_ps(s_2_1, _mm_or_ps(v_3, mask_BLP));
            }
            if(i + 2 <= n){
              v_0 = _mm_set_ps(v_base[((incv * 2) + 1)], v_base[(incv * 2)], v_base[1], v_base[0]);
              y_0 = _mm_set_ps(y_base[((incy * 2) + 1)], y_base[(incy * 2)], y_base[1], y_base[0]);
              v_1 = _mm_xor_ps(_mm_mul_ps(_mm_shuffle_ps(v_0, v_0, 0b10110001), _mm_shuffle_ps(y_0, y_0, 0b11110101)), mask_CONJ);
              v_0 = _mm_mul_ps(v_0, _mm_shuffle_ps(y_0, y_0, 0b10100000));
              q_0 = s_0_0;
              q_1 = s_0_1;
              s_0_0 = _mm_add_ps(s_0_0, _mm_or_ps(v_0, mask_BLP));
              s_0_1 = _mm_add_ps(s_0_1, _mm_or_ps(v_1, mask_BLP));
              q_0 = _mm_sub_ps(q_0, s_0_0);
              q_1 = _mm_sub_ps(q_1, s_0_1);
              v_0 = _mm_add_ps(v_0, q_0);
              v_1 = _mm_add_ps(v_1, q_1);
              q_0 = s_1_0;
              q_1 = s_1_1;
              s_1_0 = _mm_add_ps(s_1_0, _mm_or_ps(v_0, mask_BLP));
              s_1_1 = _mm_add_ps(s_1_1, _mm_or_ps(v_1, mask_BLP));
              q_0 = _mm_sub_ps(q_0, s_1_0);
              q_1 = _mm_sub_ps(q_1, s_1_1);
              v_0 = _mm_add_ps(v_0, q_0);
              v_1 = _mm_add_ps(v_1, q_1);
              s_2_0 = _mm_add_ps(s_2_0, _mm_or_ps(v_0, mask_BLP));
              s_2_1 = _mm_add_ps(s_2_1, _mm_or_ps(v_1, mask_BLP));
              i += 2, v_base += (incv * 4), y_base += (incy * 4);
            }
            if(i < n){
              v_0 = _mm_set_ps(0, 0, v_base[1], v_base[0]);
              y_0 = _mm_set_ps(0, 0, y_base[1], y_base[0]);
              v_1 = _mm_xor_ps(_mm_mul_ps(_mm_shuffle_ps(v_0, v_0, 0b10110001), _mm_shuffle_ps(y_0, y_0, 0b11110101)), mask_CONJ);
              v_0 = _mm_mul_ps(v_0, _mm_shuffle_ps(y_0, y_0, 0b10100000));
              q_0 = s_0_0;
              q_1 = s_0_1;
              s_0_0 = _mm_add_ps(s_0_0, _mm_or_ps(v_0, mask_BLP));
              s_0_1 = _mm_add_ps(s_0_1, _mm_or_ps(v_1, mask_BLP));
              q_0 = _mm_sub_ps(q_0, s_0_0);
              q_1 = _mm_sub_ps(q_1, s_0_1);
              v_0 = _mm_add_ps(v_0, q_0);
              v_1 = _mm_add_ps(v_1, q_1);
              q_0 = s_1_0;
              q_1 = s_1_1;
              s_1_0 = _mm_add_ps(s_1_0, _mm_or_ps(v_0, mask_BLP));
              s_1_1 = _mm_add_ps(s_1_1, _mm_or_ps(v_1, mask_BLP));
              q_0 = _mm_sub_ps(q_0, s_1_0);
              q_1 = _mm_sub_ps(q_1, s_1_1);
              v_0 = _mm_add_ps(v_0, q_0);
              v_1 = _mm_add_ps(v_1, q_1);
              s_2_0 = _mm_add_ps(s_2_0, _mm_or_ps(v_0, mask_BLP));
              s_2_1 = _mm_add_ps(s_2_1, _mm_or_ps(v_1, mask_BLP));
            }
          }
        }
        s_0_0 = _mm_sub_ps(s_0_0, _mm_set_ps(sum_base[1], sum_base[0], 0, 0));
        q_0 = (__m128)_mm_load1_pd((double *)(sum_base));
        s_0_0 = _mm_add_ps(s_0_0, _mm_sub_ps(s_0_1, q_0));
        _mm_store_ps((float*)tmp_cons, s_0_0);
        sum[0] = tmp_cons[0] + tmp_cons[1];
        s_1_0 = _mm_sub_ps(s_1_0, _mm_set_ps(sum_base[3], sum_base[2], 0, 0));
        q_0 = (__m128)_mm_load1_pd((double *)(sum_base + 2));
        s_1_0 = _mm_add_ps(s_1_0, _mm_sub_ps(s_1_1, q_0));
        _mm_store_ps((float*)tmp_cons, s_1_0);
        sum[1] = tmp_cons[0] + tmp_cons[1];
        s_2_0 = _mm_sub_ps(s_2_0, _mm_set_ps(sum_base[5], sum_base[4], 0, 0));
        q_0 = (__m128)_mm_load1_pd((double *)(sum_base + 4));
        s_2_0 = _mm_add_ps(s_2_0, _mm_sub_ps(s_2_1, q_0));
        _mm_store_ps((float*)tmp_cons, s_2_0);
        sum[2] = tmp_cons[0] + tmp_cons[1];
        RESET_DAZ_FLAG
        return;
      }
      default:{
        int i, j;

        float* sum_base = (float*) sum;
        float* v_base = (float*) v;
        float* y_base = (float*) y;
        __m128 v_0, v_1;
        __m128 y_0;
        __m128 q_0, q_1;
        __m128 s_0, s_1;
        __m128 s_buffer[(MAX_FOLD * 2)];

        for(j = 0; j < fold; j += 1){
          s_buffer[(j * 2)] = s_buffer[((j * 2) + 1)] = (__m128)_mm_load1_pd((double *)(sum_base + (j * 2)));
        }
        if(incv == 1){
          if(incy == 1){

            for(i = 0; i + 2 <= n; i += 2, v_base += 4, y_base += 4){
              v_0 = _mm_loadu_ps(v_base);
              y_0 = _mm_loadu_ps(y_base);
              v_1 = _mm_xor_ps(_mm_mul_ps(_mm_shuffle_ps(v_0, v_0, 0b10110001), _mm_shuffle_ps(y_0, y_0, 0b11110101)), mask_CONJ);
              v_0 = _mm_mul_ps(v_0, _mm_shuffle_ps(y_0, y_0, 0b10100000));
              for(j = 0; j < fold - 1; j++){
                s_0 = s_buffer[(j * 2)];
                s_1 = s_buffer[((j * 2) + 1)];
                q_0 = _mm_add_ps(s_0, _mm_or_ps(v_0, mask_BLP));
                q_1 = _mm_add_ps(s_1, _mm_or_ps(v_1, mask_BLP));
                s_buffer[(j * 2)] = q_0;
                s_buffer[((j * 2) + 1)] = q_1;
                q_0 = _mm_sub_ps(s_0, q_0);
                q_1 = _mm_sub_ps(s_1, q_1);
                v_0 = _mm_add_ps(v_0, q_0);
                v_1 = _mm_add_ps(v_1, q_1);
              }
              s_buffer[(j * 2)] = _mm_add_ps(s_buffer[(j * 2)], _mm_or_ps(v_0, mask_BLP));
              s_buffer[((j * 2) + 1)] = _mm_add_ps(s_buffer[((j * 2) + 1)], _mm_or_ps(v_1, mask_BLP));
            }
            if(i < n){
              v_0 = _mm_set_ps(0, 0, v_base[1], v_base[0]);
              y_0 = _mm_set_ps(0, 0, y_base[1], y_base[0]);
              v_1 = _mm_xor_ps(_mm_mul_ps(_mm_shuffle_ps(v_0, v_0, 0b10110001), _mm_shuffle_ps(y_0, y_0, 0b11110101)), mask_CONJ);
              v_0 = _mm_mul_ps(v_0, _mm_shuffle_ps(y_0, y_0, 0b10100000));
              for(j = 0; j < fold - 1; j++){
                s_0 = s_buffer[(j * 2)];
                s_1 = s_buffer[((j * 2) + 1)];
                q_0 = _mm_add_ps(s_0, _mm_or_ps(v_0, mask_BLP));
                q_1 = _mm_add_ps(s_1, _mm_or_ps(v_1, mask_BLP));
                s_buffer[(j * 2)] = q_0;
                s_buffer[((j * 2) + 1)] = q_1;
                q_0 = _mm_sub_ps(s_0, q_0);
                q_1 = _mm_sub_ps(s_1, q_1);
                v_0 = _mm_add_ps(v_0, q_0);
                v_1 = _mm_add_ps(v_1, q_1);
              }
              s_buffer[(j * 2)] = _mm_add_ps(s_buffer[(j * 2)], _mm_or_ps(v_0, mask_BLP));
              s_buffer[((j * 2) + 1)] = _mm_add_ps(s_buffer[((j * 2) + 1)], _mm_or_ps(v_1, mask_BLP));
            }
          }else{

            for(i = 0; i + 2 <= n; i += 2, v_base += 4, y_base += (incy * 4)){
              v_0 = _mm_loadu_ps(v_base);
              y_0 = _mm_set_ps(y_base[((incy * 2) + 1)], y_base[(incy * 2)], y_base[1], y_base[0]);
              v_1 = _mm_xor_ps(_mm_mul_ps(_mm_shuffle_ps(v_0, v_0, 0b10110001), _mm_shuffle_ps(y_0, y_0, 0b11110101)), mask_CONJ);
              v_0 = _mm_mul_ps(v_0, _mm_shuffle_ps(y_0, y_0, 0b10100000));
              for(j = 0; j < fold - 1; j++){
                s_0 = s_buffer[(j * 2)];
                s_1 = s_buffer[((j * 2) + 1)];
                q_0 = _mm_add_ps(s_0, _mm_or_ps(v_0, mask_BLP));
                q_1 = _mm_add_ps(s_1, _mm_or_ps(v_1, mask_BLP));
                s_buffer[(j * 2)] = q_0;
                s_buffer[((j * 2) + 1)] = q_1;
                q_0 = _mm_sub_ps(s_0, q_0);
                q_1 = _mm_sub_ps(s_1, q_1);
                v_0 = _mm_add_ps(v_0, q_0);
                v_1 = _mm_add_ps(v_1, q_1);
              }
              s_buffer[(j * 2)] = _mm_add_ps(s_buffer[(j * 2)], _mm_or_ps(v_0, mask_BLP));
              s_buffer[((j * 2) + 1)] = _mm_add_ps(s_buffer[((j * 2) + 1)], _mm_or_ps(v_1, mask_BLP));
            }
            if(i < n){
              v_0 = _mm_set_ps(0, 0, v_base[1], v_base[0]);
              y_0 = _mm_set_ps(0, 0, y_base[1], y_base[0]);
              v_1 = _mm_xor_ps(_mm_mul_ps(_mm_shuffle_ps(v_0, v_0, 0b10110001), _mm_shuffle_ps(y_0, y_0, 0b11110101)), mask_CONJ);
              v_0 = _mm_mul_ps(v_0, _mm_shuffle_ps(y_0, y_0, 0b10100000));
              for(j = 0; j < fold - 1; j++){
                s_0 = s_buffer[(j * 2)];
                s_1 = s_buffer[((j * 2) + 1)];
                q_0 = _mm_add_ps(s_0, _mm_or_ps(v_0, mask_BLP));
                q_1 = _mm_add_ps(s_1, _mm_or_ps(v_1, mask_BLP));
                s_buffer[(j * 2)] = q_0;
                s_buffer[((j * 2) + 1)] = q_1;
                q_0 = _mm_sub_ps(s_0, q_0);
                q_1 = _mm_sub_ps(s_1, q_1);
                v_0 = _mm_add_ps(v_0, q_0);
                v_1 = _mm_add_ps(v_1, q_1);
              }
              s_buffer[(j * 2)] = _mm_add_ps(s_buffer[(j * 2)], _mm_or_ps(v_0, mask_BLP));
              s_buffer[((j * 2) + 1)] = _mm_add_ps(s_buffer[((j * 2) + 1)], _mm_or_ps(v_1, mask_BLP));
            }
          }
        }else{
          if(incy == 1){

            for(i = 0; i + 2 <= n; i += 2, v_base += (incv * 4), y_base += 4){
              v_0 = _mm_set_ps(v_base[((incv * 2) + 1)], v_base[(incv * 2)], v_base[1], v_base[0]);
              y_0 = _mm_loadu_ps(y_base);
              v_1 = _mm_xor_ps(_mm_mul_ps(_mm_shuffle_ps(v_0, v_0, 0b10110001), _mm_shuffle_ps(y_0, y_0, 0b11110101)), mask_CONJ);
              v_0 = _mm_mul_ps(v_0, _mm_shuffle_ps(y_0, y_0, 0b10100000));
              for(j = 0; j < fold - 1; j++){
                s_0 = s_buffer[(j * 2)];
                s_1 = s_buffer[((j * 2) + 1)];
                q_0 = _mm_add_ps(s_0, _mm_or_ps(v_0, mask_BLP));
                q_1 = _mm_add_ps(s_1, _mm_or_ps(v_1, mask_BLP));
                s_buffer[(j * 2)] = q_0;
                s_buffer[((j * 2) + 1)] = q_1;
                q_0 = _mm_sub_ps(s_0, q_0);
                q_1 = _mm_sub_ps(s_1, q_1);
                v_0 = _mm_add_ps(v_0, q_0);
                v_1 = _mm_add_ps(v_1, q_1);
              }
              s_buffer[(j * 2)] = _mm_add_ps(s_buffer[(j * 2)], _mm_or_ps(v_0, mask_BLP));
              s_buffer[((j * 2) + 1)] = _mm_add_ps(s_buffer[((j * 2) + 1)], _mm_or_ps(v_1, mask_BLP));
            }
            if(i < n){
              v_0 = _mm_set_ps(0, 0, v_base[1], v_base[0]);
              y_0 = _mm_set_ps(0, 0, y_base[1], y_base[0]);
              v_1 = _mm_xor_ps(_mm_mul_ps(_mm_shuffle_ps(v_0, v_0, 0b10110001), _mm_shuffle_ps(y_0, y_0, 0b11110101)), mask_CONJ);
              v_0 = _mm_mul_ps(v_0, _mm_shuffle_ps(y_0, y_0, 0b10100000));
              for(j = 0; j < fold - 1; j++){
                s_0 = s_buffer[(j * 2)];
                s_1 = s_buffer[((j * 2) + 1)];
                q_0 = _mm_add_ps(s_0, _mm_or_ps(v_0, mask_BLP));
                q_1 = _mm_add_ps(s_1, _mm_or_ps(v_1, mask_BLP));
                s_buffer[(j * 2)] = q_0;
                s_buffer[((j * 2) + 1)] = q_1;
                q_0 = _mm_sub_ps(s_0, q_0);
                q_1 = _mm_sub_ps(s_1, q_1);
                v_0 = _mm_add_ps(v_0, q_0);
                v_1 = _mm_add_ps(v_1, q_1);
              }
              s_buffer[(j * 2)] = _mm_add_ps(s_buffer[(j * 2)], _mm_or_ps(v_0, mask_BLP));
              s_buffer[((j * 2) + 1)] = _mm_add_ps(s_buffer[((j * 2) + 1)], _mm_or_ps(v_1, mask_BLP));
            }
          }else{

            for(i = 0; i + 2 <= n; i += 2, v_base += (incv * 4), y_base += (incy * 4)){
              v_0 = _mm_set_ps(v_base[((incv * 2) + 1)], v_base[(incv * 2)], v_base[1], v_base[0]);
              y_0 = _mm_set_ps(y_base[((incy * 2) + 1)], y_base[(incy * 2)], y_base[1], y_base[0]);
              v_1 = _mm_xor_ps(_mm_mul_ps(_mm_shuffle_ps(v_0, v_0, 0b10110001), _mm_shuffle_ps(y_0, y_0, 0b11110101)), mask_CONJ);
              v_0 = _mm_mul_ps(v_0, _mm_shuffle_ps(y_0, y_0, 0b10100000));
              for(j = 0; j < fold - 1; j++){
                s_0 = s_buffer[(j * 2)];
                s_1 = s_buffer[((j * 2) + 1)];
                q_0 = _mm_add_ps(s_0, _mm_or_ps(v_0, mask_BLP));
                q_1 = _mm_add_ps(s_1, _mm_or_ps(v_1, mask_BLP));
                s_buffer[(j * 2)] = q_0;
                s_buffer[((j * 2) + 1)] = q_1;
                q_0 = _mm_sub_ps(s_0, q_0);
                q_1 = _mm_sub_ps(s_1, q_1);
                v_0 = _mm_add_ps(v_0, q_0);
                v_1 = _mm_add_ps(v_1, q_1);
              }
              s_buffer[(j * 2)] = _mm_add_ps(s_buffer[(j * 2)], _mm_or_ps(v_0, mask_BLP));
              s_buffer[((j * 2) + 1)] = _mm_add_ps(s_buffer[((j * 2) + 1)], _mm_or_ps(v_1, mask_BLP));
            }
            if(i < n){
              v_0 = _mm_set_ps(0, 0, v_base[1], v_base[0]);
              y_0 = _mm_set_ps(0, 0, y_base[1], y_base[0]);
              v_1 = _mm_xor_ps(_mm_mul_ps(_mm_shuffle_ps(v_0, v_0, 0b10110001), _mm_shuffle_ps(y_0, y_0, 0b11110101)), mask_CONJ);
              v_0 = _mm_mul_ps(v_0, _mm_shuffle_ps(y_0, y_0, 0b10100000));
              for(j = 0; j < fold - 1; j++){
                s_0 = s_buffer[(j * 2)];
                s_1 = s_buffer[((j * 2) + 1)];
                q_0 = _mm_add_ps(s_0, _mm_or_ps(v_0, mask_BLP));
                q_1 = _mm_add_ps(s_1, _mm_or_ps(v_1, mask_BLP));
                s_buffer[(j * 2)] = q_0;
                s_buffer[((j * 2) + 1)] = q_1;
                q_0 = _mm_sub_ps(s_0, q_0);
                q_1 = _mm_sub_ps(s_1, q_1);
                v_0 = _mm_add_ps(v_0, q_0);
                v_1 = _mm_add_ps(v_1, q_1);
              }
              s_buffer[(j * 2)] = _mm_add_ps(s_buffer[(j * 2)], _mm_or_ps(v_0, mask_BLP));
              s_buffer[((j * 2) + 1)] = _mm_add_ps(s_buffer[((j * 2) + 1)], _mm_or_ps(v_1, mask_BLP));
            }
          }
        }
        for(j = 0; j < fold; j += 1){
          s_buffer[(j * 2)] = _mm_sub_ps(s_buffer[(j * 2)], _mm_set_ps(sum_base[((j * 2) + 1)], sum_base[(j * 2)], 0, 0));
          q_0 = (__m128)_mm_load1_pd((double *)(sum_base + (j * 2)));
          s_buffer[(j * 2)] = _mm_add_ps(s_buffer[(j * 2)], _mm_sub_ps(s_buffer[((j * 2) + 1)], q_0));
          _mm_store_ps((float*)tmp_cons, s_buffer[(j * 2)]);
          sum[j] = tmp_cons[0] + tmp_cons[1];
        }
        RESET_DAZ_FLAG
        return;
      }
    }
  #else
    int_float tmp_BLP;
    SET_DAZ_FLAG;
    switch(fold){
      case 3:{
        int i;

        float* sum_base = (float*) sum;
        float* v_base = (float*) v;
        float* y_base = (float*) y;
        float v_0, v_1, v_2, v_3;
        float y_0, y_1;
        float q_0, q_1, q_2, q_3;
        float s_0_0, s_0_1, s_0_2, s_0_3;
        float s_1_0, s_1_1, s_1_2, s_1_3;
        float s_2_0, s_2_1, s_2_2, s_2_3;

        s_0_0 = s_0_2 = sum_base[0];
        s_0_1 = s_0_3 = sum_base[1];
        s_1_0 = s_1_2 = sum_base[2];
        s_1_1 = s_1_3 = sum_base[3];
        s_2_0 = s_2_2 = sum_base[4];
        s_2_1 = s_2_3 = sum_base[5];
        if(incv == 1){
          if(incy == 1){

            for(i = 0; i + 1 <= n; i += 1, v_base += 2, y_base += 2){
              v_0 = v_base[0];
              v_1 = v_base[1];
              y_0 = y_base[0];
              y_1 = y_base[1];
              v_2 = v_1 * y_1;
              v_3 = v_0 * y_1 * -1;
              v_0 = v_0 * y_0;
              v_1 = v_1 * y_0;
              q_0 = s_0_0;
              q_1 = s_0_1;
              q_2 = s_0_2;
              q_3 = s_0_3;
              tmp_BLP.f = v_0;
              tmp_BLP.i |= 1;
              s_0_0 = s_0_0 + tmp_BLP.f;
              tmp_BLP.f = v_1;
              tmp_BLP.i |= 1;
              s_0_1 = s_0_1 + tmp_BLP.f;
              tmp_BLP.f = v_2;
              tmp_BLP.i |= 1;
              s_0_2 = s_0_2 + tmp_BLP.f;
              tmp_BLP.f = v_3;
              tmp_BLP.i |= 1;
              s_0_3 = s_0_3 + tmp_BLP.f;
              q_0 = q_0 - s_0_0;
              q_1 = q_1 - s_0_1;
              q_2 = q_2 - s_0_2;
              q_3 = q_3 - s_0_3;
              v_0 = v_0 + q_0;
              v_1 = v_1 + q_1;
              v_2 = v_2 + q_2;
              v_3 = v_3 + q_3;
              q_0 = s_1_0;
              q_1 = s_1_1;
              q_2 = s_1_2;
              q_3 = s_1_3;
              tmp_BLP.f = v_0;
              tmp_BLP.i |= 1;
              s_1_0 = s_1_0 + tmp_BLP.f;
              tmp_BLP.f = v_1;
              tmp_BLP.i |= 1;
              s_1_1 = s_1_1 + tmp_BLP.f;
              tmp_BLP.f = v_2;
              tmp_BLP.i |= 1;
              s_1_2 = s_1_2 + tmp_BLP.f;
              tmp_BLP.f = v_3;
              tmp_BLP.i |= 1;
              s_1_3 = s_1_3 + tmp_BLP.f;
              q_0 = q_0 - s_1_0;
              q_1 = q_1 - s_1_1;
              q_2 = q_2 - s_1_2;
              q_3 = q_3 - s_1_3;
              v_0 = v_0 + q_0;
              v_1 = v_1 + q_1;
              v_2 = v_2 + q_2;
              v_3 = v_3 + q_3;
              tmp_BLP.f = v_0;
              tmp_BLP.i |= 1;
              s_2_0 = s_2_0 + tmp_BLP.f;
              tmp_BLP.f = v_1;
              tmp_BLP.i |= 1;
              s_2_1 = s_2_1 + tmp_BLP.f;
              tmp_BLP.f = v_2;
              tmp_BLP.i |= 1;
              s_2_2 = s_2_2 + tmp_BLP.f;
              tmp_BLP.f = v_3;
              tmp_BLP.i |= 1;
              s_2_3 = s_2_3 + tmp_BLP.f;
            }
          }else{

            for(i = 0; i + 1 <= n; i += 1, v_base += 2, y_base += (incy * 2)){
              v_0 = v_base[0];
              v_1 = v_base[1];
              y_0 = y_base[0];
              y_1 = y_base[1];
              v_2 = v_1 * y_1;
              v_3 = v_0 * y_1 * -1;
              v_0 = v_0 * y_0;
              v_1 = v_1 * y_0;
              q_0 = s_0_0;
              q_1 = s_0_1;
              q_2 = s_0_2;
              q_3 = s_0_3;
              tmp_BLP.f = v_0;
              tmp_BLP.i |= 1;
              s_0_0 = s_0_0 + tmp_BLP.f;
              tmp_BLP.f = v_1;
              tmp_BLP.i |= 1;
              s_0_1 = s_0_1 + tmp_BLP.f;
              tmp_BLP.f = v_2;
              tmp_BLP.i |= 1;
              s_0_2 = s_0_2 + tmp_BLP.f;
              tmp_BLP.f = v_3;
              tmp_BLP.i |= 1;
              s_0_3 = s_0_3 + tmp_BLP.f;
              q_0 = q_0 - s_0_0;
              q_1 = q_1 - s_0_1;
              q_2 = q_2 - s_0_2;
              q_3 = q_3 - s_0_3;
              v_0 = v_0 + q_0;
              v_1 = v_1 + q_1;
              v_2 = v_2 + q_2;
              v_3 = v_3 + q_3;
              q_0 = s_1_0;
              q_1 = s_1_1;
              q_2 = s_1_2;
              q_3 = s_1_3;
              tmp_BLP.f = v_0;
              tmp_BLP.i |= 1;
              s_1_0 = s_1_0 + tmp_BLP.f;
              tmp_BLP.f = v_1;
              tmp_BLP.i |= 1;
              s_1_1 = s_1_1 + tmp_BLP.f;
              tmp_BLP.f = v_2;
              tmp_BLP.i |= 1;
              s_1_2 = s_1_2 + tmp_BLP.f;
              tmp_BLP.f = v_3;
              tmp_BLP.i |= 1;
              s_1_3 = s_1_3 + tmp_BLP.f;
              q_0 = q_0 - s_1_0;
              q_1 = q_1 - s_1_1;
              q_2 = q_2 - s_1_2;
              q_3 = q_3 - s_1_3;
              v_0 = v_0 + q_0;
              v_1 = v_1 + q_1;
              v_2 = v_2 + q_2;
              v_3 = v_3 + q_3;
              tmp_BLP.f = v_0;
              tmp_BLP.i |= 1;
              s_2_0 = s_2_0 + tmp_BLP.f;
              tmp_BLP.f = v_1;
              tmp_BLP.i |= 1;
              s_2_1 = s_2_1 + tmp_BLP.f;
              tmp_BLP.f = v_2;
              tmp_BLP.i |= 1;
              s_2_2 = s_2_2 + tmp_BLP.f;
              tmp_BLP.f = v_3;
              tmp_BLP.i |= 1;
              s_2_3 = s_2_3 + tmp_BLP.f;
            }
          }
        }else{
          if(incy == 1){

            for(i = 0; i + 1 <= n; i += 1, v_base += (incv * 2), y_base += 2){
              v_0 = v_base[0];
              v_1 = v_base[1];
              y_0 = y_base[0];
              y_1 = y_base[1];
              v_2 = v_1 * y_1;
              v_3 = v_0 * y_1 * -1;
              v_0 = v_0 * y_0;
              v_1 = v_1 * y_0;
              q_0 = s_0_0;
              q_1 = s_0_1;
              q_2 = s_0_2;
              q_3 = s_0_3;
              tmp_BLP.f = v_0;
              tmp_BLP.i |= 1;
              s_0_0 = s_0_0 + tmp_BLP.f;
              tmp_BLP.f = v_1;
              tmp_BLP.i |= 1;
              s_0_1 = s_0_1 + tmp_BLP.f;
              tmp_BLP.f = v_2;
              tmp_BLP.i |= 1;
              s_0_2 = s_0_2 + tmp_BLP.f;
              tmp_BLP.f = v_3;
              tmp_BLP.i |= 1;
              s_0_3 = s_0_3 + tmp_BLP.f;
              q_0 = q_0 - s_0_0;
              q_1 = q_1 - s_0_1;
              q_2 = q_2 - s_0_2;
              q_3 = q_3 - s_0_3;
              v_0 = v_0 + q_0;
              v_1 = v_1 + q_1;
              v_2 = v_2 + q_2;
              v_3 = v_3 + q_3;
              q_0 = s_1_0;
              q_1 = s_1_1;
              q_2 = s_1_2;
              q_3 = s_1_3;
              tmp_BLP.f = v_0;
              tmp_BLP.i |= 1;
              s_1_0 = s_1_0 + tmp_BLP.f;
              tmp_BLP.f = v_1;
              tmp_BLP.i |= 1;
              s_1_1 = s_1_1 + tmp_BLP.f;
              tmp_BLP.f = v_2;
              tmp_BLP.i |= 1;
              s_1_2 = s_1_2 + tmp_BLP.f;
              tmp_BLP.f = v_3;
              tmp_BLP.i |= 1;
              s_1_3 = s_1_3 + tmp_BLP.f;
              q_0 = q_0 - s_1_0;
              q_1 = q_1 - s_1_1;
              q_2 = q_2 - s_1_2;
              q_3 = q_3 - s_1_3;
              v_0 = v_0 + q_0;
              v_1 = v_1 + q_1;
              v_2 = v_2 + q_2;
              v_3 = v_3 + q_3;
              tmp_BLP.f = v_0;
              tmp_BLP.i |= 1;
              s_2_0 = s_2_0 + tmp_BLP.f;
              tmp_BLP.f = v_1;
              tmp_BLP.i |= 1;
              s_2_1 = s_2_1 + tmp_BLP.f;
              tmp_BLP.f = v_2;
              tmp_BLP.i |= 1;
              s_2_2 = s_2_2 + tmp_BLP.f;
              tmp_BLP.f = v_3;
              tmp_BLP.i |= 1;
              s_2_3 = s_2_3 + tmp_BLP.f;
            }
          }else{

            for(i = 0; i + 1 <= n; i += 1, v_base += (incv * 2), y_base += (incy * 2)){
              v_0 = v_base[0];
              v_1 = v_base[1];
              y_0 = y_base[0];
              y_1 = y_base[1];
              v_2 = v_1 * y_1;
              v_3 = v_0 * y_1 * -1;
              v_0 = v_0 * y_0;
              v_1 = v_1 * y_0;
              q_0 = s_0_0;
              q_1 = s_0_1;
              q_2 = s_0_2;
              q_3 = s_0_3;
              tmp_BLP.f = v_0;
              tmp_BLP.i |= 1;
              s_0_0 = s_0_0 + tmp_BLP.f;
              tmp_BLP.f = v_1;
              tmp_BLP.i |= 1;
              s_0_1 = s_0_1 + tmp_BLP.f;
              tmp_BLP.f = v_2;
              tmp_BLP.i |= 1;
              s_0_2 = s_0_2 + tmp_BLP.f;
              tmp_BLP.f = v_3;
              tmp_BLP.i |= 1;
              s_0_3 = s_0_3 + tmp_BLP.f;
              q_0 = q_0 - s_0_0;
              q_1 = q_1 - s_0_1;
              q_2 = q_2 - s_0_2;
              q_3 = q_3 - s_0_3;
              v_0 = v_0 + q_0;
              v_1 = v_1 + q_1;
              v_2 = v_2 + q_2;
              v_3 = v_3 + q_3;
              q_0 = s_1_0;
              q_1 = s_1_1;
              q_2 = s_1_2;
              q_3 = s_1_3;
              tmp_BLP.f = v_0;
              tmp_BLP.i |= 1;
              s_1_0 = s_1_0 + tmp_BLP.f;
              tmp_BLP.f = v_1;
              tmp_BLP.i |= 1;
              s_1_1 = s_1_1 + tmp_BLP.f;
              tmp_BLP.f = v_2;
              tmp_BLP.i |= 1;
              s_1_2 = s_1_2 + tmp_BLP.f;
              tmp_BLP.f = v_3;
              tmp_BLP.i |= 1;
              s_1_3 = s_1_3 + tmp_BLP.f;
              q_0 = q_0 - s_1_0;
              q_1 = q_1 - s_1_1;
              q_2 = q_2 - s_1_2;
              q_3 = q_3 - s_1_3;
              v_0 = v_0 + q_0;
              v_1 = v_1 + q_1;
              v_2 = v_2 + q_2;
              v_3 = v_3 + q_3;
              tmp_BLP.f = v_0;
              tmp_BLP.i |= 1;
              s_2_0 = s_2_0 + tmp_BLP.f;
              tmp_BLP.f = v_1;
              tmp_BLP.i |= 1;
              s_2_1 = s_2_1 + tmp_BLP.f;
              tmp_BLP.f = v_2;
              tmp_BLP.i |= 1;
              s_2_2 = s_2_2 + tmp_BLP.f;
              tmp_BLP.f = v_3;
              tmp_BLP.i |= 1;
              s_2_3 = s_2_3 + tmp_BLP.f;
            }
          }
        }
        q_0 = ((float*)sum)[0];
        s_0_0 = s_0_0 + (s_0_2 - q_0);
        q_0 = ((float*)sum)[1];
        s_0_1 = s_0_1 + (s_0_3 - q_0);
        ((float*)sum)[0] = s_0_0;
        ((float*)sum)[1] = s_0_1;
        q_0 = ((float*)sum)[2];
        s_1_0 = s_1_0 + (s_1_2 - q_0);
        q_0 = ((float*)sum)[3];
        s_1_1 = s_1_1 + (s_1_3 - q_0);
        ((float*)sum)[2] = s_1_0;
        ((float*)sum)[3] = s_1_1;
        q_0 = ((float*)sum)[4];
        s_2_0 = s_2_0 + (s_2_2 - q_0);
        q_0 = ((float*)sum)[5];
        s_2_1 = s_2_1 + (s_2_3 - q_0);
        ((float*)sum)[4] = s_2_0;
        ((float*)sum)[5] = s_2_1;
        RESET_DAZ_FLAG
        return;
      }
      default:{
        int i, j;

        float* sum_base = (float*) sum;
        float* v_base = (float*) v;
        float* y_base = (float*) y;
        float v_0, v_1, v_2, v_3;
        float y_0, y_1;
        float q_0, q_1, q_2, q_3;
        float s_0, s_1, s_2, s_3;
        float s_buffer[(MAX_FOLD * 4)];

        for(j = 0; j < fold; j += 1){
          s_buffer[(j * 4)] = s_buffer[((j * 4) + 2)] = sum_base[(j * 2)];
          s_buffer[((j * 4) + 1)] = s_buffer[((j * 4) + 3)] = sum_base[((j * 2) + 1)];
        }
        if(incv == 1){
          if(incy == 1){

            for(i = 0; i + 1 <= n; i += 1, v_base += 2, y_base += 2){
              v_0 = v_base[0];
              v_1 = v_base[1];
              y_0 = y_base[0];
              y_1 = y_base[1];
              v_2 = v_1 * y_1;
              v_3 = v_0 * y_1 * -1;
              v_0 = v_0 * y_0;
              v_1 = v_1 * y_0;
              for(j = 0; j < fold - 1; j++){
                s_0 = s_buffer[(j * 4)];
                s_1 = s_buffer[((j * 4) + 1)];
                s_2 = s_buffer[((j * 4) + 2)];
                s_3 = s_buffer[((j * 4) + 3)];
                tmp_BLP.f = v_0;
                tmp_BLP.i |= 1;
                q_0 = s_0 + tmp_BLP.f;
                tmp_BLP.f = v_1;
                tmp_BLP.i |= 1;
                q_1 = s_1 + tmp_BLP.f;
                tmp_BLP.f = v_2;
                tmp_BLP.i |= 1;
                q_2 = s_2 + tmp_BLP.f;
                tmp_BLP.f = v_3;
                tmp_BLP.i |= 1;
                q_3 = s_3 + tmp_BLP.f;
                s_buffer[(j * 4)] = q_0;
                s_buffer[((j * 4) + 1)] = q_1;
                s_buffer[((j * 4) + 2)] = q_2;
                s_buffer[((j * 4) + 3)] = q_3;
                q_0 = s_0 - q_0;
                q_1 = s_1 - q_1;
                q_2 = s_2 - q_2;
                q_3 = s_3 - q_3;
                v_0 = v_0 + q_0;
                v_1 = v_1 + q_1;
                v_2 = v_2 + q_2;
                v_3 = v_3 + q_3;
              }
              tmp_BLP.f = v_0;
              tmp_BLP.i |= 1;
              s_buffer[(j * 4)] = s_buffer[(j * 4)] + tmp_BLP.f;
              tmp_BLP.f = v_1;
              tmp_BLP.i |= 1;
              s_buffer[((j * 4) + 1)] = s_buffer[((j * 4) + 1)] + tmp_BLP.f;
              tmp_BLP.f = v_2;
              tmp_BLP.i |= 1;
              s_buffer[((j * 4) + 2)] = s_buffer[((j * 4) + 2)] + tmp_BLP.f;
              tmp_BLP.f = v_3;
              tmp_BLP.i |= 1;
              s_buffer[((j * 4) + 3)] = s_buffer[((j * 4) + 3)] + tmp_BLP.f;
            }
          }else{

            for(i = 0; i + 1 <= n; i += 1, v_base += 2, y_base += (incy * 2)){
              v_0 = v_base[0];
              v_1 = v_base[1];
              y_0 = y_base[0];
              y_1 = y_base[1];
              v_2 = v_1 * y_1;
              v_3 = v_0 * y_1 * -1;
              v_0 = v_0 * y_0;
              v_1 = v_1 * y_0;
              for(j = 0; j < fold - 1; j++){
                s_0 = s_buffer[(j * 4)];
                s_1 = s_buffer[((j * 4) + 1)];
                s_2 = s_buffer[((j * 4) + 2)];
                s_3 = s_buffer[((j * 4) + 3)];
                tmp_BLP.f = v_0;
                tmp_BLP.i |= 1;
                q_0 = s_0 + tmp_BLP.f;
                tmp_BLP.f = v_1;
                tmp_BLP.i |= 1;
                q_1 = s_1 + tmp_BLP.f;
                tmp_BLP.f = v_2;
                tmp_BLP.i |= 1;
                q_2 = s_2 + tmp_BLP.f;
                tmp_BLP.f = v_3;
                tmp_BLP.i |= 1;
                q_3 = s_3 + tmp_BLP.f;
                s_buffer[(j * 4)] = q_0;
                s_buffer[((j * 4) + 1)] = q_1;
                s_buffer[((j * 4) + 2)] = q_2;
                s_buffer[((j * 4) + 3)] = q_3;
                q_0 = s_0 - q_0;
                q_1 = s_1 - q_1;
                q_2 = s_2 - q_2;
                q_3 = s_3 - q_3;
                v_0 = v_0 + q_0;
                v_1 = v_1 + q_1;
                v_2 = v_2 + q_2;
                v_3 = v_3 + q_3;
              }
              tmp_BLP.f = v_0;
              tmp_BLP.i |= 1;
              s_buffer[(j * 4)] = s_buffer[(j * 4)] + tmp_BLP.f;
              tmp_BLP.f = v_1;
              tmp_BLP.i |= 1;
              s_buffer[((j * 4) + 1)] = s_buffer[((j * 4) + 1)] + tmp_BLP.f;
              tmp_BLP.f = v_2;
              tmp_BLP.i |= 1;
              s_buffer[((j * 4) + 2)] = s_buffer[((j * 4) + 2)] + tmp_BLP.f;
              tmp_BLP.f = v_3;
              tmp_BLP.i |= 1;
              s_buffer[((j * 4) + 3)] = s_buffer[((j * 4) + 3)] + tmp_BLP.f;
            }
          }
        }else{
          if(incy == 1){

            for(i = 0; i + 1 <= n; i += 1, v_base += (incv * 2), y_base += 2){
              v_0 = v_base[0];
              v_1 = v_base[1];
              y_0 = y_base[0];
              y_1 = y_base[1];
              v_2 = v_1 * y_1;
              v_3 = v_0 * y_1 * -1;
              v_0 = v_0 * y_0;
              v_1 = v_1 * y_0;
              for(j = 0; j < fold - 1; j++){
                s_0 = s_buffer[(j * 4)];
                s_1 = s_buffer[((j * 4) + 1)];
                s_2 = s_buffer[((j * 4) + 2)];
                s_3 = s_buffer[((j * 4) + 3)];
                tmp_BLP.f = v_0;
                tmp_BLP.i |= 1;
                q_0 = s_0 + tmp_BLP.f;
                tmp_BLP.f = v_1;
                tmp_BLP.i |= 1;
                q_1 = s_1 + tmp_BLP.f;
                tmp_BLP.f = v_2;
                tmp_BLP.i |= 1;
                q_2 = s_2 + tmp_BLP.f;
                tmp_BLP.f = v_3;
                tmp_BLP.i |= 1;
                q_3 = s_3 + tmp_BLP.f;
                s_buffer[(j * 4)] = q_0;
                s_buffer[((j * 4) + 1)] = q_1;
                s_buffer[((j * 4) + 2)] = q_2;
                s_buffer[((j * 4) + 3)] = q_3;
                q_0 = s_0 - q_0;
                q_1 = s_1 - q_1;
                q_2 = s_2 - q_2;
                q_3 = s_3 - q_3;
                v_0 = v_0 + q_0;
                v_1 = v_1 + q_1;
                v_2 = v_2 + q_2;
                v_3 = v_3 + q_3;
              }
              tmp_BLP.f = v_0;
              tmp_BLP.i |= 1;
              s_buffer[(j * 4)] = s_buffer[(j * 4)] + tmp_BLP.f;
              tmp_BLP.f = v_1;
              tmp_BLP.i |= 1;
              s_buffer[((j * 4) + 1)] = s_buffer[((j * 4) + 1)] + tmp_BLP.f;
              tmp_BLP.f = v_2;
              tmp_BLP.i |= 1;
              s_buffer[((j * 4) + 2)] = s_buffer[((j * 4) + 2)] + tmp_BLP.f;
              tmp_BLP.f = v_3;
              tmp_BLP.i |= 1;
              s_buffer[((j * 4) + 3)] = s_buffer[((j * 4) + 3)] + tmp_BLP.f;
            }
          }else{

            for(i = 0; i + 1 <= n; i += 1, v_base += (incv * 2), y_base += (incy * 2)){
              v_0 = v_base[0];
              v_1 = v_base[1];
              y_0 = y_base[0];
              y_1 = y_base[1];
              v_2 = v_1 * y_1;
              v_3 = v_0 * y_1 * -1;
              v_0 = v_0 * y_0;
              v_1 = v_1 * y_0;
              for(j = 0; j < fold - 1; j++){
                s_0 = s_buffer[(j * 4)];
                s_1 = s_buffer[((j * 4) + 1)];
                s_2 = s_buffer[((j * 4) + 2)];
                s_3 = s_buffer[((j * 4) + 3)];
                tmp_BLP.f = v_0;
                tmp_BLP.i |= 1;
                q_0 = s_0 + tmp_BLP.f;
                tmp_BLP.f = v_1;
                tmp_BLP.i |= 1;
                q_1 = s_1 + tmp_BLP.f;
                tmp_BLP.f = v_2;
                tmp_BLP.i |= 1;
                q_2 = s_2 + tmp_BLP.f;
                tmp_BLP.f = v_3;
                tmp_BLP.i |= 1;
                q_3 = s_3 + tmp_BLP.f;
                s_buffer[(j * 4)] = q_0;
                s_buffer[((j * 4) + 1)] = q_1;
                s_buffer[((j * 4) + 2)] = q_2;
                s_buffer[((j * 4) + 3)] = q_3;
                q_0 = s_0 - q_0;
                q_1 = s_1 - q_1;
                q_2 = s_2 - q_2;
                q_3 = s_3 - q_3;
                v_0 = v_0 + q_0;
                v_1 = v_1 + q_1;
                v_2 = v_2 + q_2;
                v_3 = v_3 + q_3;
              }
              tmp_BLP.f = v_0;
              tmp_BLP.i |= 1;
              s_buffer[(j * 4)] = s_buffer[(j * 4)] + tmp_BLP.f;
              tmp_BLP.f = v_1;
              tmp_BLP.i |= 1;
              s_buffer[((j * 4) + 1)] = s_buffer[((j * 4) + 1)] + tmp_BLP.f;
              tmp_BLP.f = v_2;
              tmp_BLP.i |= 1;
              s_buffer[((j * 4) + 2)] = s_buffer[((j * 4) + 2)] + tmp_BLP.f;
              tmp_BLP.f = v_3;
              tmp_BLP.i |= 1;
              s_buffer[((j * 4) + 3)] = s_buffer[((j * 4) + 3)] + tmp_BLP.f;
            }
          }
        }
        for(j = 0; j < fold; j += 1){
          q_0 = ((float*)sum)[(j * 2)];
          s_buffer[(j * 4)] = s_buffer[(j * 4)] + (s_buffer[((j * 4) + 2)] - q_0);
          q_0 = ((float*)sum)[((j * 2) + 1)];
          s_buffer[((j * 4) + 1)] = s_buffer[((j * 4) + 1)] + (s_buffer[((j * 4) + 3)] - q_0);
          ((float*)sum)[(j * 2)] = s_buffer[(j * 4)];
          ((float*)sum)[((j * 2) + 1)] = s_buffer[((j * 4) + 1)];
        }
        RESET_DAZ_FLAG
        return;
      }
    }
  #endif
  //[[[end]]]
}
