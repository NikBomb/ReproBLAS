#include <float.h>
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include "../config.h"
#include "../common/common.h"
#include "indexedBLAS.h"

/*[[[cog
import cog
import generate
import dataTypes
import amaxm
import vectorizations

code_block = generate.CodeBlock()
vectorizations.conditionally_include_vectorizations(code_block)
cog.out(str(code_block))
]]]*/
#ifdef __AVX__
  #include <immintrin.h>

#elif defined(__SSE2__)
  #include <emmintrin.h>

#else


#endif
//[[[end]]]

double damaxm(const int N, const double *X, const int incX, const double *Y, const int incY){
  double amaxm;
  /*[[[cog
  cog.out(generate.generate(amaxm.AMaxM(dataTypes.Double, "N", "X", "incX", "Y", "incY", "(&amaxm)"), cog.inFile, args, params, mode))
  ]]]*/
  #ifdef __AVX__
    __m256d abs_mask_tmp;
    {
      __m256d tmp;
      tmp = _mm256_set1_pd(1);
      abs_mask_tmp = _mm256_set1_pd(-1);
      abs_mask_tmp = _mm256_xor_pd(abs_mask_tmp, tmp);
      tmp = _mm256_cmp_pd(tmp, tmp, 0);
      abs_mask_tmp = _mm256_xor_pd(abs_mask_tmp, tmp);
    }
    double max_buffer_tmp[4] __attribute__((aligned(32))); (void)max_buffer_tmp;

    int i;

    __m256d X_0;
    __m256d Y_0;
    __m256d m_0;
    m_0 = _mm256_setzero_pd();

    if(incX == 1 && incY == 1){

      for(i = 0; i + 4 <= N; i += 4, X += 4, Y += 4){
        X_0 = _mm256_loadu_pd(X);
        Y_0 = _mm256_loadu_pd(Y);
        X_0 = _mm256_and_pd(_mm256_mul_pd(X_0, Y_0), abs_mask_tmp);
        m_0 = _mm256_max_pd(m_0, X_0);
      }
      if(i < N){
        X_0 = _mm256_set_pd(0, (N - i)>2?X[2]:0, (N - i)>1?X[1]:0, X[0]);
        Y_0 = _mm256_set_pd(0, (N - i)>2?Y[2]:0, (N - i)>1?Y[1]:0, Y[0]);
        X_0 = _mm256_and_pd(_mm256_mul_pd(X_0, Y_0), abs_mask_tmp);
        m_0 = _mm256_max_pd(m_0, X_0);
        X += (N - i), Y += (N - i);
      }
    }else{

      for(i = 0; i + 4 <= N; i += 4, X += (incX * 4), Y += (incY * 4)){
        X_0 = _mm256_set_pd(X[(incX * 3)], X[(incX * 2)], X[incX], X[0]);
        Y_0 = _mm256_set_pd(Y[(incY * 3)], Y[(incY * 2)], Y[incY], Y[0]);
        X_0 = _mm256_and_pd(_mm256_mul_pd(X_0, Y_0), abs_mask_tmp);
        m_0 = _mm256_max_pd(m_0, X_0);
      }
      if(i < N){
        X_0 = _mm256_set_pd(0, (N - i)>2?X[(incX * 2)]:0, (N - i)>1?X[incX]:0, X[0]);
        Y_0 = _mm256_set_pd(0, (N - i)>2?Y[(incY * 2)]:0, (N - i)>1?Y[incY]:0, Y[0]);
        X_0 = _mm256_and_pd(_mm256_mul_pd(X_0, Y_0), abs_mask_tmp);
        m_0 = _mm256_max_pd(m_0, X_0);
        X += (incX * (N - i)), Y += (incY * (N - i));
      }
    }
    _mm256_store_pd(max_buffer_tmp, m_0);
    max_buffer_tmp[0] = (max_buffer_tmp[0] > max_buffer_tmp[1] ? max_buffer_tmp[0]: max_buffer_tmp[1]);
    max_buffer_tmp[0] = (max_buffer_tmp[0] > max_buffer_tmp[2] ? max_buffer_tmp[0]: max_buffer_tmp[2]);
    max_buffer_tmp[0] = (max_buffer_tmp[0] > max_buffer_tmp[3] ? max_buffer_tmp[0]: max_buffer_tmp[3]);
    (&amaxm)[0] = max_buffer_tmp[0];

  #elif defined(__SSE2__)
    __m128d abs_mask_tmp;
    {
      __m128d tmp;
      tmp = _mm_set1_pd(1);
      abs_mask_tmp = _mm_set1_pd(-1);
      abs_mask_tmp = _mm_xor_pd(abs_mask_tmp, tmp);
      tmp = _mm_cmpeq_pd(tmp, tmp);
      abs_mask_tmp = _mm_xor_pd(abs_mask_tmp, tmp);
    }
    double max_buffer_tmp[2] __attribute__((aligned(16))); (void)max_buffer_tmp;

    int i;

    __m128d X_0;
    __m128d Y_0;
    __m128d m_0;
    m_0 = _mm_setzero_pd();

    if(incX == 1 && incY == 1){

      for(i = 0; i + 2 <= N; i += 2, X += 2, Y += 2){
        X_0 = _mm_loadu_pd(X);
        Y_0 = _mm_loadu_pd(Y);
        X_0 = _mm_and_pd(_mm_mul_pd(X_0, Y_0), abs_mask_tmp);
        m_0 = _mm_max_pd(m_0, X_0);
      }
      if(i < N){
        X_0 = _mm_set_pd(0, X[0]);
        Y_0 = _mm_set_pd(0, Y[0]);
        X_0 = _mm_and_pd(_mm_mul_pd(X_0, Y_0), abs_mask_tmp);
        m_0 = _mm_max_pd(m_0, X_0);
        X += (N - i), Y += (N - i);
      }
    }else{

      for(i = 0; i + 2 <= N; i += 2, X += (incX * 2), Y += (incY * 2)){
        X_0 = _mm_set_pd(X[incX], X[0]);
        Y_0 = _mm_set_pd(Y[incY], Y[0]);
        X_0 = _mm_and_pd(_mm_mul_pd(X_0, Y_0), abs_mask_tmp);
        m_0 = _mm_max_pd(m_0, X_0);
      }
      if(i < N){
        X_0 = _mm_set_pd(0, X[0]);
        Y_0 = _mm_set_pd(0, Y[0]);
        X_0 = _mm_and_pd(_mm_mul_pd(X_0, Y_0), abs_mask_tmp);
        m_0 = _mm_max_pd(m_0, X_0);
        X += (incX * (N - i)), Y += (incY * (N - i));
      }
    }
    _mm_store_pd(max_buffer_tmp, m_0);
    max_buffer_tmp[0] = (max_buffer_tmp[0] > max_buffer_tmp[1] ? max_buffer_tmp[0]: max_buffer_tmp[1]);
    (&amaxm)[0] = max_buffer_tmp[0];

  #else
    int i;

    double X_0;
    double Y_0;
    double m_0;
    m_0 = 0;

    if(incX == 1 && incY == 1){

      for(i = 0; i + 1 <= N; i += 1, X += 1, Y += 1){
        X_0 = X[0];
        Y_0 = Y[0];
        X_0 = fabs(X_0 * Y_0);
        m_0 = (m_0 > X_0? m_0: X_0);
      }
    }else{

      for(i = 0; i + 1 <= N; i += 1, X += incX, Y += incY){
        X_0 = X[0];
        Y_0 = Y[0];
        X_0 = fabs(X_0 * Y_0);
        m_0 = (m_0 > X_0? m_0: X_0);
      }
    }
    (&amaxm)[0] = m_0;

  #endif
  //[[[end]]]
  return amaxm;
}
