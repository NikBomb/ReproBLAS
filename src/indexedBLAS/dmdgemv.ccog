#include <stdlib.h>

#include <indexedBLAS.h>
#include <indexed.h>

#include "../common/common.h"

/*[[[cog
import cog
import generate
import dataTypes
from src.common import blockSize
from scripts import terminal

cog.out(generate.generate(blockSize.BlockSize("dmdsum", "Y_BLOCK", 1, 128, 128, ["bench_rdgemv_fold_{}".format(terminal.get_didefaultfold())]), cog.inFile, args, params, mode))
cog.out(generate.generate(blockSize.BlockSize("dmdsum", "X_BLOCK", 1, 4 * terminal.get_diendurance(), 4 * terminal.get_diendurance(), ["bench_rdgemv_fold_{}".format(terminal.get_didefaultfold())]), cog.inFile, args, params, mode))
]]]*/
#define Y_BLOCK 128
#define X_BLOCK 8192
//[[[end]]]

void dmdgemv(const int fold, const char Order,
             const char TransA, const int M, const int N,
             const double alpha, const double *A, const int lda,
             const double *X, const int incX,
             double *priY, const int incpriY, const int incincpriY,
             double *carY, const int inccarY, const int incinccarY){
  int i;
  int ii;
  int j;
  double *alphaX;
  int incalphaX;
  switch(Order){
    case 'r':
    case 'R':
      switch(TransA){
        case 'n':
        case 'N':
          if(alpha == 1.0){
            alphaX = (double*)X;
            incalphaX = incX;
          }else{
            alphaX = (double*)malloc(N * sizeof(double));
            for(j = 0; j < N; j++){
              alphaX[j] = X[j * incX] * alpha;
            }
            incalphaX = 1;
          }
          for(i = 0; i < M; i += Y_BLOCK){
            for(j = 0; j < N; j += X_BLOCK){
              for(ii = i; ii < M && ii < i + Y_BLOCK; ii++){
                dmddot(fold, MIN(X_BLOCK, N - j), alphaX + j * incalphaX, incalphaX, A + ii * lda + j, 1, priY + ii*incpriY*incincpriY*fold, incpriY, carY + ii*inccarY*incinccarY*fold, inccarY);
              }
            }
          }
          if(alpha != 1.0){
            free(alphaX);
          }
          break;
        default:
          if(alpha == 1.0){
            alphaX = (double*)X;
            incalphaX = incX;
          }else{
            alphaX = (double*)malloc(M * sizeof(double));
            for(j = 0; j < M; j++){
              alphaX[j] = X[j * incX] * alpha;
            }
            incalphaX = 1;
          }
          for(i = 0; i < N; i += Y_BLOCK){
            for(j = 0; j < M; j += X_BLOCK){
              for(ii = i; ii < N && ii < i + Y_BLOCK; ii++){
                dmddot(fold, MIN(X_BLOCK, M - j), alphaX + j * incalphaX, incalphaX, A + j * lda + ii, lda, priY + ii*incpriY*incincpriY*fold, incpriY, carY + ii*inccarY*incinccarY*fold, inccarY);
              }
            }
          }
          if(alpha != 1.0){
            free(alphaX);
          }
          break;
      }
      break;
    default:
      switch(TransA){
        case 'n':
        case 'N':
          dmdgemv(fold, 'r', 't', N, M, alpha, A, lda, X, incX, priY, incpriY, incincpriY, carY, inccarY, incinccarY);
          break;
        default:
          dmdgemv(fold, 'r', 'n', N, M, alpha, A, lda, X, incX, priY, incpriY, incincpriY, carY, inccarY, incinccarY);
          break;
      }
      break;
  }
}
