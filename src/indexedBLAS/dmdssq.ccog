/*
 *  Created   13/10/25   H.D. Nguyen
 */

#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include <float.h>

#include "../config.h"
#include "../common/common.h"
#include "indexedBLAS.h"

/*[[[cog
import cog
import generate
import dataTypes
import depositSSq
import vectorizations
from src.common import blockSize
from scripts import terminal

code_block = generate.CodeBlock()
vectorizations.conditionally_include_vectorizations(code_block)
cog.out(str(code_block))

cog.outl()

cog.out(generate.generate(blockSize.BlockSize("dmdssq", "N_block_MAX", 32, terminal.get_diendurance(), terminal.get_diendurance(), ["bench_rdnrm2_fold_{}".format(terminal.get_default_fold())]), cog.inFile, args, params, mode))
]]]*/
//[[[end]]]

double dmdssq(const int fold, const int N, const double *X, const int incX, const double scaleY, double *manY, const int incmanY, double *carY, const int inccarY){
  double amax;
  double scl = scaleY;
  double new_scl;
  int i, j;
  int N_block = MIN(N_block_MAX, DIENDURANCE);
  int deposits = 0;

  for (i = 0; i < N; i += N_block) {
    N_block = MIN((N - i), N_block);

    amax = damax(N_block, X, incX);

    if (isinf(amax) || isinf(manY[0])){
      for (j = 0; j < N_block; j++){
        manY[0] += fabs(X[j * incX]);
      }
    }
    if (isnan(manY[0])){
      return dscale(1.0);
    } else if (isinf(manY[0])){
      X += N_block * incX;
      continue;
    }

    if (deposits + N_block > DIENDURANCE) {
      dmrenorm(fold, manY, incmanY, carY, inccarY);
      deposits = 0;
    }

    new_scl = dscale(amax);
    if (new_scl > scl) {
      if(scl > 0.0){
        dmdrescale(fold, new_scl, scl, manY, incmanY, carY, inccarY);
      }
      scl = new_scl;
    }

    new_scl = 1.0/scl;
    amax *= new_scl;
    amax = amax * amax;

    dmdupdate(fold, amax, manY, incmanY, carY, inccarY);

    /*[[[cog
      cog.out(generate.generate(depositSSq.DepositSSq(dataTypes.Double, "N_block", "X", "incX", "manY", "incmanY", "new_scl"), cog.inFile, args, params, mode))
      ]]]*/
    //[[[end]]]

    deposits += N_block;
  }

  dmrenorm(fold, manY, incmanY, carY, inccarY);

  if (isinf(manY[0]) || isnan(manY[0])){
    return dscale(1.0);
  } else {
    return scl;
  }
}
