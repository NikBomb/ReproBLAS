/*
 *  Created   13/10/25   H.D. Nguyen
 */

#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include <float.h>

#include "../config.h"
#include "../common/common.h"
#include "indexedBLAS.h"

/*[[[cog
import cog
import generate
import dataTypes
import depositDot
import vectorizations
from src.common import blockSize
from scripts import terminal

code_block = generate.CodeBlock()
vectorizations.conditionally_include_vectorizations(code_block)
cog.out(str(code_block))

cog.outl()

cog.out(generate.generate(blockSize.BlockSize("smsdot", "N_block_MAX", 32, terminal.get_siendurance(), terminal.get_siendurance(), ["bench_rsdot_fold_{}".format(terminal.get_sidefaultfold())]), cog.inFile, args, params, mode))
]]]*/
#ifdef __AVX__
  #include <immintrin.h>

#elif defined(__SSE2__)
  #include <emmintrin.h>

#else


#endif

#define N_block_MAX 512
//[[[end]]]

void smsdot(const int fold, const int N, const float *X, const int incX, const float *Y, const int incY, float *manZ, const int incmanZ, float *carZ, const int inccarZ){
  float amaxm;
  int i, j;
  int N_block = N_block_MAX;
  int deposits = 0;

  for (i = 0; i < N; i += N_block) {
    N_block = MIN((N - i), N_block);

    amaxm = samaxm(N_block, X, incX, Y, incY);

    if (isinf(amaxm) || isinf(manZ[0])){
      for (j = 0; j < N_block; j++){
        manZ[0] += X[j * incX] * Y[j * incY];
      }
    }
    if (isnan(manZ[0])){
      return;
    } else if (isinf(manZ[0])){
      X += N_block * incX;
      Y += N_block * incY;
      continue;
    }

    if (deposits + N_block > idxd_SIENDURANCE) {
      smrenorm(fold, manZ, incmanZ, carZ, inccarZ);
      deposits = 0;
    }

    smsupdate(fold, amaxm, manZ, incmanZ, carZ, inccarZ);

    /*[[[cog
    cog.out(generate.generate(depositDot.DepositDot(dataTypes.Float, "fold", "N_block", "X", "incX", "manZ", "incmanZ", "Y", "incY"), cog.inFile, args, params, mode))
    ]]]*/
    {
      #ifdef __AVX__
        __m256 blp_mask_tmp;
        {
          __m256 tmp;
          blp_mask_tmp = _mm256_set1_ps(1.0);
          tmp = _mm256_set1_ps(1.0 + (FLT_EPSILON * 1.0001));
          blp_mask_tmp = _mm256_xor_ps(blp_mask_tmp, tmp);
        }
        __m256 cons_tmp; (void)cons_tmp;
        float cons_buffer_tmp[8] __attribute__((aligned(32))); (void)cons_buffer_tmp;
        unsigned int SIMD_daz_ftz_old_tmp = 0;
        unsigned int SIMD_daz_ftz_new_tmp = 0;


        switch(fold){
          case 3:
            {
              int i;
              __m256 X_0;
              __m256 Y_0;
              __m256 compression_0;
              __m256 expansion_0;
              __m256 q_0;
              __m256 s_0_0;
              __m256 s_1_0;
              __m256 s_2_0;

              s_0_0 = _mm256_broadcast_ss(manZ);
              s_1_0 = _mm256_broadcast_ss(manZ + incmanZ);
              s_2_0 = _mm256_broadcast_ss(manZ + (incmanZ * 2));

              if(incX == 1){
                if(incY == 1){
                  if(smindex0(manZ)){
                    compression_0 = _mm256_set1_ps(idxd_SMCOMPRESSION);
                    expansion_0 = _mm256_set1_ps(idxd_SMEXPANSION * 0.5);
                    for(i = 0; i + 8 <= N_block; i += 8, X += 8, Y += 8){
                      X_0 = _mm256_loadu_ps(X);
                      Y_0 = _mm256_loadu_ps(Y);
                      X_0 = _mm256_mul_ps(X_0, Y_0);

                      q_0 = s_0_0;
                      s_0_0 = _mm256_add_ps(s_0_0, _mm256_or_ps(_mm256_mul_ps(X_0, compression_0), blp_mask_tmp));
                      q_0 = _mm256_mul_ps(_mm256_sub_ps(q_0, s_0_0), expansion_0);
                      X_0 = _mm256_add_ps(_mm256_add_ps(X_0, q_0), q_0);
                      q_0 = s_1_0;
                      s_1_0 = _mm256_add_ps(s_1_0, _mm256_or_ps(X_0, blp_mask_tmp));
                      q_0 = _mm256_sub_ps(q_0, s_1_0);
                      X_0 = _mm256_add_ps(X_0, q_0);
                      s_2_0 = _mm256_add_ps(s_2_0, _mm256_or_ps(X_0, blp_mask_tmp));
                    }
                    if(i < N_block){
                      X_0 = _mm256_set_ps(0, (N_block - i)>6?X[6]:0, (N_block - i)>5?X[5]:0, (N_block - i)>4?X[4]:0, (N_block - i)>3?X[3]:0, (N_block - i)>2?X[2]:0, (N_block - i)>1?X[1]:0, X[0]);
                      Y_0 = _mm256_set_ps(0, (N_block - i)>6?Y[6]:0, (N_block - i)>5?Y[5]:0, (N_block - i)>4?Y[4]:0, (N_block - i)>3?Y[3]:0, (N_block - i)>2?Y[2]:0, (N_block - i)>1?Y[1]:0, Y[0]);
                      X_0 = _mm256_mul_ps(X_0, Y_0);

                      q_0 = s_0_0;
                      s_0_0 = _mm256_add_ps(s_0_0, _mm256_or_ps(_mm256_mul_ps(X_0, compression_0), blp_mask_tmp));
                      q_0 = _mm256_mul_ps(_mm256_sub_ps(q_0, s_0_0), expansion_0);
                      X_0 = _mm256_add_ps(_mm256_add_ps(X_0, q_0), q_0);
                      q_0 = s_1_0;
                      s_1_0 = _mm256_add_ps(s_1_0, _mm256_or_ps(X_0, blp_mask_tmp));
                      q_0 = _mm256_sub_ps(q_0, s_1_0);
                      X_0 = _mm256_add_ps(X_0, q_0);
                      s_2_0 = _mm256_add_ps(s_2_0, _mm256_or_ps(X_0, blp_mask_tmp));
                      X += (N_block - i), Y += (N_block - i);
                    }
                  }else{
                    for(i = 0; i + 8 <= N_block; i += 8, X += 8, Y += 8){
                      X_0 = _mm256_loadu_ps(X);
                      Y_0 = _mm256_loadu_ps(Y);
                      X_0 = _mm256_mul_ps(X_0, Y_0);

                      q_0 = s_0_0;
                      s_0_0 = _mm256_add_ps(s_0_0, _mm256_or_ps(X_0, blp_mask_tmp));
                      q_0 = _mm256_sub_ps(q_0, s_0_0);
                      X_0 = _mm256_add_ps(X_0, q_0);
                      q_0 = s_1_0;
                      s_1_0 = _mm256_add_ps(s_1_0, _mm256_or_ps(X_0, blp_mask_tmp));
                      q_0 = _mm256_sub_ps(q_0, s_1_0);
                      X_0 = _mm256_add_ps(X_0, q_0);
                      s_2_0 = _mm256_add_ps(s_2_0, _mm256_or_ps(X_0, blp_mask_tmp));
                    }
                    if(i < N_block){
                      X_0 = _mm256_set_ps(0, (N_block - i)>6?X[6]:0, (N_block - i)>5?X[5]:0, (N_block - i)>4?X[4]:0, (N_block - i)>3?X[3]:0, (N_block - i)>2?X[2]:0, (N_block - i)>1?X[1]:0, X[0]);
                      Y_0 = _mm256_set_ps(0, (N_block - i)>6?Y[6]:0, (N_block - i)>5?Y[5]:0, (N_block - i)>4?Y[4]:0, (N_block - i)>3?Y[3]:0, (N_block - i)>2?Y[2]:0, (N_block - i)>1?Y[1]:0, Y[0]);
                      X_0 = _mm256_mul_ps(X_0, Y_0);

                      q_0 = s_0_0;
                      s_0_0 = _mm256_add_ps(s_0_0, _mm256_or_ps(X_0, blp_mask_tmp));
                      q_0 = _mm256_sub_ps(q_0, s_0_0);
                      X_0 = _mm256_add_ps(X_0, q_0);
                      q_0 = s_1_0;
                      s_1_0 = _mm256_add_ps(s_1_0, _mm256_or_ps(X_0, blp_mask_tmp));
                      q_0 = _mm256_sub_ps(q_0, s_1_0);
                      X_0 = _mm256_add_ps(X_0, q_0);
                      s_2_0 = _mm256_add_ps(s_2_0, _mm256_or_ps(X_0, blp_mask_tmp));
                      X += (N_block - i), Y += (N_block - i);
                    }
                  }
                }else{
                  if(smindex0(manZ)){
                    compression_0 = _mm256_set1_ps(idxd_SMCOMPRESSION);
                    expansion_0 = _mm256_set1_ps(idxd_SMEXPANSION * 0.5);
                    for(i = 0; i + 8 <= N_block; i += 8, X += 8, Y += (incY * 8)){
                      X_0 = _mm256_loadu_ps(X);
                      Y_0 = _mm256_set_ps(Y[(incY * 7)], Y[(incY * 6)], Y[(incY * 5)], Y[(incY * 4)], Y[(incY * 3)], Y[(incY * 2)], Y[incY], Y[0]);
                      X_0 = _mm256_mul_ps(X_0, Y_0);

                      q_0 = s_0_0;
                      s_0_0 = _mm256_add_ps(s_0_0, _mm256_or_ps(_mm256_mul_ps(X_0, compression_0), blp_mask_tmp));
                      q_0 = _mm256_mul_ps(_mm256_sub_ps(q_0, s_0_0), expansion_0);
                      X_0 = _mm256_add_ps(_mm256_add_ps(X_0, q_0), q_0);
                      q_0 = s_1_0;
                      s_1_0 = _mm256_add_ps(s_1_0, _mm256_or_ps(X_0, blp_mask_tmp));
                      q_0 = _mm256_sub_ps(q_0, s_1_0);
                      X_0 = _mm256_add_ps(X_0, q_0);
                      s_2_0 = _mm256_add_ps(s_2_0, _mm256_or_ps(X_0, blp_mask_tmp));
                    }
                    if(i < N_block){
                      X_0 = _mm256_set_ps(0, (N_block - i)>6?X[6]:0, (N_block - i)>5?X[5]:0, (N_block - i)>4?X[4]:0, (N_block - i)>3?X[3]:0, (N_block - i)>2?X[2]:0, (N_block - i)>1?X[1]:0, X[0]);
                      Y_0 = _mm256_set_ps(0, (N_block - i)>6?Y[(incY * 6)]:0, (N_block - i)>5?Y[(incY * 5)]:0, (N_block - i)>4?Y[(incY * 4)]:0, (N_block - i)>3?Y[(incY * 3)]:0, (N_block - i)>2?Y[(incY * 2)]:0, (N_block - i)>1?Y[incY]:0, Y[0]);
                      X_0 = _mm256_mul_ps(X_0, Y_0);

                      q_0 = s_0_0;
                      s_0_0 = _mm256_add_ps(s_0_0, _mm256_or_ps(_mm256_mul_ps(X_0, compression_0), blp_mask_tmp));
                      q_0 = _mm256_mul_ps(_mm256_sub_ps(q_0, s_0_0), expansion_0);
                      X_0 = _mm256_add_ps(_mm256_add_ps(X_0, q_0), q_0);
                      q_0 = s_1_0;
                      s_1_0 = _mm256_add_ps(s_1_0, _mm256_or_ps(X_0, blp_mask_tmp));
                      q_0 = _mm256_sub_ps(q_0, s_1_0);
                      X_0 = _mm256_add_ps(X_0, q_0);
                      s_2_0 = _mm256_add_ps(s_2_0, _mm256_or_ps(X_0, blp_mask_tmp));
                      X += (N_block - i), Y += (incY * (N_block - i));
                    }
                  }else{
                    for(i = 0; i + 8 <= N_block; i += 8, X += 8, Y += (incY * 8)){
                      X_0 = _mm256_loadu_ps(X);
                      Y_0 = _mm256_set_ps(Y[(incY * 7)], Y[(incY * 6)], Y[(incY * 5)], Y[(incY * 4)], Y[(incY * 3)], Y[(incY * 2)], Y[incY], Y[0]);
                      X_0 = _mm256_mul_ps(X_0, Y_0);

                      q_0 = s_0_0;
                      s_0_0 = _mm256_add_ps(s_0_0, _mm256_or_ps(X_0, blp_mask_tmp));
                      q_0 = _mm256_sub_ps(q_0, s_0_0);
                      X_0 = _mm256_add_ps(X_0, q_0);
                      q_0 = s_1_0;
                      s_1_0 = _mm256_add_ps(s_1_0, _mm256_or_ps(X_0, blp_mask_tmp));
                      q_0 = _mm256_sub_ps(q_0, s_1_0);
                      X_0 = _mm256_add_ps(X_0, q_0);
                      s_2_0 = _mm256_add_ps(s_2_0, _mm256_or_ps(X_0, blp_mask_tmp));
                    }
                    if(i < N_block){
                      X_0 = _mm256_set_ps(0, (N_block - i)>6?X[6]:0, (N_block - i)>5?X[5]:0, (N_block - i)>4?X[4]:0, (N_block - i)>3?X[3]:0, (N_block - i)>2?X[2]:0, (N_block - i)>1?X[1]:0, X[0]);
                      Y_0 = _mm256_set_ps(0, (N_block - i)>6?Y[(incY * 6)]:0, (N_block - i)>5?Y[(incY * 5)]:0, (N_block - i)>4?Y[(incY * 4)]:0, (N_block - i)>3?Y[(incY * 3)]:0, (N_block - i)>2?Y[(incY * 2)]:0, (N_block - i)>1?Y[incY]:0, Y[0]);
                      X_0 = _mm256_mul_ps(X_0, Y_0);

                      q_0 = s_0_0;
                      s_0_0 = _mm256_add_ps(s_0_0, _mm256_or_ps(X_0, blp_mask_tmp));
                      q_0 = _mm256_sub_ps(q_0, s_0_0);
                      X_0 = _mm256_add_ps(X_0, q_0);
                      q_0 = s_1_0;
                      s_1_0 = _mm256_add_ps(s_1_0, _mm256_or_ps(X_0, blp_mask_tmp));
                      q_0 = _mm256_sub_ps(q_0, s_1_0);
                      X_0 = _mm256_add_ps(X_0, q_0);
                      s_2_0 = _mm256_add_ps(s_2_0, _mm256_or_ps(X_0, blp_mask_tmp));
                      X += (N_block - i), Y += (incY * (N_block - i));
                    }
                  }
                }
              }else{
                if(incY == 1){
                  if(smindex0(manZ)){
                    compression_0 = _mm256_set1_ps(idxd_SMCOMPRESSION);
                    expansion_0 = _mm256_set1_ps(idxd_SMEXPANSION * 0.5);
                    for(i = 0; i + 8 <= N_block; i += 8, X += (incX * 8), Y += 8){
                      X_0 = _mm256_set_ps(X[(incX * 7)], X[(incX * 6)], X[(incX * 5)], X[(incX * 4)], X[(incX * 3)], X[(incX * 2)], X[incX], X[0]);
                      Y_0 = _mm256_loadu_ps(Y);
                      X_0 = _mm256_mul_ps(X_0, Y_0);

                      q_0 = s_0_0;
                      s_0_0 = _mm256_add_ps(s_0_0, _mm256_or_ps(_mm256_mul_ps(X_0, compression_0), blp_mask_tmp));
                      q_0 = _mm256_mul_ps(_mm256_sub_ps(q_0, s_0_0), expansion_0);
                      X_0 = _mm256_add_ps(_mm256_add_ps(X_0, q_0), q_0);
                      q_0 = s_1_0;
                      s_1_0 = _mm256_add_ps(s_1_0, _mm256_or_ps(X_0, blp_mask_tmp));
                      q_0 = _mm256_sub_ps(q_0, s_1_0);
                      X_0 = _mm256_add_ps(X_0, q_0);
                      s_2_0 = _mm256_add_ps(s_2_0, _mm256_or_ps(X_0, blp_mask_tmp));
                    }
                    if(i < N_block){
                      X_0 = _mm256_set_ps(0, (N_block - i)>6?X[(incX * 6)]:0, (N_block - i)>5?X[(incX * 5)]:0, (N_block - i)>4?X[(incX * 4)]:0, (N_block - i)>3?X[(incX * 3)]:0, (N_block - i)>2?X[(incX * 2)]:0, (N_block - i)>1?X[incX]:0, X[0]);
                      Y_0 = _mm256_set_ps(0, (N_block - i)>6?Y[6]:0, (N_block - i)>5?Y[5]:0, (N_block - i)>4?Y[4]:0, (N_block - i)>3?Y[3]:0, (N_block - i)>2?Y[2]:0, (N_block - i)>1?Y[1]:0, Y[0]);
                      X_0 = _mm256_mul_ps(X_0, Y_0);

                      q_0 = s_0_0;
                      s_0_0 = _mm256_add_ps(s_0_0, _mm256_or_ps(_mm256_mul_ps(X_0, compression_0), blp_mask_tmp));
                      q_0 = _mm256_mul_ps(_mm256_sub_ps(q_0, s_0_0), expansion_0);
                      X_0 = _mm256_add_ps(_mm256_add_ps(X_0, q_0), q_0);
                      q_0 = s_1_0;
                      s_1_0 = _mm256_add_ps(s_1_0, _mm256_or_ps(X_0, blp_mask_tmp));
                      q_0 = _mm256_sub_ps(q_0, s_1_0);
                      X_0 = _mm256_add_ps(X_0, q_0);
                      s_2_0 = _mm256_add_ps(s_2_0, _mm256_or_ps(X_0, blp_mask_tmp));
                      X += (incX * (N_block - i)), Y += (N_block - i);
                    }
                  }else{
                    for(i = 0; i + 8 <= N_block; i += 8, X += (incX * 8), Y += 8){
                      X_0 = _mm256_set_ps(X[(incX * 7)], X[(incX * 6)], X[(incX * 5)], X[(incX * 4)], X[(incX * 3)], X[(incX * 2)], X[incX], X[0]);
                      Y_0 = _mm256_loadu_ps(Y);
                      X_0 = _mm256_mul_ps(X_0, Y_0);

                      q_0 = s_0_0;
                      s_0_0 = _mm256_add_ps(s_0_0, _mm256_or_ps(X_0, blp_mask_tmp));
                      q_0 = _mm256_sub_ps(q_0, s_0_0);
                      X_0 = _mm256_add_ps(X_0, q_0);
                      q_0 = s_1_0;
                      s_1_0 = _mm256_add_ps(s_1_0, _mm256_or_ps(X_0, blp_mask_tmp));
                      q_0 = _mm256_sub_ps(q_0, s_1_0);
                      X_0 = _mm256_add_ps(X_0, q_0);
                      s_2_0 = _mm256_add_ps(s_2_0, _mm256_or_ps(X_0, blp_mask_tmp));
                    }
                    if(i < N_block){
                      X_0 = _mm256_set_ps(0, (N_block - i)>6?X[(incX * 6)]:0, (N_block - i)>5?X[(incX * 5)]:0, (N_block - i)>4?X[(incX * 4)]:0, (N_block - i)>3?X[(incX * 3)]:0, (N_block - i)>2?X[(incX * 2)]:0, (N_block - i)>1?X[incX]:0, X[0]);
                      Y_0 = _mm256_set_ps(0, (N_block - i)>6?Y[6]:0, (N_block - i)>5?Y[5]:0, (N_block - i)>4?Y[4]:0, (N_block - i)>3?Y[3]:0, (N_block - i)>2?Y[2]:0, (N_block - i)>1?Y[1]:0, Y[0]);
                      X_0 = _mm256_mul_ps(X_0, Y_0);

                      q_0 = s_0_0;
                      s_0_0 = _mm256_add_ps(s_0_0, _mm256_or_ps(X_0, blp_mask_tmp));
                      q_0 = _mm256_sub_ps(q_0, s_0_0);
                      X_0 = _mm256_add_ps(X_0, q_0);
                      q_0 = s_1_0;
                      s_1_0 = _mm256_add_ps(s_1_0, _mm256_or_ps(X_0, blp_mask_tmp));
                      q_0 = _mm256_sub_ps(q_0, s_1_0);
                      X_0 = _mm256_add_ps(X_0, q_0);
                      s_2_0 = _mm256_add_ps(s_2_0, _mm256_or_ps(X_0, blp_mask_tmp));
                      X += (incX * (N_block - i)), Y += (N_block - i);
                    }
                  }
                }else{
                  if(smindex0(manZ)){
                    compression_0 = _mm256_set1_ps(idxd_SMCOMPRESSION);
                    expansion_0 = _mm256_set1_ps(idxd_SMEXPANSION * 0.5);
                    for(i = 0; i + 8 <= N_block; i += 8, X += (incX * 8), Y += (incY * 8)){
                      X_0 = _mm256_set_ps(X[(incX * 7)], X[(incX * 6)], X[(incX * 5)], X[(incX * 4)], X[(incX * 3)], X[(incX * 2)], X[incX], X[0]);
                      Y_0 = _mm256_set_ps(Y[(incY * 7)], Y[(incY * 6)], Y[(incY * 5)], Y[(incY * 4)], Y[(incY * 3)], Y[(incY * 2)], Y[incY], Y[0]);
                      X_0 = _mm256_mul_ps(X_0, Y_0);

                      q_0 = s_0_0;
                      s_0_0 = _mm256_add_ps(s_0_0, _mm256_or_ps(_mm256_mul_ps(X_0, compression_0), blp_mask_tmp));
                      q_0 = _mm256_mul_ps(_mm256_sub_ps(q_0, s_0_0), expansion_0);
                      X_0 = _mm256_add_ps(_mm256_add_ps(X_0, q_0), q_0);
                      q_0 = s_1_0;
                      s_1_0 = _mm256_add_ps(s_1_0, _mm256_or_ps(X_0, blp_mask_tmp));
                      q_0 = _mm256_sub_ps(q_0, s_1_0);
                      X_0 = _mm256_add_ps(X_0, q_0);
                      s_2_0 = _mm256_add_ps(s_2_0, _mm256_or_ps(X_0, blp_mask_tmp));
                    }
                    if(i < N_block){
                      X_0 = _mm256_set_ps(0, (N_block - i)>6?X[(incX * 6)]:0, (N_block - i)>5?X[(incX * 5)]:0, (N_block - i)>4?X[(incX * 4)]:0, (N_block - i)>3?X[(incX * 3)]:0, (N_block - i)>2?X[(incX * 2)]:0, (N_block - i)>1?X[incX]:0, X[0]);
                      Y_0 = _mm256_set_ps(0, (N_block - i)>6?Y[(incY * 6)]:0, (N_block - i)>5?Y[(incY * 5)]:0, (N_block - i)>4?Y[(incY * 4)]:0, (N_block - i)>3?Y[(incY * 3)]:0, (N_block - i)>2?Y[(incY * 2)]:0, (N_block - i)>1?Y[incY]:0, Y[0]);
                      X_0 = _mm256_mul_ps(X_0, Y_0);

                      q_0 = s_0_0;
                      s_0_0 = _mm256_add_ps(s_0_0, _mm256_or_ps(_mm256_mul_ps(X_0, compression_0), blp_mask_tmp));
                      q_0 = _mm256_mul_ps(_mm256_sub_ps(q_0, s_0_0), expansion_0);
                      X_0 = _mm256_add_ps(_mm256_add_ps(X_0, q_0), q_0);
                      q_0 = s_1_0;
                      s_1_0 = _mm256_add_ps(s_1_0, _mm256_or_ps(X_0, blp_mask_tmp));
                      q_0 = _mm256_sub_ps(q_0, s_1_0);
                      X_0 = _mm256_add_ps(X_0, q_0);
                      s_2_0 = _mm256_add_ps(s_2_0, _mm256_or_ps(X_0, blp_mask_tmp));
                      X += (incX * (N_block - i)), Y += (incY * (N_block - i));
                    }
                  }else{
                    for(i = 0; i + 8 <= N_block; i += 8, X += (incX * 8), Y += (incY * 8)){
                      X_0 = _mm256_set_ps(X[(incX * 7)], X[(incX * 6)], X[(incX * 5)], X[(incX * 4)], X[(incX * 3)], X[(incX * 2)], X[incX], X[0]);
                      Y_0 = _mm256_set_ps(Y[(incY * 7)], Y[(incY * 6)], Y[(incY * 5)], Y[(incY * 4)], Y[(incY * 3)], Y[(incY * 2)], Y[incY], Y[0]);
                      X_0 = _mm256_mul_ps(X_0, Y_0);

                      q_0 = s_0_0;
                      s_0_0 = _mm256_add_ps(s_0_0, _mm256_or_ps(X_0, blp_mask_tmp));
                      q_0 = _mm256_sub_ps(q_0, s_0_0);
                      X_0 = _mm256_add_ps(X_0, q_0);
                      q_0 = s_1_0;
                      s_1_0 = _mm256_add_ps(s_1_0, _mm256_or_ps(X_0, blp_mask_tmp));
                      q_0 = _mm256_sub_ps(q_0, s_1_0);
                      X_0 = _mm256_add_ps(X_0, q_0);
                      s_2_0 = _mm256_add_ps(s_2_0, _mm256_or_ps(X_0, blp_mask_tmp));
                    }
                    if(i < N_block){
                      X_0 = _mm256_set_ps(0, (N_block - i)>6?X[(incX * 6)]:0, (N_block - i)>5?X[(incX * 5)]:0, (N_block - i)>4?X[(incX * 4)]:0, (N_block - i)>3?X[(incX * 3)]:0, (N_block - i)>2?X[(incX * 2)]:0, (N_block - i)>1?X[incX]:0, X[0]);
                      Y_0 = _mm256_set_ps(0, (N_block - i)>6?Y[(incY * 6)]:0, (N_block - i)>5?Y[(incY * 5)]:0, (N_block - i)>4?Y[(incY * 4)]:0, (N_block - i)>3?Y[(incY * 3)]:0, (N_block - i)>2?Y[(incY * 2)]:0, (N_block - i)>1?Y[incY]:0, Y[0]);
                      X_0 = _mm256_mul_ps(X_0, Y_0);

                      q_0 = s_0_0;
                      s_0_0 = _mm256_add_ps(s_0_0, _mm256_or_ps(X_0, blp_mask_tmp));
                      q_0 = _mm256_sub_ps(q_0, s_0_0);
                      X_0 = _mm256_add_ps(X_0, q_0);
                      q_0 = s_1_0;
                      s_1_0 = _mm256_add_ps(s_1_0, _mm256_or_ps(X_0, blp_mask_tmp));
                      q_0 = _mm256_sub_ps(q_0, s_1_0);
                      X_0 = _mm256_add_ps(X_0, q_0);
                      s_2_0 = _mm256_add_ps(s_2_0, _mm256_or_ps(X_0, blp_mask_tmp));
                      X += (incX * (N_block - i)), Y += (incY * (N_block - i));
                    }
                  }
                }
              }

              s_0_0 = _mm256_sub_ps(s_0_0, _mm256_set_ps(manZ[0], manZ[0], manZ[0], manZ[0], manZ[0], manZ[0], manZ[0], 0));
              _mm256_store_ps(cons_buffer_tmp, s_0_0);
              manZ[0] = cons_buffer_tmp[0] + cons_buffer_tmp[1] + cons_buffer_tmp[2] + cons_buffer_tmp[3] + cons_buffer_tmp[4] + cons_buffer_tmp[5] + cons_buffer_tmp[6] + cons_buffer_tmp[7];
              s_1_0 = _mm256_sub_ps(s_1_0, _mm256_set_ps(manZ[incmanZ], manZ[incmanZ], manZ[incmanZ], manZ[incmanZ], manZ[incmanZ], manZ[incmanZ], manZ[incmanZ], 0));
              _mm256_store_ps(cons_buffer_tmp, s_1_0);
              manZ[incmanZ] = cons_buffer_tmp[0] + cons_buffer_tmp[1] + cons_buffer_tmp[2] + cons_buffer_tmp[3] + cons_buffer_tmp[4] + cons_buffer_tmp[5] + cons_buffer_tmp[6] + cons_buffer_tmp[7];
              s_2_0 = _mm256_sub_ps(s_2_0, _mm256_set_ps(manZ[(incmanZ * 2)], manZ[(incmanZ * 2)], manZ[(incmanZ * 2)], manZ[(incmanZ * 2)], manZ[(incmanZ * 2)], manZ[(incmanZ * 2)], manZ[(incmanZ * 2)], 0));
              _mm256_store_ps(cons_buffer_tmp, s_2_0);
              manZ[(incmanZ * 2)] = cons_buffer_tmp[0] + cons_buffer_tmp[1] + cons_buffer_tmp[2] + cons_buffer_tmp[3] + cons_buffer_tmp[4] + cons_buffer_tmp[5] + cons_buffer_tmp[6] + cons_buffer_tmp[7];

              if(SIMD_daz_ftz_new_tmp != SIMD_daz_ftz_old_tmp){
                _mm_setcsr(SIMD_daz_ftz_old_tmp);
              }
            }
            break;
          default:
            {
              int i, j;
              __m256 X_0;
              __m256 Y_0;
              __m256 compression_0;
              __m256 expansion_0;
              __m256 q_0;
              __m256 s_0;
              __m256 s_buffer[SIMAXFOLD];

              for(j = 0; j < fold; j += 1){
                s_buffer[j] = _mm256_broadcast_ss(manZ + (incmanZ * j));
              }

              if(incX == 1){
                if(incY == 1){
                  if(smindex0(manZ)){
                    compression_0 = _mm256_set1_ps(idxd_SMCOMPRESSION);
                    expansion_0 = _mm256_set1_ps(idxd_SMEXPANSION * 0.5);
                    for(i = 0; i + 8 <= N_block; i += 8, X += 8, Y += 8){
                      X_0 = _mm256_loadu_ps(X);
                      Y_0 = _mm256_loadu_ps(Y);
                      X_0 = _mm256_mul_ps(X_0, Y_0);

                      s_0 = s_buffer[0];
                      q_0 = _mm256_add_ps(s_0, _mm256_or_ps(_mm256_mul_ps(X_0, compression_0), blp_mask_tmp));
                      s_buffer[0] = q_0;
                      q_0 = _mm256_mul_ps(_mm256_sub_ps(s_0, q_0), expansion_0);
                      X_0 = _mm256_add_ps(_mm256_add_ps(X_0, q_0), q_0);
                      for(j = 1; j < fold - 1; j++){
                        s_0 = s_buffer[j];
                        q_0 = _mm256_add_ps(s_0, _mm256_or_ps(X_0, blp_mask_tmp));
                        s_buffer[j] = q_0;
                        q_0 = _mm256_sub_ps(s_0, q_0);
                        X_0 = _mm256_add_ps(X_0, q_0);
                      }
                      s_buffer[j] = _mm256_add_ps(s_buffer[j], _mm256_or_ps(X_0, blp_mask_tmp));
                    }
                    if(i < N_block){
                      X_0 = _mm256_set_ps(0, (N_block - i)>6?X[6]:0, (N_block - i)>5?X[5]:0, (N_block - i)>4?X[4]:0, (N_block - i)>3?X[3]:0, (N_block - i)>2?X[2]:0, (N_block - i)>1?X[1]:0, X[0]);
                      Y_0 = _mm256_set_ps(0, (N_block - i)>6?Y[6]:0, (N_block - i)>5?Y[5]:0, (N_block - i)>4?Y[4]:0, (N_block - i)>3?Y[3]:0, (N_block - i)>2?Y[2]:0, (N_block - i)>1?Y[1]:0, Y[0]);
                      X_0 = _mm256_mul_ps(X_0, Y_0);

                      s_0 = s_buffer[0];
                      q_0 = _mm256_add_ps(s_0, _mm256_or_ps(_mm256_mul_ps(X_0, compression_0), blp_mask_tmp));
                      s_buffer[0] = q_0;
                      q_0 = _mm256_mul_ps(_mm256_sub_ps(s_0, q_0), expansion_0);
                      X_0 = _mm256_add_ps(_mm256_add_ps(X_0, q_0), q_0);
                      for(j = 1; j < fold - 1; j++){
                        s_0 = s_buffer[j];
                        q_0 = _mm256_add_ps(s_0, _mm256_or_ps(X_0, blp_mask_tmp));
                        s_buffer[j] = q_0;
                        q_0 = _mm256_sub_ps(s_0, q_0);
                        X_0 = _mm256_add_ps(X_0, q_0);
                      }
                      s_buffer[j] = _mm256_add_ps(s_buffer[j], _mm256_or_ps(X_0, blp_mask_tmp));
                      X += (N_block - i), Y += (N_block - i);
                    }
                  }else{
                    for(i = 0; i + 8 <= N_block; i += 8, X += 8, Y += 8){
                      X_0 = _mm256_loadu_ps(X);
                      Y_0 = _mm256_loadu_ps(Y);
                      X_0 = _mm256_mul_ps(X_0, Y_0);

                      for(j = 0; j < fold - 1; j++){
                        s_0 = s_buffer[j];
                        q_0 = _mm256_add_ps(s_0, _mm256_or_ps(X_0, blp_mask_tmp));
                        s_buffer[j] = q_0;
                        q_0 = _mm256_sub_ps(s_0, q_0);
                        X_0 = _mm256_add_ps(X_0, q_0);
                      }
                      s_buffer[j] = _mm256_add_ps(s_buffer[j], _mm256_or_ps(X_0, blp_mask_tmp));
                    }
                    if(i < N_block){
                      X_0 = _mm256_set_ps(0, (N_block - i)>6?X[6]:0, (N_block - i)>5?X[5]:0, (N_block - i)>4?X[4]:0, (N_block - i)>3?X[3]:0, (N_block - i)>2?X[2]:0, (N_block - i)>1?X[1]:0, X[0]);
                      Y_0 = _mm256_set_ps(0, (N_block - i)>6?Y[6]:0, (N_block - i)>5?Y[5]:0, (N_block - i)>4?Y[4]:0, (N_block - i)>3?Y[3]:0, (N_block - i)>2?Y[2]:0, (N_block - i)>1?Y[1]:0, Y[0]);
                      X_0 = _mm256_mul_ps(X_0, Y_0);

                      for(j = 0; j < fold - 1; j++){
                        s_0 = s_buffer[j];
                        q_0 = _mm256_add_ps(s_0, _mm256_or_ps(X_0, blp_mask_tmp));
                        s_buffer[j] = q_0;
                        q_0 = _mm256_sub_ps(s_0, q_0);
                        X_0 = _mm256_add_ps(X_0, q_0);
                      }
                      s_buffer[j] = _mm256_add_ps(s_buffer[j], _mm256_or_ps(X_0, blp_mask_tmp));
                      X += (N_block - i), Y += (N_block - i);
                    }
                  }
                }else{
                  if(smindex0(manZ)){
                    compression_0 = _mm256_set1_ps(idxd_SMCOMPRESSION);
                    expansion_0 = _mm256_set1_ps(idxd_SMEXPANSION * 0.5);
                    for(i = 0; i + 8 <= N_block; i += 8, X += 8, Y += (incY * 8)){
                      X_0 = _mm256_loadu_ps(X);
                      Y_0 = _mm256_set_ps(Y[(incY * 7)], Y[(incY * 6)], Y[(incY * 5)], Y[(incY * 4)], Y[(incY * 3)], Y[(incY * 2)], Y[incY], Y[0]);
                      X_0 = _mm256_mul_ps(X_0, Y_0);

                      s_0 = s_buffer[0];
                      q_0 = _mm256_add_ps(s_0, _mm256_or_ps(_mm256_mul_ps(X_0, compression_0), blp_mask_tmp));
                      s_buffer[0] = q_0;
                      q_0 = _mm256_mul_ps(_mm256_sub_ps(s_0, q_0), expansion_0);
                      X_0 = _mm256_add_ps(_mm256_add_ps(X_0, q_0), q_0);
                      for(j = 1; j < fold - 1; j++){
                        s_0 = s_buffer[j];
                        q_0 = _mm256_add_ps(s_0, _mm256_or_ps(X_0, blp_mask_tmp));
                        s_buffer[j] = q_0;
                        q_0 = _mm256_sub_ps(s_0, q_0);
                        X_0 = _mm256_add_ps(X_0, q_0);
                      }
                      s_buffer[j] = _mm256_add_ps(s_buffer[j], _mm256_or_ps(X_0, blp_mask_tmp));
                    }
                    if(i < N_block){
                      X_0 = _mm256_set_ps(0, (N_block - i)>6?X[6]:0, (N_block - i)>5?X[5]:0, (N_block - i)>4?X[4]:0, (N_block - i)>3?X[3]:0, (N_block - i)>2?X[2]:0, (N_block - i)>1?X[1]:0, X[0]);
                      Y_0 = _mm256_set_ps(0, (N_block - i)>6?Y[(incY * 6)]:0, (N_block - i)>5?Y[(incY * 5)]:0, (N_block - i)>4?Y[(incY * 4)]:0, (N_block - i)>3?Y[(incY * 3)]:0, (N_block - i)>2?Y[(incY * 2)]:0, (N_block - i)>1?Y[incY]:0, Y[0]);
                      X_0 = _mm256_mul_ps(X_0, Y_0);

                      s_0 = s_buffer[0];
                      q_0 = _mm256_add_ps(s_0, _mm256_or_ps(_mm256_mul_ps(X_0, compression_0), blp_mask_tmp));
                      s_buffer[0] = q_0;
                      q_0 = _mm256_mul_ps(_mm256_sub_ps(s_0, q_0), expansion_0);
                      X_0 = _mm256_add_ps(_mm256_add_ps(X_0, q_0), q_0);
                      for(j = 1; j < fold - 1; j++){
                        s_0 = s_buffer[j];
                        q_0 = _mm256_add_ps(s_0, _mm256_or_ps(X_0, blp_mask_tmp));
                        s_buffer[j] = q_0;
                        q_0 = _mm256_sub_ps(s_0, q_0);
                        X_0 = _mm256_add_ps(X_0, q_0);
                      }
                      s_buffer[j] = _mm256_add_ps(s_buffer[j], _mm256_or_ps(X_0, blp_mask_tmp));
                      X += (N_block - i), Y += (incY * (N_block - i));
                    }
                  }else{
                    for(i = 0; i + 8 <= N_block; i += 8, X += 8, Y += (incY * 8)){
                      X_0 = _mm256_loadu_ps(X);
                      Y_0 = _mm256_set_ps(Y[(incY * 7)], Y[(incY * 6)], Y[(incY * 5)], Y[(incY * 4)], Y[(incY * 3)], Y[(incY * 2)], Y[incY], Y[0]);
                      X_0 = _mm256_mul_ps(X_0, Y_0);

                      for(j = 0; j < fold - 1; j++){
                        s_0 = s_buffer[j];
                        q_0 = _mm256_add_ps(s_0, _mm256_or_ps(X_0, blp_mask_tmp));
                        s_buffer[j] = q_0;
                        q_0 = _mm256_sub_ps(s_0, q_0);
                        X_0 = _mm256_add_ps(X_0, q_0);
                      }
                      s_buffer[j] = _mm256_add_ps(s_buffer[j], _mm256_or_ps(X_0, blp_mask_tmp));
                    }
                    if(i < N_block){
                      X_0 = _mm256_set_ps(0, (N_block - i)>6?X[6]:0, (N_block - i)>5?X[5]:0, (N_block - i)>4?X[4]:0, (N_block - i)>3?X[3]:0, (N_block - i)>2?X[2]:0, (N_block - i)>1?X[1]:0, X[0]);
                      Y_0 = _mm256_set_ps(0, (N_block - i)>6?Y[(incY * 6)]:0, (N_block - i)>5?Y[(incY * 5)]:0, (N_block - i)>4?Y[(incY * 4)]:0, (N_block - i)>3?Y[(incY * 3)]:0, (N_block - i)>2?Y[(incY * 2)]:0, (N_block - i)>1?Y[incY]:0, Y[0]);
                      X_0 = _mm256_mul_ps(X_0, Y_0);

                      for(j = 0; j < fold - 1; j++){
                        s_0 = s_buffer[j];
                        q_0 = _mm256_add_ps(s_0, _mm256_or_ps(X_0, blp_mask_tmp));
                        s_buffer[j] = q_0;
                        q_0 = _mm256_sub_ps(s_0, q_0);
                        X_0 = _mm256_add_ps(X_0, q_0);
                      }
                      s_buffer[j] = _mm256_add_ps(s_buffer[j], _mm256_or_ps(X_0, blp_mask_tmp));
                      X += (N_block - i), Y += (incY * (N_block - i));
                    }
                  }
                }
              }else{
                if(incY == 1){
                  if(smindex0(manZ)){
                    compression_0 = _mm256_set1_ps(idxd_SMCOMPRESSION);
                    expansion_0 = _mm256_set1_ps(idxd_SMEXPANSION * 0.5);
                    for(i = 0; i + 8 <= N_block; i += 8, X += (incX * 8), Y += 8){
                      X_0 = _mm256_set_ps(X[(incX * 7)], X[(incX * 6)], X[(incX * 5)], X[(incX * 4)], X[(incX * 3)], X[(incX * 2)], X[incX], X[0]);
                      Y_0 = _mm256_loadu_ps(Y);
                      X_0 = _mm256_mul_ps(X_0, Y_0);

                      s_0 = s_buffer[0];
                      q_0 = _mm256_add_ps(s_0, _mm256_or_ps(_mm256_mul_ps(X_0, compression_0), blp_mask_tmp));
                      s_buffer[0] = q_0;
                      q_0 = _mm256_mul_ps(_mm256_sub_ps(s_0, q_0), expansion_0);
                      X_0 = _mm256_add_ps(_mm256_add_ps(X_0, q_0), q_0);
                      for(j = 1; j < fold - 1; j++){
                        s_0 = s_buffer[j];
                        q_0 = _mm256_add_ps(s_0, _mm256_or_ps(X_0, blp_mask_tmp));
                        s_buffer[j] = q_0;
                        q_0 = _mm256_sub_ps(s_0, q_0);
                        X_0 = _mm256_add_ps(X_0, q_0);
                      }
                      s_buffer[j] = _mm256_add_ps(s_buffer[j], _mm256_or_ps(X_0, blp_mask_tmp));
                    }
                    if(i < N_block){
                      X_0 = _mm256_set_ps(0, (N_block - i)>6?X[(incX * 6)]:0, (N_block - i)>5?X[(incX * 5)]:0, (N_block - i)>4?X[(incX * 4)]:0, (N_block - i)>3?X[(incX * 3)]:0, (N_block - i)>2?X[(incX * 2)]:0, (N_block - i)>1?X[incX]:0, X[0]);
                      Y_0 = _mm256_set_ps(0, (N_block - i)>6?Y[6]:0, (N_block - i)>5?Y[5]:0, (N_block - i)>4?Y[4]:0, (N_block - i)>3?Y[3]:0, (N_block - i)>2?Y[2]:0, (N_block - i)>1?Y[1]:0, Y[0]);
                      X_0 = _mm256_mul_ps(X_0, Y_0);

                      s_0 = s_buffer[0];
                      q_0 = _mm256_add_ps(s_0, _mm256_or_ps(_mm256_mul_ps(X_0, compression_0), blp_mask_tmp));
                      s_buffer[0] = q_0;
                      q_0 = _mm256_mul_ps(_mm256_sub_ps(s_0, q_0), expansion_0);
                      X_0 = _mm256_add_ps(_mm256_add_ps(X_0, q_0), q_0);
                      for(j = 1; j < fold - 1; j++){
                        s_0 = s_buffer[j];
                        q_0 = _mm256_add_ps(s_0, _mm256_or_ps(X_0, blp_mask_tmp));
                        s_buffer[j] = q_0;
                        q_0 = _mm256_sub_ps(s_0, q_0);
                        X_0 = _mm256_add_ps(X_0, q_0);
                      }
                      s_buffer[j] = _mm256_add_ps(s_buffer[j], _mm256_or_ps(X_0, blp_mask_tmp));
                      X += (incX * (N_block - i)), Y += (N_block - i);
                    }
                  }else{
                    for(i = 0; i + 8 <= N_block; i += 8, X += (incX * 8), Y += 8){
                      X_0 = _mm256_set_ps(X[(incX * 7)], X[(incX * 6)], X[(incX * 5)], X[(incX * 4)], X[(incX * 3)], X[(incX * 2)], X[incX], X[0]);
                      Y_0 = _mm256_loadu_ps(Y);
                      X_0 = _mm256_mul_ps(X_0, Y_0);

                      for(j = 0; j < fold - 1; j++){
                        s_0 = s_buffer[j];
                        q_0 = _mm256_add_ps(s_0, _mm256_or_ps(X_0, blp_mask_tmp));
                        s_buffer[j] = q_0;
                        q_0 = _mm256_sub_ps(s_0, q_0);
                        X_0 = _mm256_add_ps(X_0, q_0);
                      }
                      s_buffer[j] = _mm256_add_ps(s_buffer[j], _mm256_or_ps(X_0, blp_mask_tmp));
                    }
                    if(i < N_block){
                      X_0 = _mm256_set_ps(0, (N_block - i)>6?X[(incX * 6)]:0, (N_block - i)>5?X[(incX * 5)]:0, (N_block - i)>4?X[(incX * 4)]:0, (N_block - i)>3?X[(incX * 3)]:0, (N_block - i)>2?X[(incX * 2)]:0, (N_block - i)>1?X[incX]:0, X[0]);
                      Y_0 = _mm256_set_ps(0, (N_block - i)>6?Y[6]:0, (N_block - i)>5?Y[5]:0, (N_block - i)>4?Y[4]:0, (N_block - i)>3?Y[3]:0, (N_block - i)>2?Y[2]:0, (N_block - i)>1?Y[1]:0, Y[0]);
                      X_0 = _mm256_mul_ps(X_0, Y_0);

                      for(j = 0; j < fold - 1; j++){
                        s_0 = s_buffer[j];
                        q_0 = _mm256_add_ps(s_0, _mm256_or_ps(X_0, blp_mask_tmp));
                        s_buffer[j] = q_0;
                        q_0 = _mm256_sub_ps(s_0, q_0);
                        X_0 = _mm256_add_ps(X_0, q_0);
                      }
                      s_buffer[j] = _mm256_add_ps(s_buffer[j], _mm256_or_ps(X_0, blp_mask_tmp));
                      X += (incX * (N_block - i)), Y += (N_block - i);
                    }
                  }
                }else{
                  if(smindex0(manZ)){
                    compression_0 = _mm256_set1_ps(idxd_SMCOMPRESSION);
                    expansion_0 = _mm256_set1_ps(idxd_SMEXPANSION * 0.5);
                    for(i = 0; i + 8 <= N_block; i += 8, X += (incX * 8), Y += (incY * 8)){
                      X_0 = _mm256_set_ps(X[(incX * 7)], X[(incX * 6)], X[(incX * 5)], X[(incX * 4)], X[(incX * 3)], X[(incX * 2)], X[incX], X[0]);
                      Y_0 = _mm256_set_ps(Y[(incY * 7)], Y[(incY * 6)], Y[(incY * 5)], Y[(incY * 4)], Y[(incY * 3)], Y[(incY * 2)], Y[incY], Y[0]);
                      X_0 = _mm256_mul_ps(X_0, Y_0);

                      s_0 = s_buffer[0];
                      q_0 = _mm256_add_ps(s_0, _mm256_or_ps(_mm256_mul_ps(X_0, compression_0), blp_mask_tmp));
                      s_buffer[0] = q_0;
                      q_0 = _mm256_mul_ps(_mm256_sub_ps(s_0, q_0), expansion_0);
                      X_0 = _mm256_add_ps(_mm256_add_ps(X_0, q_0), q_0);
                      for(j = 1; j < fold - 1; j++){
                        s_0 = s_buffer[j];
                        q_0 = _mm256_add_ps(s_0, _mm256_or_ps(X_0, blp_mask_tmp));
                        s_buffer[j] = q_0;
                        q_0 = _mm256_sub_ps(s_0, q_0);
                        X_0 = _mm256_add_ps(X_0, q_0);
                      }
                      s_buffer[j] = _mm256_add_ps(s_buffer[j], _mm256_or_ps(X_0, blp_mask_tmp));
                    }
                    if(i < N_block){
                      X_0 = _mm256_set_ps(0, (N_block - i)>6?X[(incX * 6)]:0, (N_block - i)>5?X[(incX * 5)]:0, (N_block - i)>4?X[(incX * 4)]:0, (N_block - i)>3?X[(incX * 3)]:0, (N_block - i)>2?X[(incX * 2)]:0, (N_block - i)>1?X[incX]:0, X[0]);
                      Y_0 = _mm256_set_ps(0, (N_block - i)>6?Y[(incY * 6)]:0, (N_block - i)>5?Y[(incY * 5)]:0, (N_block - i)>4?Y[(incY * 4)]:0, (N_block - i)>3?Y[(incY * 3)]:0, (N_block - i)>2?Y[(incY * 2)]:0, (N_block - i)>1?Y[incY]:0, Y[0]);
                      X_0 = _mm256_mul_ps(X_0, Y_0);

                      s_0 = s_buffer[0];
                      q_0 = _mm256_add_ps(s_0, _mm256_or_ps(_mm256_mul_ps(X_0, compression_0), blp_mask_tmp));
                      s_buffer[0] = q_0;
                      q_0 = _mm256_mul_ps(_mm256_sub_ps(s_0, q_0), expansion_0);
                      X_0 = _mm256_add_ps(_mm256_add_ps(X_0, q_0), q_0);
                      for(j = 1; j < fold - 1; j++){
                        s_0 = s_buffer[j];
                        q_0 = _mm256_add_ps(s_0, _mm256_or_ps(X_0, blp_mask_tmp));
                        s_buffer[j] = q_0;
                        q_0 = _mm256_sub_ps(s_0, q_0);
                        X_0 = _mm256_add_ps(X_0, q_0);
                      }
                      s_buffer[j] = _mm256_add_ps(s_buffer[j], _mm256_or_ps(X_0, blp_mask_tmp));
                      X += (incX * (N_block - i)), Y += (incY * (N_block - i));
                    }
                  }else{
                    for(i = 0; i + 8 <= N_block; i += 8, X += (incX * 8), Y += (incY * 8)){
                      X_0 = _mm256_set_ps(X[(incX * 7)], X[(incX * 6)], X[(incX * 5)], X[(incX * 4)], X[(incX * 3)], X[(incX * 2)], X[incX], X[0]);
                      Y_0 = _mm256_set_ps(Y[(incY * 7)], Y[(incY * 6)], Y[(incY * 5)], Y[(incY * 4)], Y[(incY * 3)], Y[(incY * 2)], Y[incY], Y[0]);
                      X_0 = _mm256_mul_ps(X_0, Y_0);

                      for(j = 0; j < fold - 1; j++){
                        s_0 = s_buffer[j];
                        q_0 = _mm256_add_ps(s_0, _mm256_or_ps(X_0, blp_mask_tmp));
                        s_buffer[j] = q_0;
                        q_0 = _mm256_sub_ps(s_0, q_0);
                        X_0 = _mm256_add_ps(X_0, q_0);
                      }
                      s_buffer[j] = _mm256_add_ps(s_buffer[j], _mm256_or_ps(X_0, blp_mask_tmp));
                    }
                    if(i < N_block){
                      X_0 = _mm256_set_ps(0, (N_block - i)>6?X[(incX * 6)]:0, (N_block - i)>5?X[(incX * 5)]:0, (N_block - i)>4?X[(incX * 4)]:0, (N_block - i)>3?X[(incX * 3)]:0, (N_block - i)>2?X[(incX * 2)]:0, (N_block - i)>1?X[incX]:0, X[0]);
                      Y_0 = _mm256_set_ps(0, (N_block - i)>6?Y[(incY * 6)]:0, (N_block - i)>5?Y[(incY * 5)]:0, (N_block - i)>4?Y[(incY * 4)]:0, (N_block - i)>3?Y[(incY * 3)]:0, (N_block - i)>2?Y[(incY * 2)]:0, (N_block - i)>1?Y[incY]:0, Y[0]);
                      X_0 = _mm256_mul_ps(X_0, Y_0);

                      for(j = 0; j < fold - 1; j++){
                        s_0 = s_buffer[j];
                        q_0 = _mm256_add_ps(s_0, _mm256_or_ps(X_0, blp_mask_tmp));
                        s_buffer[j] = q_0;
                        q_0 = _mm256_sub_ps(s_0, q_0);
                        X_0 = _mm256_add_ps(X_0, q_0);
                      }
                      s_buffer[j] = _mm256_add_ps(s_buffer[j], _mm256_or_ps(X_0, blp_mask_tmp));
                      X += (incX * (N_block - i)), Y += (incY * (N_block - i));
                    }
                  }
                }
              }

              for(j = 0; j < fold; j += 1){
                s_buffer[j] = _mm256_sub_ps(s_buffer[j], _mm256_set_ps(manZ[(incmanZ * j)], manZ[(incmanZ * j)], manZ[(incmanZ * j)], manZ[(incmanZ * j)], manZ[(incmanZ * j)], manZ[(incmanZ * j)], manZ[(incmanZ * j)], 0));
                _mm256_store_ps(cons_buffer_tmp, s_buffer[j]);
                manZ[(incmanZ * j)] = cons_buffer_tmp[0] + cons_buffer_tmp[1] + cons_buffer_tmp[2] + cons_buffer_tmp[3] + cons_buffer_tmp[4] + cons_buffer_tmp[5] + cons_buffer_tmp[6] + cons_buffer_tmp[7];
              }

              if(SIMD_daz_ftz_new_tmp != SIMD_daz_ftz_old_tmp){
                _mm_setcsr(SIMD_daz_ftz_old_tmp);
              }
            }
            break;
        }

      #elif defined(__SSE2__)
        __m128 blp_mask_tmp;
        {
          __m128 tmp;
          blp_mask_tmp = _mm_set1_ps(1.0);
          tmp = _mm_set1_ps(1.0 + (FLT_EPSILON * 1.0001));
          blp_mask_tmp = _mm_xor_ps(blp_mask_tmp, tmp);
        }
        __m128 cons_tmp; (void)cons_tmp;
        float cons_buffer_tmp[4] __attribute__((aligned(16))); (void)cons_buffer_tmp;
        unsigned int SIMD_daz_ftz_old_tmp = 0;
        unsigned int SIMD_daz_ftz_new_tmp = 0;


        switch(fold){
          case 3:
            {
              int i;
              __m128 X_0;
              __m128 Y_0;
              __m128 compression_0;
              __m128 expansion_0;
              __m128 q_0;
              __m128 s_0_0;
              __m128 s_1_0;
              __m128 s_2_0;

              s_0_0 = _mm_load1_ps(manZ);
              s_1_0 = _mm_load1_ps(manZ + incmanZ);
              s_2_0 = _mm_load1_ps(manZ + (incmanZ * 2));

              if(incX == 1){
                if(incY == 1){
                  if(smindex0(manZ)){
                    compression_0 = _mm_set1_ps(idxd_SMCOMPRESSION);
                    expansion_0 = _mm_set1_ps(idxd_SMEXPANSION * 0.5);
                    for(i = 0; i + 4 <= N_block; i += 4, X += 4, Y += 4){
                      X_0 = _mm_loadu_ps(X);
                      Y_0 = _mm_loadu_ps(Y);
                      X_0 = _mm_mul_ps(X_0, Y_0);

                      q_0 = s_0_0;
                      s_0_0 = _mm_add_ps(s_0_0, _mm_or_ps(_mm_mul_ps(X_0, compression_0), blp_mask_tmp));
                      q_0 = _mm_mul_ps(_mm_sub_ps(q_0, s_0_0), expansion_0);
                      X_0 = _mm_add_ps(_mm_add_ps(X_0, q_0), q_0);
                      q_0 = s_1_0;
                      s_1_0 = _mm_add_ps(s_1_0, _mm_or_ps(X_0, blp_mask_tmp));
                      q_0 = _mm_sub_ps(q_0, s_1_0);
                      X_0 = _mm_add_ps(X_0, q_0);
                      s_2_0 = _mm_add_ps(s_2_0, _mm_or_ps(X_0, blp_mask_tmp));
                    }
                    if(i < N_block){
                      X_0 = _mm_set_ps(0, (N_block - i)>2?X[2]:0, (N_block - i)>1?X[1]:0, X[0]);
                      Y_0 = _mm_set_ps(0, (N_block - i)>2?Y[2]:0, (N_block - i)>1?Y[1]:0, Y[0]);
                      X_0 = _mm_mul_ps(X_0, Y_0);

                      q_0 = s_0_0;
                      s_0_0 = _mm_add_ps(s_0_0, _mm_or_ps(_mm_mul_ps(X_0, compression_0), blp_mask_tmp));
                      q_0 = _mm_mul_ps(_mm_sub_ps(q_0, s_0_0), expansion_0);
                      X_0 = _mm_add_ps(_mm_add_ps(X_0, q_0), q_0);
                      q_0 = s_1_0;
                      s_1_0 = _mm_add_ps(s_1_0, _mm_or_ps(X_0, blp_mask_tmp));
                      q_0 = _mm_sub_ps(q_0, s_1_0);
                      X_0 = _mm_add_ps(X_0, q_0);
                      s_2_0 = _mm_add_ps(s_2_0, _mm_or_ps(X_0, blp_mask_tmp));
                      X += (N_block - i), Y += (N_block - i);
                    }
                  }else{
                    for(i = 0; i + 4 <= N_block; i += 4, X += 4, Y += 4){
                      X_0 = _mm_loadu_ps(X);
                      Y_0 = _mm_loadu_ps(Y);
                      X_0 = _mm_mul_ps(X_0, Y_0);

                      q_0 = s_0_0;
                      s_0_0 = _mm_add_ps(s_0_0, _mm_or_ps(X_0, blp_mask_tmp));
                      q_0 = _mm_sub_ps(q_0, s_0_0);
                      X_0 = _mm_add_ps(X_0, q_0);
                      q_0 = s_1_0;
                      s_1_0 = _mm_add_ps(s_1_0, _mm_or_ps(X_0, blp_mask_tmp));
                      q_0 = _mm_sub_ps(q_0, s_1_0);
                      X_0 = _mm_add_ps(X_0, q_0);
                      s_2_0 = _mm_add_ps(s_2_0, _mm_or_ps(X_0, blp_mask_tmp));
                    }
                    if(i < N_block){
                      X_0 = _mm_set_ps(0, (N_block - i)>2?X[2]:0, (N_block - i)>1?X[1]:0, X[0]);
                      Y_0 = _mm_set_ps(0, (N_block - i)>2?Y[2]:0, (N_block - i)>1?Y[1]:0, Y[0]);
                      X_0 = _mm_mul_ps(X_0, Y_0);

                      q_0 = s_0_0;
                      s_0_0 = _mm_add_ps(s_0_0, _mm_or_ps(X_0, blp_mask_tmp));
                      q_0 = _mm_sub_ps(q_0, s_0_0);
                      X_0 = _mm_add_ps(X_0, q_0);
                      q_0 = s_1_0;
                      s_1_0 = _mm_add_ps(s_1_0, _mm_or_ps(X_0, blp_mask_tmp));
                      q_0 = _mm_sub_ps(q_0, s_1_0);
                      X_0 = _mm_add_ps(X_0, q_0);
                      s_2_0 = _mm_add_ps(s_2_0, _mm_or_ps(X_0, blp_mask_tmp));
                      X += (N_block - i), Y += (N_block - i);
                    }
                  }
                }else{
                  if(smindex0(manZ)){
                    compression_0 = _mm_set1_ps(idxd_SMCOMPRESSION);
                    expansion_0 = _mm_set1_ps(idxd_SMEXPANSION * 0.5);
                    for(i = 0; i + 4 <= N_block; i += 4, X += 4, Y += (incY * 4)){
                      X_0 = _mm_loadu_ps(X);
                      Y_0 = _mm_set_ps(Y[(incY * 3)], Y[(incY * 2)], Y[incY], Y[0]);
                      X_0 = _mm_mul_ps(X_0, Y_0);

                      q_0 = s_0_0;
                      s_0_0 = _mm_add_ps(s_0_0, _mm_or_ps(_mm_mul_ps(X_0, compression_0), blp_mask_tmp));
                      q_0 = _mm_mul_ps(_mm_sub_ps(q_0, s_0_0), expansion_0);
                      X_0 = _mm_add_ps(_mm_add_ps(X_0, q_0), q_0);
                      q_0 = s_1_0;
                      s_1_0 = _mm_add_ps(s_1_0, _mm_or_ps(X_0, blp_mask_tmp));
                      q_0 = _mm_sub_ps(q_0, s_1_0);
                      X_0 = _mm_add_ps(X_0, q_0);
                      s_2_0 = _mm_add_ps(s_2_0, _mm_or_ps(X_0, blp_mask_tmp));
                    }
                    if(i < N_block){
                      X_0 = _mm_set_ps(0, (N_block - i)>2?X[2]:0, (N_block - i)>1?X[1]:0, X[0]);
                      Y_0 = _mm_set_ps(0, (N_block - i)>2?Y[(incY * 2)]:0, (N_block - i)>1?Y[incY]:0, Y[0]);
                      X_0 = _mm_mul_ps(X_0, Y_0);

                      q_0 = s_0_0;
                      s_0_0 = _mm_add_ps(s_0_0, _mm_or_ps(_mm_mul_ps(X_0, compression_0), blp_mask_tmp));
                      q_0 = _mm_mul_ps(_mm_sub_ps(q_0, s_0_0), expansion_0);
                      X_0 = _mm_add_ps(_mm_add_ps(X_0, q_0), q_0);
                      q_0 = s_1_0;
                      s_1_0 = _mm_add_ps(s_1_0, _mm_or_ps(X_0, blp_mask_tmp));
                      q_0 = _mm_sub_ps(q_0, s_1_0);
                      X_0 = _mm_add_ps(X_0, q_0);
                      s_2_0 = _mm_add_ps(s_2_0, _mm_or_ps(X_0, blp_mask_tmp));
                      X += (N_block - i), Y += (incY * (N_block - i));
                    }
                  }else{
                    for(i = 0; i + 4 <= N_block; i += 4, X += 4, Y += (incY * 4)){
                      X_0 = _mm_loadu_ps(X);
                      Y_0 = _mm_set_ps(Y[(incY * 3)], Y[(incY * 2)], Y[incY], Y[0]);
                      X_0 = _mm_mul_ps(X_0, Y_0);

                      q_0 = s_0_0;
                      s_0_0 = _mm_add_ps(s_0_0, _mm_or_ps(X_0, blp_mask_tmp));
                      q_0 = _mm_sub_ps(q_0, s_0_0);
                      X_0 = _mm_add_ps(X_0, q_0);
                      q_0 = s_1_0;
                      s_1_0 = _mm_add_ps(s_1_0, _mm_or_ps(X_0, blp_mask_tmp));
                      q_0 = _mm_sub_ps(q_0, s_1_0);
                      X_0 = _mm_add_ps(X_0, q_0);
                      s_2_0 = _mm_add_ps(s_2_0, _mm_or_ps(X_0, blp_mask_tmp));
                    }
                    if(i < N_block){
                      X_0 = _mm_set_ps(0, (N_block - i)>2?X[2]:0, (N_block - i)>1?X[1]:0, X[0]);
                      Y_0 = _mm_set_ps(0, (N_block - i)>2?Y[(incY * 2)]:0, (N_block - i)>1?Y[incY]:0, Y[0]);
                      X_0 = _mm_mul_ps(X_0, Y_0);

                      q_0 = s_0_0;
                      s_0_0 = _mm_add_ps(s_0_0, _mm_or_ps(X_0, blp_mask_tmp));
                      q_0 = _mm_sub_ps(q_0, s_0_0);
                      X_0 = _mm_add_ps(X_0, q_0);
                      q_0 = s_1_0;
                      s_1_0 = _mm_add_ps(s_1_0, _mm_or_ps(X_0, blp_mask_tmp));
                      q_0 = _mm_sub_ps(q_0, s_1_0);
                      X_0 = _mm_add_ps(X_0, q_0);
                      s_2_0 = _mm_add_ps(s_2_0, _mm_or_ps(X_0, blp_mask_tmp));
                      X += (N_block - i), Y += (incY * (N_block - i));
                    }
                  }
                }
              }else{
                if(incY == 1){
                  if(smindex0(manZ)){
                    compression_0 = _mm_set1_ps(idxd_SMCOMPRESSION);
                    expansion_0 = _mm_set1_ps(idxd_SMEXPANSION * 0.5);
                    for(i = 0; i + 4 <= N_block; i += 4, X += (incX * 4), Y += 4){
                      X_0 = _mm_set_ps(X[(incX * 3)], X[(incX * 2)], X[incX], X[0]);
                      Y_0 = _mm_loadu_ps(Y);
                      X_0 = _mm_mul_ps(X_0, Y_0);

                      q_0 = s_0_0;
                      s_0_0 = _mm_add_ps(s_0_0, _mm_or_ps(_mm_mul_ps(X_0, compression_0), blp_mask_tmp));
                      q_0 = _mm_mul_ps(_mm_sub_ps(q_0, s_0_0), expansion_0);
                      X_0 = _mm_add_ps(_mm_add_ps(X_0, q_0), q_0);
                      q_0 = s_1_0;
                      s_1_0 = _mm_add_ps(s_1_0, _mm_or_ps(X_0, blp_mask_tmp));
                      q_0 = _mm_sub_ps(q_0, s_1_0);
                      X_0 = _mm_add_ps(X_0, q_0);
                      s_2_0 = _mm_add_ps(s_2_0, _mm_or_ps(X_0, blp_mask_tmp));
                    }
                    if(i < N_block){
                      X_0 = _mm_set_ps(0, (N_block - i)>2?X[(incX * 2)]:0, (N_block - i)>1?X[incX]:0, X[0]);
                      Y_0 = _mm_set_ps(0, (N_block - i)>2?Y[2]:0, (N_block - i)>1?Y[1]:0, Y[0]);
                      X_0 = _mm_mul_ps(X_0, Y_0);

                      q_0 = s_0_0;
                      s_0_0 = _mm_add_ps(s_0_0, _mm_or_ps(_mm_mul_ps(X_0, compression_0), blp_mask_tmp));
                      q_0 = _mm_mul_ps(_mm_sub_ps(q_0, s_0_0), expansion_0);
                      X_0 = _mm_add_ps(_mm_add_ps(X_0, q_0), q_0);
                      q_0 = s_1_0;
                      s_1_0 = _mm_add_ps(s_1_0, _mm_or_ps(X_0, blp_mask_tmp));
                      q_0 = _mm_sub_ps(q_0, s_1_0);
                      X_0 = _mm_add_ps(X_0, q_0);
                      s_2_0 = _mm_add_ps(s_2_0, _mm_or_ps(X_0, blp_mask_tmp));
                      X += (incX * (N_block - i)), Y += (N_block - i);
                    }
                  }else{
                    for(i = 0; i + 4 <= N_block; i += 4, X += (incX * 4), Y += 4){
                      X_0 = _mm_set_ps(X[(incX * 3)], X[(incX * 2)], X[incX], X[0]);
                      Y_0 = _mm_loadu_ps(Y);
                      X_0 = _mm_mul_ps(X_0, Y_0);

                      q_0 = s_0_0;
                      s_0_0 = _mm_add_ps(s_0_0, _mm_or_ps(X_0, blp_mask_tmp));
                      q_0 = _mm_sub_ps(q_0, s_0_0);
                      X_0 = _mm_add_ps(X_0, q_0);
                      q_0 = s_1_0;
                      s_1_0 = _mm_add_ps(s_1_0, _mm_or_ps(X_0, blp_mask_tmp));
                      q_0 = _mm_sub_ps(q_0, s_1_0);
                      X_0 = _mm_add_ps(X_0, q_0);
                      s_2_0 = _mm_add_ps(s_2_0, _mm_or_ps(X_0, blp_mask_tmp));
                    }
                    if(i < N_block){
                      X_0 = _mm_set_ps(0, (N_block - i)>2?X[(incX * 2)]:0, (N_block - i)>1?X[incX]:0, X[0]);
                      Y_0 = _mm_set_ps(0, (N_block - i)>2?Y[2]:0, (N_block - i)>1?Y[1]:0, Y[0]);
                      X_0 = _mm_mul_ps(X_0, Y_0);

                      q_0 = s_0_0;
                      s_0_0 = _mm_add_ps(s_0_0, _mm_or_ps(X_0, blp_mask_tmp));
                      q_0 = _mm_sub_ps(q_0, s_0_0);
                      X_0 = _mm_add_ps(X_0, q_0);
                      q_0 = s_1_0;
                      s_1_0 = _mm_add_ps(s_1_0, _mm_or_ps(X_0, blp_mask_tmp));
                      q_0 = _mm_sub_ps(q_0, s_1_0);
                      X_0 = _mm_add_ps(X_0, q_0);
                      s_2_0 = _mm_add_ps(s_2_0, _mm_or_ps(X_0, blp_mask_tmp));
                      X += (incX * (N_block - i)), Y += (N_block - i);
                    }
                  }
                }else{
                  if(smindex0(manZ)){
                    compression_0 = _mm_set1_ps(idxd_SMCOMPRESSION);
                    expansion_0 = _mm_set1_ps(idxd_SMEXPANSION * 0.5);
                    for(i = 0; i + 4 <= N_block; i += 4, X += (incX * 4), Y += (incY * 4)){
                      X_0 = _mm_set_ps(X[(incX * 3)], X[(incX * 2)], X[incX], X[0]);
                      Y_0 = _mm_set_ps(Y[(incY * 3)], Y[(incY * 2)], Y[incY], Y[0]);
                      X_0 = _mm_mul_ps(X_0, Y_0);

                      q_0 = s_0_0;
                      s_0_0 = _mm_add_ps(s_0_0, _mm_or_ps(_mm_mul_ps(X_0, compression_0), blp_mask_tmp));
                      q_0 = _mm_mul_ps(_mm_sub_ps(q_0, s_0_0), expansion_0);
                      X_0 = _mm_add_ps(_mm_add_ps(X_0, q_0), q_0);
                      q_0 = s_1_0;
                      s_1_0 = _mm_add_ps(s_1_0, _mm_or_ps(X_0, blp_mask_tmp));
                      q_0 = _mm_sub_ps(q_0, s_1_0);
                      X_0 = _mm_add_ps(X_0, q_0);
                      s_2_0 = _mm_add_ps(s_2_0, _mm_or_ps(X_0, blp_mask_tmp));
                    }
                    if(i < N_block){
                      X_0 = _mm_set_ps(0, (N_block - i)>2?X[(incX * 2)]:0, (N_block - i)>1?X[incX]:0, X[0]);
                      Y_0 = _mm_set_ps(0, (N_block - i)>2?Y[(incY * 2)]:0, (N_block - i)>1?Y[incY]:0, Y[0]);
                      X_0 = _mm_mul_ps(X_0, Y_0);

                      q_0 = s_0_0;
                      s_0_0 = _mm_add_ps(s_0_0, _mm_or_ps(_mm_mul_ps(X_0, compression_0), blp_mask_tmp));
                      q_0 = _mm_mul_ps(_mm_sub_ps(q_0, s_0_0), expansion_0);
                      X_0 = _mm_add_ps(_mm_add_ps(X_0, q_0), q_0);
                      q_0 = s_1_0;
                      s_1_0 = _mm_add_ps(s_1_0, _mm_or_ps(X_0, blp_mask_tmp));
                      q_0 = _mm_sub_ps(q_0, s_1_0);
                      X_0 = _mm_add_ps(X_0, q_0);
                      s_2_0 = _mm_add_ps(s_2_0, _mm_or_ps(X_0, blp_mask_tmp));
                      X += (incX * (N_block - i)), Y += (incY * (N_block - i));
                    }
                  }else{
                    for(i = 0; i + 4 <= N_block; i += 4, X += (incX * 4), Y += (incY * 4)){
                      X_0 = _mm_set_ps(X[(incX * 3)], X[(incX * 2)], X[incX], X[0]);
                      Y_0 = _mm_set_ps(Y[(incY * 3)], Y[(incY * 2)], Y[incY], Y[0]);
                      X_0 = _mm_mul_ps(X_0, Y_0);

                      q_0 = s_0_0;
                      s_0_0 = _mm_add_ps(s_0_0, _mm_or_ps(X_0, blp_mask_tmp));
                      q_0 = _mm_sub_ps(q_0, s_0_0);
                      X_0 = _mm_add_ps(X_0, q_0);
                      q_0 = s_1_0;
                      s_1_0 = _mm_add_ps(s_1_0, _mm_or_ps(X_0, blp_mask_tmp));
                      q_0 = _mm_sub_ps(q_0, s_1_0);
                      X_0 = _mm_add_ps(X_0, q_0);
                      s_2_0 = _mm_add_ps(s_2_0, _mm_or_ps(X_0, blp_mask_tmp));
                    }
                    if(i < N_block){
                      X_0 = _mm_set_ps(0, (N_block - i)>2?X[(incX * 2)]:0, (N_block - i)>1?X[incX]:0, X[0]);
                      Y_0 = _mm_set_ps(0, (N_block - i)>2?Y[(incY * 2)]:0, (N_block - i)>1?Y[incY]:0, Y[0]);
                      X_0 = _mm_mul_ps(X_0, Y_0);

                      q_0 = s_0_0;
                      s_0_0 = _mm_add_ps(s_0_0, _mm_or_ps(X_0, blp_mask_tmp));
                      q_0 = _mm_sub_ps(q_0, s_0_0);
                      X_0 = _mm_add_ps(X_0, q_0);
                      q_0 = s_1_0;
                      s_1_0 = _mm_add_ps(s_1_0, _mm_or_ps(X_0, blp_mask_tmp));
                      q_0 = _mm_sub_ps(q_0, s_1_0);
                      X_0 = _mm_add_ps(X_0, q_0);
                      s_2_0 = _mm_add_ps(s_2_0, _mm_or_ps(X_0, blp_mask_tmp));
                      X += (incX * (N_block - i)), Y += (incY * (N_block - i));
                    }
                  }
                }
              }

              s_0_0 = _mm_sub_ps(s_0_0, _mm_set_ps(manZ[0], manZ[0], manZ[0], 0));
              _mm_store_ps(cons_buffer_tmp, s_0_0);
              manZ[0] = cons_buffer_tmp[0] + cons_buffer_tmp[1] + cons_buffer_tmp[2] + cons_buffer_tmp[3];
              s_1_0 = _mm_sub_ps(s_1_0, _mm_set_ps(manZ[incmanZ], manZ[incmanZ], manZ[incmanZ], 0));
              _mm_store_ps(cons_buffer_tmp, s_1_0);
              manZ[incmanZ] = cons_buffer_tmp[0] + cons_buffer_tmp[1] + cons_buffer_tmp[2] + cons_buffer_tmp[3];
              s_2_0 = _mm_sub_ps(s_2_0, _mm_set_ps(manZ[(incmanZ * 2)], manZ[(incmanZ * 2)], manZ[(incmanZ * 2)], 0));
              _mm_store_ps(cons_buffer_tmp, s_2_0);
              manZ[(incmanZ * 2)] = cons_buffer_tmp[0] + cons_buffer_tmp[1] + cons_buffer_tmp[2] + cons_buffer_tmp[3];

              if(SIMD_daz_ftz_new_tmp != SIMD_daz_ftz_old_tmp){
                _mm_setcsr(SIMD_daz_ftz_old_tmp);
              }
            }
            break;
          default:
            {
              int i, j;
              __m128 X_0;
              __m128 Y_0;
              __m128 compression_0;
              __m128 expansion_0;
              __m128 q_0;
              __m128 s_0;
              __m128 s_buffer[SIMAXFOLD];

              for(j = 0; j < fold; j += 1){
                s_buffer[j] = _mm_load1_ps(manZ + (incmanZ * j));
              }

              if(incX == 1){
                if(incY == 1){
                  if(smindex0(manZ)){
                    compression_0 = _mm_set1_ps(idxd_SMCOMPRESSION);
                    expansion_0 = _mm_set1_ps(idxd_SMEXPANSION * 0.5);
                    for(i = 0; i + 4 <= N_block; i += 4, X += 4, Y += 4){
                      X_0 = _mm_loadu_ps(X);
                      Y_0 = _mm_loadu_ps(Y);
                      X_0 = _mm_mul_ps(X_0, Y_0);

                      s_0 = s_buffer[0];
                      q_0 = _mm_add_ps(s_0, _mm_or_ps(_mm_mul_ps(X_0, compression_0), blp_mask_tmp));
                      s_buffer[0] = q_0;
                      q_0 = _mm_mul_ps(_mm_sub_ps(s_0, q_0), expansion_0);
                      X_0 = _mm_add_ps(_mm_add_ps(X_0, q_0), q_0);
                      for(j = 1; j < fold - 1; j++){
                        s_0 = s_buffer[j];
                        q_0 = _mm_add_ps(s_0, _mm_or_ps(X_0, blp_mask_tmp));
                        s_buffer[j] = q_0;
                        q_0 = _mm_sub_ps(s_0, q_0);
                        X_0 = _mm_add_ps(X_0, q_0);
                      }
                      s_buffer[j] = _mm_add_ps(s_buffer[j], _mm_or_ps(X_0, blp_mask_tmp));
                    }
                    if(i < N_block){
                      X_0 = _mm_set_ps(0, (N_block - i)>2?X[2]:0, (N_block - i)>1?X[1]:0, X[0]);
                      Y_0 = _mm_set_ps(0, (N_block - i)>2?Y[2]:0, (N_block - i)>1?Y[1]:0, Y[0]);
                      X_0 = _mm_mul_ps(X_0, Y_0);

                      s_0 = s_buffer[0];
                      q_0 = _mm_add_ps(s_0, _mm_or_ps(_mm_mul_ps(X_0, compression_0), blp_mask_tmp));
                      s_buffer[0] = q_0;
                      q_0 = _mm_mul_ps(_mm_sub_ps(s_0, q_0), expansion_0);
                      X_0 = _mm_add_ps(_mm_add_ps(X_0, q_0), q_0);
                      for(j = 1; j < fold - 1; j++){
                        s_0 = s_buffer[j];
                        q_0 = _mm_add_ps(s_0, _mm_or_ps(X_0, blp_mask_tmp));
                        s_buffer[j] = q_0;
                        q_0 = _mm_sub_ps(s_0, q_0);
                        X_0 = _mm_add_ps(X_0, q_0);
                      }
                      s_buffer[j] = _mm_add_ps(s_buffer[j], _mm_or_ps(X_0, blp_mask_tmp));
                      X += (N_block - i), Y += (N_block - i);
                    }
                  }else{
                    for(i = 0; i + 4 <= N_block; i += 4, X += 4, Y += 4){
                      X_0 = _mm_loadu_ps(X);
                      Y_0 = _mm_loadu_ps(Y);
                      X_0 = _mm_mul_ps(X_0, Y_0);

                      for(j = 0; j < fold - 1; j++){
                        s_0 = s_buffer[j];
                        q_0 = _mm_add_ps(s_0, _mm_or_ps(X_0, blp_mask_tmp));
                        s_buffer[j] = q_0;
                        q_0 = _mm_sub_ps(s_0, q_0);
                        X_0 = _mm_add_ps(X_0, q_0);
                      }
                      s_buffer[j] = _mm_add_ps(s_buffer[j], _mm_or_ps(X_0, blp_mask_tmp));
                    }
                    if(i < N_block){
                      X_0 = _mm_set_ps(0, (N_block - i)>2?X[2]:0, (N_block - i)>1?X[1]:0, X[0]);
                      Y_0 = _mm_set_ps(0, (N_block - i)>2?Y[2]:0, (N_block - i)>1?Y[1]:0, Y[0]);
                      X_0 = _mm_mul_ps(X_0, Y_0);

                      for(j = 0; j < fold - 1; j++){
                        s_0 = s_buffer[j];
                        q_0 = _mm_add_ps(s_0, _mm_or_ps(X_0, blp_mask_tmp));
                        s_buffer[j] = q_0;
                        q_0 = _mm_sub_ps(s_0, q_0);
                        X_0 = _mm_add_ps(X_0, q_0);
                      }
                      s_buffer[j] = _mm_add_ps(s_buffer[j], _mm_or_ps(X_0, blp_mask_tmp));
                      X += (N_block - i), Y += (N_block - i);
                    }
                  }
                }else{
                  if(smindex0(manZ)){
                    compression_0 = _mm_set1_ps(idxd_SMCOMPRESSION);
                    expansion_0 = _mm_set1_ps(idxd_SMEXPANSION * 0.5);
                    for(i = 0; i + 4 <= N_block; i += 4, X += 4, Y += (incY * 4)){
                      X_0 = _mm_loadu_ps(X);
                      Y_0 = _mm_set_ps(Y[(incY * 3)], Y[(incY * 2)], Y[incY], Y[0]);
                      X_0 = _mm_mul_ps(X_0, Y_0);

                      s_0 = s_buffer[0];
                      q_0 = _mm_add_ps(s_0, _mm_or_ps(_mm_mul_ps(X_0, compression_0), blp_mask_tmp));
                      s_buffer[0] = q_0;
                      q_0 = _mm_mul_ps(_mm_sub_ps(s_0, q_0), expansion_0);
                      X_0 = _mm_add_ps(_mm_add_ps(X_0, q_0), q_0);
                      for(j = 1; j < fold - 1; j++){
                        s_0 = s_buffer[j];
                        q_0 = _mm_add_ps(s_0, _mm_or_ps(X_0, blp_mask_tmp));
                        s_buffer[j] = q_0;
                        q_0 = _mm_sub_ps(s_0, q_0);
                        X_0 = _mm_add_ps(X_0, q_0);
                      }
                      s_buffer[j] = _mm_add_ps(s_buffer[j], _mm_or_ps(X_0, blp_mask_tmp));
                    }
                    if(i < N_block){
                      X_0 = _mm_set_ps(0, (N_block - i)>2?X[2]:0, (N_block - i)>1?X[1]:0, X[0]);
                      Y_0 = _mm_set_ps(0, (N_block - i)>2?Y[(incY * 2)]:0, (N_block - i)>1?Y[incY]:0, Y[0]);
                      X_0 = _mm_mul_ps(X_0, Y_0);

                      s_0 = s_buffer[0];
                      q_0 = _mm_add_ps(s_0, _mm_or_ps(_mm_mul_ps(X_0, compression_0), blp_mask_tmp));
                      s_buffer[0] = q_0;
                      q_0 = _mm_mul_ps(_mm_sub_ps(s_0, q_0), expansion_0);
                      X_0 = _mm_add_ps(_mm_add_ps(X_0, q_0), q_0);
                      for(j = 1; j < fold - 1; j++){
                        s_0 = s_buffer[j];
                        q_0 = _mm_add_ps(s_0, _mm_or_ps(X_0, blp_mask_tmp));
                        s_buffer[j] = q_0;
                        q_0 = _mm_sub_ps(s_0, q_0);
                        X_0 = _mm_add_ps(X_0, q_0);
                      }
                      s_buffer[j] = _mm_add_ps(s_buffer[j], _mm_or_ps(X_0, blp_mask_tmp));
                      X += (N_block - i), Y += (incY * (N_block - i));
                    }
                  }else{
                    for(i = 0; i + 4 <= N_block; i += 4, X += 4, Y += (incY * 4)){
                      X_0 = _mm_loadu_ps(X);
                      Y_0 = _mm_set_ps(Y[(incY * 3)], Y[(incY * 2)], Y[incY], Y[0]);
                      X_0 = _mm_mul_ps(X_0, Y_0);

                      for(j = 0; j < fold - 1; j++){
                        s_0 = s_buffer[j];
                        q_0 = _mm_add_ps(s_0, _mm_or_ps(X_0, blp_mask_tmp));
                        s_buffer[j] = q_0;
                        q_0 = _mm_sub_ps(s_0, q_0);
                        X_0 = _mm_add_ps(X_0, q_0);
                      }
                      s_buffer[j] = _mm_add_ps(s_buffer[j], _mm_or_ps(X_0, blp_mask_tmp));
                    }
                    if(i < N_block){
                      X_0 = _mm_set_ps(0, (N_block - i)>2?X[2]:0, (N_block - i)>1?X[1]:0, X[0]);
                      Y_0 = _mm_set_ps(0, (N_block - i)>2?Y[(incY * 2)]:0, (N_block - i)>1?Y[incY]:0, Y[0]);
                      X_0 = _mm_mul_ps(X_0, Y_0);

                      for(j = 0; j < fold - 1; j++){
                        s_0 = s_buffer[j];
                        q_0 = _mm_add_ps(s_0, _mm_or_ps(X_0, blp_mask_tmp));
                        s_buffer[j] = q_0;
                        q_0 = _mm_sub_ps(s_0, q_0);
                        X_0 = _mm_add_ps(X_0, q_0);
                      }
                      s_buffer[j] = _mm_add_ps(s_buffer[j], _mm_or_ps(X_0, blp_mask_tmp));
                      X += (N_block - i), Y += (incY * (N_block - i));
                    }
                  }
                }
              }else{
                if(incY == 1){
                  if(smindex0(manZ)){
                    compression_0 = _mm_set1_ps(idxd_SMCOMPRESSION);
                    expansion_0 = _mm_set1_ps(idxd_SMEXPANSION * 0.5);
                    for(i = 0; i + 4 <= N_block; i += 4, X += (incX * 4), Y += 4){
                      X_0 = _mm_set_ps(X[(incX * 3)], X[(incX * 2)], X[incX], X[0]);
                      Y_0 = _mm_loadu_ps(Y);
                      X_0 = _mm_mul_ps(X_0, Y_0);

                      s_0 = s_buffer[0];
                      q_0 = _mm_add_ps(s_0, _mm_or_ps(_mm_mul_ps(X_0, compression_0), blp_mask_tmp));
                      s_buffer[0] = q_0;
                      q_0 = _mm_mul_ps(_mm_sub_ps(s_0, q_0), expansion_0);
                      X_0 = _mm_add_ps(_mm_add_ps(X_0, q_0), q_0);
                      for(j = 1; j < fold - 1; j++){
                        s_0 = s_buffer[j];
                        q_0 = _mm_add_ps(s_0, _mm_or_ps(X_0, blp_mask_tmp));
                        s_buffer[j] = q_0;
                        q_0 = _mm_sub_ps(s_0, q_0);
                        X_0 = _mm_add_ps(X_0, q_0);
                      }
                      s_buffer[j] = _mm_add_ps(s_buffer[j], _mm_or_ps(X_0, blp_mask_tmp));
                    }
                    if(i < N_block){
                      X_0 = _mm_set_ps(0, (N_block - i)>2?X[(incX * 2)]:0, (N_block - i)>1?X[incX]:0, X[0]);
                      Y_0 = _mm_set_ps(0, (N_block - i)>2?Y[2]:0, (N_block - i)>1?Y[1]:0, Y[0]);
                      X_0 = _mm_mul_ps(X_0, Y_0);

                      s_0 = s_buffer[0];
                      q_0 = _mm_add_ps(s_0, _mm_or_ps(_mm_mul_ps(X_0, compression_0), blp_mask_tmp));
                      s_buffer[0] = q_0;
                      q_0 = _mm_mul_ps(_mm_sub_ps(s_0, q_0), expansion_0);
                      X_0 = _mm_add_ps(_mm_add_ps(X_0, q_0), q_0);
                      for(j = 1; j < fold - 1; j++){
                        s_0 = s_buffer[j];
                        q_0 = _mm_add_ps(s_0, _mm_or_ps(X_0, blp_mask_tmp));
                        s_buffer[j] = q_0;
                        q_0 = _mm_sub_ps(s_0, q_0);
                        X_0 = _mm_add_ps(X_0, q_0);
                      }
                      s_buffer[j] = _mm_add_ps(s_buffer[j], _mm_or_ps(X_0, blp_mask_tmp));
                      X += (incX * (N_block - i)), Y += (N_block - i);
                    }
                  }else{
                    for(i = 0; i + 4 <= N_block; i += 4, X += (incX * 4), Y += 4){
                      X_0 = _mm_set_ps(X[(incX * 3)], X[(incX * 2)], X[incX], X[0]);
                      Y_0 = _mm_loadu_ps(Y);
                      X_0 = _mm_mul_ps(X_0, Y_0);

                      for(j = 0; j < fold - 1; j++){
                        s_0 = s_buffer[j];
                        q_0 = _mm_add_ps(s_0, _mm_or_ps(X_0, blp_mask_tmp));
                        s_buffer[j] = q_0;
                        q_0 = _mm_sub_ps(s_0, q_0);
                        X_0 = _mm_add_ps(X_0, q_0);
                      }
                      s_buffer[j] = _mm_add_ps(s_buffer[j], _mm_or_ps(X_0, blp_mask_tmp));
                    }
                    if(i < N_block){
                      X_0 = _mm_set_ps(0, (N_block - i)>2?X[(incX * 2)]:0, (N_block - i)>1?X[incX]:0, X[0]);
                      Y_0 = _mm_set_ps(0, (N_block - i)>2?Y[2]:0, (N_block - i)>1?Y[1]:0, Y[0]);
                      X_0 = _mm_mul_ps(X_0, Y_0);

                      for(j = 0; j < fold - 1; j++){
                        s_0 = s_buffer[j];
                        q_0 = _mm_add_ps(s_0, _mm_or_ps(X_0, blp_mask_tmp));
                        s_buffer[j] = q_0;
                        q_0 = _mm_sub_ps(s_0, q_0);
                        X_0 = _mm_add_ps(X_0, q_0);
                      }
                      s_buffer[j] = _mm_add_ps(s_buffer[j], _mm_or_ps(X_0, blp_mask_tmp));
                      X += (incX * (N_block - i)), Y += (N_block - i);
                    }
                  }
                }else{
                  if(smindex0(manZ)){
                    compression_0 = _mm_set1_ps(idxd_SMCOMPRESSION);
                    expansion_0 = _mm_set1_ps(idxd_SMEXPANSION * 0.5);
                    for(i = 0; i + 4 <= N_block; i += 4, X += (incX * 4), Y += (incY * 4)){
                      X_0 = _mm_set_ps(X[(incX * 3)], X[(incX * 2)], X[incX], X[0]);
                      Y_0 = _mm_set_ps(Y[(incY * 3)], Y[(incY * 2)], Y[incY], Y[0]);
                      X_0 = _mm_mul_ps(X_0, Y_0);

                      s_0 = s_buffer[0];
                      q_0 = _mm_add_ps(s_0, _mm_or_ps(_mm_mul_ps(X_0, compression_0), blp_mask_tmp));
                      s_buffer[0] = q_0;
                      q_0 = _mm_mul_ps(_mm_sub_ps(s_0, q_0), expansion_0);
                      X_0 = _mm_add_ps(_mm_add_ps(X_0, q_0), q_0);
                      for(j = 1; j < fold - 1; j++){
                        s_0 = s_buffer[j];
                        q_0 = _mm_add_ps(s_0, _mm_or_ps(X_0, blp_mask_tmp));
                        s_buffer[j] = q_0;
                        q_0 = _mm_sub_ps(s_0, q_0);
                        X_0 = _mm_add_ps(X_0, q_0);
                      }
                      s_buffer[j] = _mm_add_ps(s_buffer[j], _mm_or_ps(X_0, blp_mask_tmp));
                    }
                    if(i < N_block){
                      X_0 = _mm_set_ps(0, (N_block - i)>2?X[(incX * 2)]:0, (N_block - i)>1?X[incX]:0, X[0]);
                      Y_0 = _mm_set_ps(0, (N_block - i)>2?Y[(incY * 2)]:0, (N_block - i)>1?Y[incY]:0, Y[0]);
                      X_0 = _mm_mul_ps(X_0, Y_0);

                      s_0 = s_buffer[0];
                      q_0 = _mm_add_ps(s_0, _mm_or_ps(_mm_mul_ps(X_0, compression_0), blp_mask_tmp));
                      s_buffer[0] = q_0;
                      q_0 = _mm_mul_ps(_mm_sub_ps(s_0, q_0), expansion_0);
                      X_0 = _mm_add_ps(_mm_add_ps(X_0, q_0), q_0);
                      for(j = 1; j < fold - 1; j++){
                        s_0 = s_buffer[j];
                        q_0 = _mm_add_ps(s_0, _mm_or_ps(X_0, blp_mask_tmp));
                        s_buffer[j] = q_0;
                        q_0 = _mm_sub_ps(s_0, q_0);
                        X_0 = _mm_add_ps(X_0, q_0);
                      }
                      s_buffer[j] = _mm_add_ps(s_buffer[j], _mm_or_ps(X_0, blp_mask_tmp));
                      X += (incX * (N_block - i)), Y += (incY * (N_block - i));
                    }
                  }else{
                    for(i = 0; i + 4 <= N_block; i += 4, X += (incX * 4), Y += (incY * 4)){
                      X_0 = _mm_set_ps(X[(incX * 3)], X[(incX * 2)], X[incX], X[0]);
                      Y_0 = _mm_set_ps(Y[(incY * 3)], Y[(incY * 2)], Y[incY], Y[0]);
                      X_0 = _mm_mul_ps(X_0, Y_0);

                      for(j = 0; j < fold - 1; j++){
                        s_0 = s_buffer[j];
                        q_0 = _mm_add_ps(s_0, _mm_or_ps(X_0, blp_mask_tmp));
                        s_buffer[j] = q_0;
                        q_0 = _mm_sub_ps(s_0, q_0);
                        X_0 = _mm_add_ps(X_0, q_0);
                      }
                      s_buffer[j] = _mm_add_ps(s_buffer[j], _mm_or_ps(X_0, blp_mask_tmp));
                    }
                    if(i < N_block){
                      X_0 = _mm_set_ps(0, (N_block - i)>2?X[(incX * 2)]:0, (N_block - i)>1?X[incX]:0, X[0]);
                      Y_0 = _mm_set_ps(0, (N_block - i)>2?Y[(incY * 2)]:0, (N_block - i)>1?Y[incY]:0, Y[0]);
                      X_0 = _mm_mul_ps(X_0, Y_0);

                      for(j = 0; j < fold - 1; j++){
                        s_0 = s_buffer[j];
                        q_0 = _mm_add_ps(s_0, _mm_or_ps(X_0, blp_mask_tmp));
                        s_buffer[j] = q_0;
                        q_0 = _mm_sub_ps(s_0, q_0);
                        X_0 = _mm_add_ps(X_0, q_0);
                      }
                      s_buffer[j] = _mm_add_ps(s_buffer[j], _mm_or_ps(X_0, blp_mask_tmp));
                      X += (incX * (N_block - i)), Y += (incY * (N_block - i));
                    }
                  }
                }
              }

              for(j = 0; j < fold; j += 1){
                s_buffer[j] = _mm_sub_ps(s_buffer[j], _mm_set_ps(manZ[(incmanZ * j)], manZ[(incmanZ * j)], manZ[(incmanZ * j)], 0));
                _mm_store_ps(cons_buffer_tmp, s_buffer[j]);
                manZ[(incmanZ * j)] = cons_buffer_tmp[0] + cons_buffer_tmp[1] + cons_buffer_tmp[2] + cons_buffer_tmp[3];
              }

              if(SIMD_daz_ftz_new_tmp != SIMD_daz_ftz_old_tmp){
                _mm_setcsr(SIMD_daz_ftz_old_tmp);
              }
            }
            break;
        }

      #else
        int_float blp_tmp; (void)blp_tmp;
        float cons_tmp; (void)cons_tmp;


        switch(fold){
          case 3:
            {
              int i;
              float X_0;
              float Y_0;
              float compression_0;
              float expansion_0;
              float q_0;
              float s_0_0;
              float s_1_0;
              float s_2_0;

              s_0_0 = manZ[0];
              s_1_0 = manZ[incmanZ];
              s_2_0 = manZ[(incmanZ * 2)];

              if(incX == 1){
                if(incY == 1){
                  if(smindex0(manZ)){
                    compression_0 = idxd_SMCOMPRESSION;
                    expansion_0 = idxd_SMEXPANSION * 0.5;
                    for(i = 0; i + 1 <= N_block; i += 1, X += 1, Y += 1){
                      X_0 = X[0];
                      Y_0 = Y[0];
                      X_0 = X_0 * Y_0;

                      q_0 = s_0_0;
                      blp_tmp.f = X_0 * compression_0;
                      blp_tmp.i |= 1;
                      s_0_0 = s_0_0 + blp_tmp.f;
                      q_0 = q_0 - s_0_0 * expansion_0;
                      X_0 = X_0 + q_0 + q_0;
                      q_0 = s_1_0;
                      blp_tmp.f = X_0;
                      blp_tmp.i |= 1;
                      s_1_0 = s_1_0 + blp_tmp.f;
                      q_0 = q_0 - s_1_0;
                      X_0 = X_0 + q_0;
                      blp_tmp.f = X_0;
                      blp_tmp.i |= 1;
                      s_2_0 = s_2_0 + blp_tmp.f;
                    }
                  }else{
                    for(i = 0; i + 1 <= N_block; i += 1, X += 1, Y += 1){
                      X_0 = X[0];
                      Y_0 = Y[0];
                      X_0 = X_0 * Y_0;

                      q_0 = s_0_0;
                      blp_tmp.f = X_0;
                      blp_tmp.i |= 1;
                      s_0_0 = s_0_0 + blp_tmp.f;
                      q_0 = q_0 - s_0_0;
                      X_0 = X_0 + q_0;
                      q_0 = s_1_0;
                      blp_tmp.f = X_0;
                      blp_tmp.i |= 1;
                      s_1_0 = s_1_0 + blp_tmp.f;
                      q_0 = q_0 - s_1_0;
                      X_0 = X_0 + q_0;
                      blp_tmp.f = X_0;
                      blp_tmp.i |= 1;
                      s_2_0 = s_2_0 + blp_tmp.f;
                    }
                  }
                }else{
                  if(smindex0(manZ)){
                    compression_0 = idxd_SMCOMPRESSION;
                    expansion_0 = idxd_SMEXPANSION * 0.5;
                    for(i = 0; i + 1 <= N_block; i += 1, X += 1, Y += incY){
                      X_0 = X[0];
                      Y_0 = Y[0];
                      X_0 = X_0 * Y_0;

                      q_0 = s_0_0;
                      blp_tmp.f = X_0 * compression_0;
                      blp_tmp.i |= 1;
                      s_0_0 = s_0_0 + blp_tmp.f;
                      q_0 = q_0 - s_0_0 * expansion_0;
                      X_0 = X_0 + q_0 + q_0;
                      q_0 = s_1_0;
                      blp_tmp.f = X_0;
                      blp_tmp.i |= 1;
                      s_1_0 = s_1_0 + blp_tmp.f;
                      q_0 = q_0 - s_1_0;
                      X_0 = X_0 + q_0;
                      blp_tmp.f = X_0;
                      blp_tmp.i |= 1;
                      s_2_0 = s_2_0 + blp_tmp.f;
                    }
                  }else{
                    for(i = 0; i + 1 <= N_block; i += 1, X += 1, Y += incY){
                      X_0 = X[0];
                      Y_0 = Y[0];
                      X_0 = X_0 * Y_0;

                      q_0 = s_0_0;
                      blp_tmp.f = X_0;
                      blp_tmp.i |= 1;
                      s_0_0 = s_0_0 + blp_tmp.f;
                      q_0 = q_0 - s_0_0;
                      X_0 = X_0 + q_0;
                      q_0 = s_1_0;
                      blp_tmp.f = X_0;
                      blp_tmp.i |= 1;
                      s_1_0 = s_1_0 + blp_tmp.f;
                      q_0 = q_0 - s_1_0;
                      X_0 = X_0 + q_0;
                      blp_tmp.f = X_0;
                      blp_tmp.i |= 1;
                      s_2_0 = s_2_0 + blp_tmp.f;
                    }
                  }
                }
              }else{
                if(incY == 1){
                  if(smindex0(manZ)){
                    compression_0 = idxd_SMCOMPRESSION;
                    expansion_0 = idxd_SMEXPANSION * 0.5;
                    for(i = 0; i + 1 <= N_block; i += 1, X += incX, Y += 1){
                      X_0 = X[0];
                      Y_0 = Y[0];
                      X_0 = X_0 * Y_0;

                      q_0 = s_0_0;
                      blp_tmp.f = X_0 * compression_0;
                      blp_tmp.i |= 1;
                      s_0_0 = s_0_0 + blp_tmp.f;
                      q_0 = q_0 - s_0_0 * expansion_0;
                      X_0 = X_0 + q_0 + q_0;
                      q_0 = s_1_0;
                      blp_tmp.f = X_0;
                      blp_tmp.i |= 1;
                      s_1_0 = s_1_0 + blp_tmp.f;
                      q_0 = q_0 - s_1_0;
                      X_0 = X_0 + q_0;
                      blp_tmp.f = X_0;
                      blp_tmp.i |= 1;
                      s_2_0 = s_2_0 + blp_tmp.f;
                    }
                  }else{
                    for(i = 0; i + 1 <= N_block; i += 1, X += incX, Y += 1){
                      X_0 = X[0];
                      Y_0 = Y[0];
                      X_0 = X_0 * Y_0;

                      q_0 = s_0_0;
                      blp_tmp.f = X_0;
                      blp_tmp.i |= 1;
                      s_0_0 = s_0_0 + blp_tmp.f;
                      q_0 = q_0 - s_0_0;
                      X_0 = X_0 + q_0;
                      q_0 = s_1_0;
                      blp_tmp.f = X_0;
                      blp_tmp.i |= 1;
                      s_1_0 = s_1_0 + blp_tmp.f;
                      q_0 = q_0 - s_1_0;
                      X_0 = X_0 + q_0;
                      blp_tmp.f = X_0;
                      blp_tmp.i |= 1;
                      s_2_0 = s_2_0 + blp_tmp.f;
                    }
                  }
                }else{
                  if(smindex0(manZ)){
                    compression_0 = idxd_SMCOMPRESSION;
                    expansion_0 = idxd_SMEXPANSION * 0.5;
                    for(i = 0; i + 1 <= N_block; i += 1, X += incX, Y += incY){
                      X_0 = X[0];
                      Y_0 = Y[0];
                      X_0 = X_0 * Y_0;

                      q_0 = s_0_0;
                      blp_tmp.f = X_0 * compression_0;
                      blp_tmp.i |= 1;
                      s_0_0 = s_0_0 + blp_tmp.f;
                      q_0 = q_0 - s_0_0 * expansion_0;
                      X_0 = X_0 + q_0 + q_0;
                      q_0 = s_1_0;
                      blp_tmp.f = X_0;
                      blp_tmp.i |= 1;
                      s_1_0 = s_1_0 + blp_tmp.f;
                      q_0 = q_0 - s_1_0;
                      X_0 = X_0 + q_0;
                      blp_tmp.f = X_0;
                      blp_tmp.i |= 1;
                      s_2_0 = s_2_0 + blp_tmp.f;
                    }
                  }else{
                    for(i = 0; i + 1 <= N_block; i += 1, X += incX, Y += incY){
                      X_0 = X[0];
                      Y_0 = Y[0];
                      X_0 = X_0 * Y_0;

                      q_0 = s_0_0;
                      blp_tmp.f = X_0;
                      blp_tmp.i |= 1;
                      s_0_0 = s_0_0 + blp_tmp.f;
                      q_0 = q_0 - s_0_0;
                      X_0 = X_0 + q_0;
                      q_0 = s_1_0;
                      blp_tmp.f = X_0;
                      blp_tmp.i |= 1;
                      s_1_0 = s_1_0 + blp_tmp.f;
                      q_0 = q_0 - s_1_0;
                      X_0 = X_0 + q_0;
                      blp_tmp.f = X_0;
                      blp_tmp.i |= 1;
                      s_2_0 = s_2_0 + blp_tmp.f;
                    }
                  }
                }
              }

              manZ[0] = s_0_0;
              manZ[incmanZ] = s_1_0;
              manZ[(incmanZ * 2)] = s_2_0;

            }
            break;
          default:
            {
              int i, j;
              float X_0;
              float Y_0;
              float compression_0;
              float expansion_0;
              float q_0;
              float s_0;
              float s_buffer[SIMAXFOLD];

              for(j = 0; j < fold; j += 1){
                s_buffer[j] = manZ[(incmanZ * j)];
              }

              if(incX == 1){
                if(incY == 1){
                  if(smindex0(manZ)){
                    compression_0 = idxd_SMCOMPRESSION;
                    expansion_0 = idxd_SMEXPANSION * 0.5;
                    for(i = 0; i + 1 <= N_block; i += 1, X += 1, Y += 1){
                      X_0 = X[0];
                      Y_0 = Y[0];
                      X_0 = X_0 * Y_0;

                      s_0 = s_buffer[0];
                      blp_tmp.f = X_0 * compression_0;
                      blp_tmp.i |= 1;
                      q_0 = s_0 + blp_tmp.f;
                      s_buffer[0] = q_0;
                      q_0 = s_0 - q_0 * expansion_0;
                      X_0 = X_0 + q_0 + q_0;
                      for(j = 1; j < fold - 1; j++){
                        s_0 = s_buffer[j];
                        blp_tmp.f = X_0;
                        blp_tmp.i |= 1;
                        q_0 = s_0 + blp_tmp.f;
                        s_buffer[j] = q_0;
                        q_0 = s_0 - q_0;
                        X_0 = X_0 + q_0;
                      }
                      blp_tmp.f = X_0;
                      blp_tmp.i |= 1;
                      s_buffer[j] = s_buffer[j] + blp_tmp.f;
                    }
                  }else{
                    for(i = 0; i + 1 <= N_block; i += 1, X += 1, Y += 1){
                      X_0 = X[0];
                      Y_0 = Y[0];
                      X_0 = X_0 * Y_0;

                      for(j = 0; j < fold - 1; j++){
                        s_0 = s_buffer[j];
                        blp_tmp.f = X_0;
                        blp_tmp.i |= 1;
                        q_0 = s_0 + blp_tmp.f;
                        s_buffer[j] = q_0;
                        q_0 = s_0 - q_0;
                        X_0 = X_0 + q_0;
                      }
                      blp_tmp.f = X_0;
                      blp_tmp.i |= 1;
                      s_buffer[j] = s_buffer[j] + blp_tmp.f;
                    }
                  }
                }else{
                  if(smindex0(manZ)){
                    compression_0 = idxd_SMCOMPRESSION;
                    expansion_0 = idxd_SMEXPANSION * 0.5;
                    for(i = 0; i + 1 <= N_block; i += 1, X += 1, Y += incY){
                      X_0 = X[0];
                      Y_0 = Y[0];
                      X_0 = X_0 * Y_0;

                      s_0 = s_buffer[0];
                      blp_tmp.f = X_0 * compression_0;
                      blp_tmp.i |= 1;
                      q_0 = s_0 + blp_tmp.f;
                      s_buffer[0] = q_0;
                      q_0 = s_0 - q_0 * expansion_0;
                      X_0 = X_0 + q_0 + q_0;
                      for(j = 1; j < fold - 1; j++){
                        s_0 = s_buffer[j];
                        blp_tmp.f = X_0;
                        blp_tmp.i |= 1;
                        q_0 = s_0 + blp_tmp.f;
                        s_buffer[j] = q_0;
                        q_0 = s_0 - q_0;
                        X_0 = X_0 + q_0;
                      }
                      blp_tmp.f = X_0;
                      blp_tmp.i |= 1;
                      s_buffer[j] = s_buffer[j] + blp_tmp.f;
                    }
                  }else{
                    for(i = 0; i + 1 <= N_block; i += 1, X += 1, Y += incY){
                      X_0 = X[0];
                      Y_0 = Y[0];
                      X_0 = X_0 * Y_0;

                      for(j = 0; j < fold - 1; j++){
                        s_0 = s_buffer[j];
                        blp_tmp.f = X_0;
                        blp_tmp.i |= 1;
                        q_0 = s_0 + blp_tmp.f;
                        s_buffer[j] = q_0;
                        q_0 = s_0 - q_0;
                        X_0 = X_0 + q_0;
                      }
                      blp_tmp.f = X_0;
                      blp_tmp.i |= 1;
                      s_buffer[j] = s_buffer[j] + blp_tmp.f;
                    }
                  }
                }
              }else{
                if(incY == 1){
                  if(smindex0(manZ)){
                    compression_0 = idxd_SMCOMPRESSION;
                    expansion_0 = idxd_SMEXPANSION * 0.5;
                    for(i = 0; i + 1 <= N_block; i += 1, X += incX, Y += 1){
                      X_0 = X[0];
                      Y_0 = Y[0];
                      X_0 = X_0 * Y_0;

                      s_0 = s_buffer[0];
                      blp_tmp.f = X_0 * compression_0;
                      blp_tmp.i |= 1;
                      q_0 = s_0 + blp_tmp.f;
                      s_buffer[0] = q_0;
                      q_0 = s_0 - q_0 * expansion_0;
                      X_0 = X_0 + q_0 + q_0;
                      for(j = 1; j < fold - 1; j++){
                        s_0 = s_buffer[j];
                        blp_tmp.f = X_0;
                        blp_tmp.i |= 1;
                        q_0 = s_0 + blp_tmp.f;
                        s_buffer[j] = q_0;
                        q_0 = s_0 - q_0;
                        X_0 = X_0 + q_0;
                      }
                      blp_tmp.f = X_0;
                      blp_tmp.i |= 1;
                      s_buffer[j] = s_buffer[j] + blp_tmp.f;
                    }
                  }else{
                    for(i = 0; i + 1 <= N_block; i += 1, X += incX, Y += 1){
                      X_0 = X[0];
                      Y_0 = Y[0];
                      X_0 = X_0 * Y_0;

                      for(j = 0; j < fold - 1; j++){
                        s_0 = s_buffer[j];
                        blp_tmp.f = X_0;
                        blp_tmp.i |= 1;
                        q_0 = s_0 + blp_tmp.f;
                        s_buffer[j] = q_0;
                        q_0 = s_0 - q_0;
                        X_0 = X_0 + q_0;
                      }
                      blp_tmp.f = X_0;
                      blp_tmp.i |= 1;
                      s_buffer[j] = s_buffer[j] + blp_tmp.f;
                    }
                  }
                }else{
                  if(smindex0(manZ)){
                    compression_0 = idxd_SMCOMPRESSION;
                    expansion_0 = idxd_SMEXPANSION * 0.5;
                    for(i = 0; i + 1 <= N_block; i += 1, X += incX, Y += incY){
                      X_0 = X[0];
                      Y_0 = Y[0];
                      X_0 = X_0 * Y_0;

                      s_0 = s_buffer[0];
                      blp_tmp.f = X_0 * compression_0;
                      blp_tmp.i |= 1;
                      q_0 = s_0 + blp_tmp.f;
                      s_buffer[0] = q_0;
                      q_0 = s_0 - q_0 * expansion_0;
                      X_0 = X_0 + q_0 + q_0;
                      for(j = 1; j < fold - 1; j++){
                        s_0 = s_buffer[j];
                        blp_tmp.f = X_0;
                        blp_tmp.i |= 1;
                        q_0 = s_0 + blp_tmp.f;
                        s_buffer[j] = q_0;
                        q_0 = s_0 - q_0;
                        X_0 = X_0 + q_0;
                      }
                      blp_tmp.f = X_0;
                      blp_tmp.i |= 1;
                      s_buffer[j] = s_buffer[j] + blp_tmp.f;
                    }
                  }else{
                    for(i = 0; i + 1 <= N_block; i += 1, X += incX, Y += incY){
                      X_0 = X[0];
                      Y_0 = Y[0];
                      X_0 = X_0 * Y_0;

                      for(j = 0; j < fold - 1; j++){
                        s_0 = s_buffer[j];
                        blp_tmp.f = X_0;
                        blp_tmp.i |= 1;
                        q_0 = s_0 + blp_tmp.f;
                        s_buffer[j] = q_0;
                        q_0 = s_0 - q_0;
                        X_0 = X_0 + q_0;
                      }
                      blp_tmp.f = X_0;
                      blp_tmp.i |= 1;
                      s_buffer[j] = s_buffer[j] + blp_tmp.f;
                    }
                  }
                }
              }

              for(j = 0; j < fold; j += 1){
                manZ[(incmanZ * j)] = s_buffer[j];
              }

            }
            break;
        }

      #endif

        }
    //[[[end]]]

    deposits += N_block;
  }

  smrenorm(fold, manZ, incmanZ, carZ, inccarZ);
}
