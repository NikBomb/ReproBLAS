/*
 *  Created   13/10/25   H.D. Nguyen
 */

#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include <float.h>

#include "../config.h"
#include "../common/common.h"
#include "indexedBLAS.h"

/*[[[cog
import cog
import generate
import dataTypes
import depositSum
import vectorizations
from src.common import blockSize
from scripts import terminal

code_block = generate.CodeBlock()
vectorizations.conditionally_include_vectorizations(code_block)
cog.out(str(code_block))

cog.outl()

cog.out(generate.generate(blockSize.BlockSize("zmzsum", "N_block_MAX", 32, terminal.get_diendurance(), terminal.get_diendurance(), ["bench_rzsum_fold_{}".format(terminal.get_didefaultfold())]), cog.inFile, args, params, mode))
]]]*/
#ifdef __AVX__
  #include <immintrin.h>

#elif defined(__SSE2__)
  #include <emmintrin.h>

#else


#endif

#define N_block_MAX 2048
//[[[end]]]

void zmzsum(const int fold, const int N, const void *X, const int incX, double *manY, const int incmanY, double *carY, const int inccarY){
  double amax[2];
  int i, j;
  int N_block = N_block_MAX;
  int deposits = 0;

  const double *x = (const double*)X;

  for (i = 0; i < N; i += N_block) {
    N_block = MIN((N - i), N_block);

    zamax_sub(N_block, x, incX, amax);

    if (isinf(amax[0]) || isinf(manY[0])){
      for (j = 0; j < N_block; j++){
        manY[0] += x[j * 2 * incX];
      }
    }
    if (isinf(amax[1]) || isinf(manY[1])){
      for (j = 0; j < N_block; j++){
        manY[1] += x[j * 2 * incX + 1];
      }
    }
    if (isnan(manY[0]) && isnan(manY[1])){
      return;
    } else if (isinf(manY[0]) && isinf(manY[1])){
      x += N_block * 2 * incX;
      continue;
    }
    if (ISNANINF(manY[0])){
      amax[0] = manY[0];
    }
    if (ISNANINF(manY[1])){
      amax[1] = manY[1];
    }

    if (deposits + N_block > idxd_DIENDURANCE) {
      idxd_zmrenorm(fold, manY, incmanY, carY, inccarY);
      deposits = 0;
    }

    idxd_zmzupdate(fold, amax, manY, incmanY, carY, inccarY);

    /*[[[cog
    cog.out(generate.generate(depositSum.DepositSum(dataTypes.DoubleComplex, "fold", "N_block", "x", "incX", "manY", "incmanY"), cog.inFile, args, params, mode))
    ]]]*/
    {
      #ifdef __AVX__
        __m256d blp_mask_tmp;
        {
          __m256d tmp;
          blp_mask_tmp = _mm256_set1_pd(1.0);
          tmp = _mm256_set1_pd(1.0 + (DBL_EPSILON * 1.0001));
          blp_mask_tmp = _mm256_xor_pd(blp_mask_tmp, tmp);
        }
        __m256d cons_tmp; (void)cons_tmp;
        double cons_buffer_tmp[4] __attribute__((aligned(32))); (void)cons_buffer_tmp;
        unsigned int SIMD_daz_ftz_old_tmp = 0;
        unsigned int SIMD_daz_ftz_new_tmp = 0;


        switch(fold){
          case 3:
            {
              int i;
              __m256d x_0;
              __m256d compression_0;
              __m256d expansion_0;
              __m256d expansion_mask_0;
              __m256d q_0;
              __m256d s_0_0;
              __m256d s_1_0;
              __m256d s_2_0;

              s_0_0 = _mm256_broadcast_pd((__m128d *)(((double*)manY)));
              s_1_0 = _mm256_broadcast_pd((__m128d *)(((double*)manY) + (incmanY * 2)));
              s_2_0 = _mm256_broadcast_pd((__m128d *)(((double*)manY) + (incmanY * 4)));

              if(incX == 1){
                if(idxd_dmindex0(manY) || idxd_dmindex0(manY + 1)){
                  if(idxd_dmindex0(manY)){
                    if(idxd_dmindex0(manY + 1)){
                      compression_0 = _mm256_set1_pd(idxd_DMCOMPRESSION);
                      expansion_0 = _mm256_set1_pd(idxd_DMEXPANSION * 0.5);
                      expansion_mask_0 = _mm256_set1_pd(idxd_DMEXPANSION * 0.5);
                    }else{
                      compression_0 = _mm256_set_pd(1.0, idxd_DMCOMPRESSION, 1.0, idxd_DMCOMPRESSION);
                      expansion_0 = _mm256_set_pd(1.0, idxd_DMEXPANSION * 0.5, 1.0, idxd_DMEXPANSION * 0.5);
                      expansion_mask_0 = _mm256_set_pd(0.0, idxd_DMEXPANSION * 0.5, 0.0, idxd_DMEXPANSION * 0.5);
                    }
                  }else{
                    compression_0 = _mm256_set_pd(idxd_DMCOMPRESSION, 1.0, idxd_DMCOMPRESSION, 1.0);
                    expansion_0 = _mm256_set_pd(idxd_DMEXPANSION * 0.5, 1.0, idxd_DMEXPANSION * 0.5, 1.0);
                    expansion_mask_0 = _mm256_set_pd(idxd_DMEXPANSION * 0.5, 0.0, idxd_DMEXPANSION * 0.5, 0.0);
                  }
                  for(i = 0; i + 2 <= N_block; i += 2, x += 4){
                    x_0 = _mm256_loadu_pd(((double*)x));

                    q_0 = s_0_0;
                    s_0_0 = _mm256_add_pd(s_0_0, _mm256_or_pd(_mm256_mul_pd(x_0, compression_0), blp_mask_tmp));
                    q_0 = _mm256_sub_pd(q_0, s_0_0);
                    x_0 = _mm256_add_pd(_mm256_add_pd(x_0, _mm256_mul_pd(q_0, expansion_0)), _mm256_mul_pd(q_0, expansion_mask_0));
                    q_0 = s_1_0;
                    s_1_0 = _mm256_add_pd(s_1_0, _mm256_or_pd(x_0, blp_mask_tmp));
                    q_0 = _mm256_sub_pd(q_0, s_1_0);
                    x_0 = _mm256_add_pd(x_0, q_0);
                    s_2_0 = _mm256_add_pd(s_2_0, _mm256_or_pd(x_0, blp_mask_tmp));
                  }
                  if(i < N_block){
                    x_0 = _mm256_set_pd(0, 0, ((double*)x)[1], ((double*)x)[0]);

                    q_0 = s_0_0;
                    s_0_0 = _mm256_add_pd(s_0_0, _mm256_or_pd(_mm256_mul_pd(x_0, compression_0), blp_mask_tmp));
                    q_0 = _mm256_sub_pd(q_0, s_0_0);
                    x_0 = _mm256_add_pd(_mm256_add_pd(x_0, _mm256_mul_pd(q_0, expansion_0)), _mm256_mul_pd(q_0, expansion_mask_0));
                    q_0 = s_1_0;
                    s_1_0 = _mm256_add_pd(s_1_0, _mm256_or_pd(x_0, blp_mask_tmp));
                    q_0 = _mm256_sub_pd(q_0, s_1_0);
                    x_0 = _mm256_add_pd(x_0, q_0);
                    s_2_0 = _mm256_add_pd(s_2_0, _mm256_or_pd(x_0, blp_mask_tmp));
                    x += ((N_block - i) * 2);
                  }
                }else{
                  for(i = 0; i + 2 <= N_block; i += 2, x += 4){
                    x_0 = _mm256_loadu_pd(((double*)x));

                    q_0 = s_0_0;
                    s_0_0 = _mm256_add_pd(s_0_0, _mm256_or_pd(x_0, blp_mask_tmp));
                    q_0 = _mm256_sub_pd(q_0, s_0_0);
                    x_0 = _mm256_add_pd(x_0, q_0);
                    q_0 = s_1_0;
                    s_1_0 = _mm256_add_pd(s_1_0, _mm256_or_pd(x_0, blp_mask_tmp));
                    q_0 = _mm256_sub_pd(q_0, s_1_0);
                    x_0 = _mm256_add_pd(x_0, q_0);
                    s_2_0 = _mm256_add_pd(s_2_0, _mm256_or_pd(x_0, blp_mask_tmp));
                  }
                  if(i < N_block){
                    x_0 = _mm256_set_pd(0, 0, ((double*)x)[1], ((double*)x)[0]);

                    q_0 = s_0_0;
                    s_0_0 = _mm256_add_pd(s_0_0, _mm256_or_pd(x_0, blp_mask_tmp));
                    q_0 = _mm256_sub_pd(q_0, s_0_0);
                    x_0 = _mm256_add_pd(x_0, q_0);
                    q_0 = s_1_0;
                    s_1_0 = _mm256_add_pd(s_1_0, _mm256_or_pd(x_0, blp_mask_tmp));
                    q_0 = _mm256_sub_pd(q_0, s_1_0);
                    x_0 = _mm256_add_pd(x_0, q_0);
                    s_2_0 = _mm256_add_pd(s_2_0, _mm256_or_pd(x_0, blp_mask_tmp));
                    x += ((N_block - i) * 2);
                  }
                }
              }else{
                if(idxd_dmindex0(manY) || idxd_dmindex0(manY + 1)){
                  if(idxd_dmindex0(manY)){
                    if(idxd_dmindex0(manY + 1)){
                      compression_0 = _mm256_set1_pd(idxd_DMCOMPRESSION);
                      expansion_0 = _mm256_set1_pd(idxd_DMEXPANSION * 0.5);
                      expansion_mask_0 = _mm256_set1_pd(idxd_DMEXPANSION * 0.5);
                    }else{
                      compression_0 = _mm256_set_pd(1.0, idxd_DMCOMPRESSION, 1.0, idxd_DMCOMPRESSION);
                      expansion_0 = _mm256_set_pd(1.0, idxd_DMEXPANSION * 0.5, 1.0, idxd_DMEXPANSION * 0.5);
                      expansion_mask_0 = _mm256_set_pd(0.0, idxd_DMEXPANSION * 0.5, 0.0, idxd_DMEXPANSION * 0.5);
                    }
                  }else{
                    compression_0 = _mm256_set_pd(idxd_DMCOMPRESSION, 1.0, idxd_DMCOMPRESSION, 1.0);
                    expansion_0 = _mm256_set_pd(idxd_DMEXPANSION * 0.5, 1.0, idxd_DMEXPANSION * 0.5, 1.0);
                    expansion_mask_0 = _mm256_set_pd(idxd_DMEXPANSION * 0.5, 0.0, idxd_DMEXPANSION * 0.5, 0.0);
                  }
                  for(i = 0; i + 2 <= N_block; i += 2, x += (incX * 4)){
                    x_0 = _mm256_set_pd(((double*)x)[((incX * 2) + 1)], ((double*)x)[(incX * 2)], ((double*)x)[1], ((double*)x)[0]);

                    q_0 = s_0_0;
                    s_0_0 = _mm256_add_pd(s_0_0, _mm256_or_pd(_mm256_mul_pd(x_0, compression_0), blp_mask_tmp));
                    q_0 = _mm256_sub_pd(q_0, s_0_0);
                    x_0 = _mm256_add_pd(_mm256_add_pd(x_0, _mm256_mul_pd(q_0, expansion_0)), _mm256_mul_pd(q_0, expansion_mask_0));
                    q_0 = s_1_0;
                    s_1_0 = _mm256_add_pd(s_1_0, _mm256_or_pd(x_0, blp_mask_tmp));
                    q_0 = _mm256_sub_pd(q_0, s_1_0);
                    x_0 = _mm256_add_pd(x_0, q_0);
                    s_2_0 = _mm256_add_pd(s_2_0, _mm256_or_pd(x_0, blp_mask_tmp));
                  }
                  if(i < N_block){
                    x_0 = _mm256_set_pd(0, 0, ((double*)x)[1], ((double*)x)[0]);

                    q_0 = s_0_0;
                    s_0_0 = _mm256_add_pd(s_0_0, _mm256_or_pd(_mm256_mul_pd(x_0, compression_0), blp_mask_tmp));
                    q_0 = _mm256_sub_pd(q_0, s_0_0);
                    x_0 = _mm256_add_pd(_mm256_add_pd(x_0, _mm256_mul_pd(q_0, expansion_0)), _mm256_mul_pd(q_0, expansion_mask_0));
                    q_0 = s_1_0;
                    s_1_0 = _mm256_add_pd(s_1_0, _mm256_or_pd(x_0, blp_mask_tmp));
                    q_0 = _mm256_sub_pd(q_0, s_1_0);
                    x_0 = _mm256_add_pd(x_0, q_0);
                    s_2_0 = _mm256_add_pd(s_2_0, _mm256_or_pd(x_0, blp_mask_tmp));
                    x += (incX * (N_block - i) * 2);
                  }
                }else{
                  for(i = 0; i + 2 <= N_block; i += 2, x += (incX * 4)){
                    x_0 = _mm256_set_pd(((double*)x)[((incX * 2) + 1)], ((double*)x)[(incX * 2)], ((double*)x)[1], ((double*)x)[0]);

                    q_0 = s_0_0;
                    s_0_0 = _mm256_add_pd(s_0_0, _mm256_or_pd(x_0, blp_mask_tmp));
                    q_0 = _mm256_sub_pd(q_0, s_0_0);
                    x_0 = _mm256_add_pd(x_0, q_0);
                    q_0 = s_1_0;
                    s_1_0 = _mm256_add_pd(s_1_0, _mm256_or_pd(x_0, blp_mask_tmp));
                    q_0 = _mm256_sub_pd(q_0, s_1_0);
                    x_0 = _mm256_add_pd(x_0, q_0);
                    s_2_0 = _mm256_add_pd(s_2_0, _mm256_or_pd(x_0, blp_mask_tmp));
                  }
                  if(i < N_block){
                    x_0 = _mm256_set_pd(0, 0, ((double*)x)[1], ((double*)x)[0]);

                    q_0 = s_0_0;
                    s_0_0 = _mm256_add_pd(s_0_0, _mm256_or_pd(x_0, blp_mask_tmp));
                    q_0 = _mm256_sub_pd(q_0, s_0_0);
                    x_0 = _mm256_add_pd(x_0, q_0);
                    q_0 = s_1_0;
                    s_1_0 = _mm256_add_pd(s_1_0, _mm256_or_pd(x_0, blp_mask_tmp));
                    q_0 = _mm256_sub_pd(q_0, s_1_0);
                    x_0 = _mm256_add_pd(x_0, q_0);
                    s_2_0 = _mm256_add_pd(s_2_0, _mm256_or_pd(x_0, blp_mask_tmp));
                    x += (incX * (N_block - i) * 2);
                  }
                }
              }

              s_0_0 = _mm256_sub_pd(s_0_0, _mm256_set_pd(((double*)manY)[1], ((double*)manY)[0], 0, 0));
              _mm256_store_pd(cons_buffer_tmp, s_0_0);
              ((double*)manY)[0] = cons_buffer_tmp[0] + cons_buffer_tmp[2];
              ((double*)manY)[1] = cons_buffer_tmp[1] + cons_buffer_tmp[3];
              s_1_0 = _mm256_sub_pd(s_1_0, _mm256_set_pd(((double*)manY)[((incmanY * 2) + 1)], ((double*)manY)[(incmanY * 2)], 0, 0));
              _mm256_store_pd(cons_buffer_tmp, s_1_0);
              ((double*)manY)[(incmanY * 2)] = cons_buffer_tmp[0] + cons_buffer_tmp[2];
              ((double*)manY)[((incmanY * 2) + 1)] = cons_buffer_tmp[1] + cons_buffer_tmp[3];
              s_2_0 = _mm256_sub_pd(s_2_0, _mm256_set_pd(((double*)manY)[((incmanY * 4) + 1)], ((double*)manY)[(incmanY * 4)], 0, 0));
              _mm256_store_pd(cons_buffer_tmp, s_2_0);
              ((double*)manY)[(incmanY * 4)] = cons_buffer_tmp[0] + cons_buffer_tmp[2];
              ((double*)manY)[((incmanY * 4) + 1)] = cons_buffer_tmp[1] + cons_buffer_tmp[3];

              if(SIMD_daz_ftz_new_tmp != SIMD_daz_ftz_old_tmp){
                _mm_setcsr(SIMD_daz_ftz_old_tmp);
              }
            }
            break;
          default:
            {
              int i, j;
              __m256d x_0;
              __m256d compression_0;
              __m256d expansion_0;
              __m256d expansion_mask_0;
              __m256d q_0;
              __m256d s_0;
              __m256d s_buffer[DIMAXFOLD];

              for(j = 0; j < fold; j += 1){
                s_buffer[j] = _mm256_broadcast_pd((__m128d *)(((double*)manY) + (incmanY * j * 2)));
              }

              if(incX == 1){
                if(idxd_dmindex0(manY) || idxd_dmindex0(manY + 1)){
                  if(idxd_dmindex0(manY)){
                    if(idxd_dmindex0(manY + 1)){
                      compression_0 = _mm256_set1_pd(idxd_DMCOMPRESSION);
                      expansion_0 = _mm256_set1_pd(idxd_DMEXPANSION * 0.5);
                      expansion_mask_0 = _mm256_set1_pd(idxd_DMEXPANSION * 0.5);
                    }else{
                      compression_0 = _mm256_set_pd(1.0, idxd_DMCOMPRESSION, 1.0, idxd_DMCOMPRESSION);
                      expansion_0 = _mm256_set_pd(1.0, idxd_DMEXPANSION * 0.5, 1.0, idxd_DMEXPANSION * 0.5);
                      expansion_mask_0 = _mm256_set_pd(0.0, idxd_DMEXPANSION * 0.5, 0.0, idxd_DMEXPANSION * 0.5);
                    }
                  }else{
                    compression_0 = _mm256_set_pd(idxd_DMCOMPRESSION, 1.0, idxd_DMCOMPRESSION, 1.0);
                    expansion_0 = _mm256_set_pd(idxd_DMEXPANSION * 0.5, 1.0, idxd_DMEXPANSION * 0.5, 1.0);
                    expansion_mask_0 = _mm256_set_pd(idxd_DMEXPANSION * 0.5, 0.0, idxd_DMEXPANSION * 0.5, 0.0);
                  }
                  for(i = 0; i + 2 <= N_block; i += 2, x += 4){
                    x_0 = _mm256_loadu_pd(((double*)x));

                    s_0 = s_buffer[0];
                    q_0 = _mm256_add_pd(s_0, _mm256_or_pd(_mm256_mul_pd(x_0, compression_0), blp_mask_tmp));
                    s_buffer[0] = q_0;
                    q_0 = _mm256_sub_pd(s_0, q_0);
                    x_0 = _mm256_add_pd(_mm256_add_pd(x_0, _mm256_mul_pd(q_0, expansion_0)), _mm256_mul_pd(q_0, expansion_mask_0));
                    for(j = 1; j < fold - 1; j++){
                      s_0 = s_buffer[j];
                      q_0 = _mm256_add_pd(s_0, _mm256_or_pd(x_0, blp_mask_tmp));
                      s_buffer[j] = q_0;
                      q_0 = _mm256_sub_pd(s_0, q_0);
                      x_0 = _mm256_add_pd(x_0, q_0);
                    }
                    s_buffer[j] = _mm256_add_pd(s_buffer[j], _mm256_or_pd(x_0, blp_mask_tmp));
                  }
                  if(i < N_block){
                    x_0 = _mm256_set_pd(0, 0, ((double*)x)[1], ((double*)x)[0]);

                    s_0 = s_buffer[0];
                    q_0 = _mm256_add_pd(s_0, _mm256_or_pd(_mm256_mul_pd(x_0, compression_0), blp_mask_tmp));
                    s_buffer[0] = q_0;
                    q_0 = _mm256_sub_pd(s_0, q_0);
                    x_0 = _mm256_add_pd(_mm256_add_pd(x_0, _mm256_mul_pd(q_0, expansion_0)), _mm256_mul_pd(q_0, expansion_mask_0));
                    for(j = 1; j < fold - 1; j++){
                      s_0 = s_buffer[j];
                      q_0 = _mm256_add_pd(s_0, _mm256_or_pd(x_0, blp_mask_tmp));
                      s_buffer[j] = q_0;
                      q_0 = _mm256_sub_pd(s_0, q_0);
                      x_0 = _mm256_add_pd(x_0, q_0);
                    }
                    s_buffer[j] = _mm256_add_pd(s_buffer[j], _mm256_or_pd(x_0, blp_mask_tmp));
                    x += ((N_block - i) * 2);
                  }
                }else{
                  for(i = 0; i + 2 <= N_block; i += 2, x += 4){
                    x_0 = _mm256_loadu_pd(((double*)x));

                    for(j = 0; j < fold - 1; j++){
                      s_0 = s_buffer[j];
                      q_0 = _mm256_add_pd(s_0, _mm256_or_pd(x_0, blp_mask_tmp));
                      s_buffer[j] = q_0;
                      q_0 = _mm256_sub_pd(s_0, q_0);
                      x_0 = _mm256_add_pd(x_0, q_0);
                    }
                    s_buffer[j] = _mm256_add_pd(s_buffer[j], _mm256_or_pd(x_0, blp_mask_tmp));
                  }
                  if(i < N_block){
                    x_0 = _mm256_set_pd(0, 0, ((double*)x)[1], ((double*)x)[0]);

                    for(j = 0; j < fold - 1; j++){
                      s_0 = s_buffer[j];
                      q_0 = _mm256_add_pd(s_0, _mm256_or_pd(x_0, blp_mask_tmp));
                      s_buffer[j] = q_0;
                      q_0 = _mm256_sub_pd(s_0, q_0);
                      x_0 = _mm256_add_pd(x_0, q_0);
                    }
                    s_buffer[j] = _mm256_add_pd(s_buffer[j], _mm256_or_pd(x_0, blp_mask_tmp));
                    x += ((N_block - i) * 2);
                  }
                }
              }else{
                if(idxd_dmindex0(manY) || idxd_dmindex0(manY + 1)){
                  if(idxd_dmindex0(manY)){
                    if(idxd_dmindex0(manY + 1)){
                      compression_0 = _mm256_set1_pd(idxd_DMCOMPRESSION);
                      expansion_0 = _mm256_set1_pd(idxd_DMEXPANSION * 0.5);
                      expansion_mask_0 = _mm256_set1_pd(idxd_DMEXPANSION * 0.5);
                    }else{
                      compression_0 = _mm256_set_pd(1.0, idxd_DMCOMPRESSION, 1.0, idxd_DMCOMPRESSION);
                      expansion_0 = _mm256_set_pd(1.0, idxd_DMEXPANSION * 0.5, 1.0, idxd_DMEXPANSION * 0.5);
                      expansion_mask_0 = _mm256_set_pd(0.0, idxd_DMEXPANSION * 0.5, 0.0, idxd_DMEXPANSION * 0.5);
                    }
                  }else{
                    compression_0 = _mm256_set_pd(idxd_DMCOMPRESSION, 1.0, idxd_DMCOMPRESSION, 1.0);
                    expansion_0 = _mm256_set_pd(idxd_DMEXPANSION * 0.5, 1.0, idxd_DMEXPANSION * 0.5, 1.0);
                    expansion_mask_0 = _mm256_set_pd(idxd_DMEXPANSION * 0.5, 0.0, idxd_DMEXPANSION * 0.5, 0.0);
                  }
                  for(i = 0; i + 2 <= N_block; i += 2, x += (incX * 4)){
                    x_0 = _mm256_set_pd(((double*)x)[((incX * 2) + 1)], ((double*)x)[(incX * 2)], ((double*)x)[1], ((double*)x)[0]);

                    s_0 = s_buffer[0];
                    q_0 = _mm256_add_pd(s_0, _mm256_or_pd(_mm256_mul_pd(x_0, compression_0), blp_mask_tmp));
                    s_buffer[0] = q_0;
                    q_0 = _mm256_sub_pd(s_0, q_0);
                    x_0 = _mm256_add_pd(_mm256_add_pd(x_0, _mm256_mul_pd(q_0, expansion_0)), _mm256_mul_pd(q_0, expansion_mask_0));
                    for(j = 1; j < fold - 1; j++){
                      s_0 = s_buffer[j];
                      q_0 = _mm256_add_pd(s_0, _mm256_or_pd(x_0, blp_mask_tmp));
                      s_buffer[j] = q_0;
                      q_0 = _mm256_sub_pd(s_0, q_0);
                      x_0 = _mm256_add_pd(x_0, q_0);
                    }
                    s_buffer[j] = _mm256_add_pd(s_buffer[j], _mm256_or_pd(x_0, blp_mask_tmp));
                  }
                  if(i < N_block){
                    x_0 = _mm256_set_pd(0, 0, ((double*)x)[1], ((double*)x)[0]);

                    s_0 = s_buffer[0];
                    q_0 = _mm256_add_pd(s_0, _mm256_or_pd(_mm256_mul_pd(x_0, compression_0), blp_mask_tmp));
                    s_buffer[0] = q_0;
                    q_0 = _mm256_sub_pd(s_0, q_0);
                    x_0 = _mm256_add_pd(_mm256_add_pd(x_0, _mm256_mul_pd(q_0, expansion_0)), _mm256_mul_pd(q_0, expansion_mask_0));
                    for(j = 1; j < fold - 1; j++){
                      s_0 = s_buffer[j];
                      q_0 = _mm256_add_pd(s_0, _mm256_or_pd(x_0, blp_mask_tmp));
                      s_buffer[j] = q_0;
                      q_0 = _mm256_sub_pd(s_0, q_0);
                      x_0 = _mm256_add_pd(x_0, q_0);
                    }
                    s_buffer[j] = _mm256_add_pd(s_buffer[j], _mm256_or_pd(x_0, blp_mask_tmp));
                    x += (incX * (N_block - i) * 2);
                  }
                }else{
                  for(i = 0; i + 2 <= N_block; i += 2, x += (incX * 4)){
                    x_0 = _mm256_set_pd(((double*)x)[((incX * 2) + 1)], ((double*)x)[(incX * 2)], ((double*)x)[1], ((double*)x)[0]);

                    for(j = 0; j < fold - 1; j++){
                      s_0 = s_buffer[j];
                      q_0 = _mm256_add_pd(s_0, _mm256_or_pd(x_0, blp_mask_tmp));
                      s_buffer[j] = q_0;
                      q_0 = _mm256_sub_pd(s_0, q_0);
                      x_0 = _mm256_add_pd(x_0, q_0);
                    }
                    s_buffer[j] = _mm256_add_pd(s_buffer[j], _mm256_or_pd(x_0, blp_mask_tmp));
                  }
                  if(i < N_block){
                    x_0 = _mm256_set_pd(0, 0, ((double*)x)[1], ((double*)x)[0]);

                    for(j = 0; j < fold - 1; j++){
                      s_0 = s_buffer[j];
                      q_0 = _mm256_add_pd(s_0, _mm256_or_pd(x_0, blp_mask_tmp));
                      s_buffer[j] = q_0;
                      q_0 = _mm256_sub_pd(s_0, q_0);
                      x_0 = _mm256_add_pd(x_0, q_0);
                    }
                    s_buffer[j] = _mm256_add_pd(s_buffer[j], _mm256_or_pd(x_0, blp_mask_tmp));
                    x += (incX * (N_block - i) * 2);
                  }
                }
              }

              for(j = 0; j < fold; j += 1){
                s_buffer[j] = _mm256_sub_pd(s_buffer[j], _mm256_set_pd(((double*)manY)[((incmanY * j * 2) + 1)], ((double*)manY)[(incmanY * j * 2)], 0, 0));
                _mm256_store_pd(cons_buffer_tmp, s_buffer[j]);
                ((double*)manY)[(incmanY * j * 2)] = cons_buffer_tmp[0] + cons_buffer_tmp[2];
                ((double*)manY)[((incmanY * j * 2) + 1)] = cons_buffer_tmp[1] + cons_buffer_tmp[3];
              }

              if(SIMD_daz_ftz_new_tmp != SIMD_daz_ftz_old_tmp){
                _mm_setcsr(SIMD_daz_ftz_old_tmp);
              }
            }
            break;
        }

      #elif defined(__SSE2__)
        __m128d blp_mask_tmp;
        {
          __m128d tmp;
          blp_mask_tmp = _mm_set1_pd(1.0);
          tmp = _mm_set1_pd(1.0 + (DBL_EPSILON * 1.0001));
          blp_mask_tmp = _mm_xor_pd(blp_mask_tmp, tmp);
        }
        __m128d cons_tmp; (void)cons_tmp;
        double cons_buffer_tmp[2] __attribute__((aligned(16))); (void)cons_buffer_tmp;
        unsigned int SIMD_daz_ftz_old_tmp = 0;
        unsigned int SIMD_daz_ftz_new_tmp = 0;


        switch(fold){
          case 3:
            {
              int i;
              __m128d x_0;
              __m128d compression_0;
              __m128d expansion_0;
              __m128d expansion_mask_0;
              __m128d q_0;
              __m128d s_0_0;
              __m128d s_1_0;
              __m128d s_2_0;

              s_0_0 = _mm_loadu_pd(((double*)manY));
              s_1_0 = _mm_loadu_pd(((double*)manY) + (incmanY * 2));
              s_2_0 = _mm_loadu_pd(((double*)manY) + (incmanY * 4));

              if(incX == 1){
                if(idxd_dmindex0(manY) || idxd_dmindex0(manY + 1)){
                  if(idxd_dmindex0(manY)){
                    if(idxd_dmindex0(manY + 1)){
                      compression_0 = _mm_set1_pd(idxd_DMCOMPRESSION);
                      expansion_0 = _mm_set1_pd(idxd_DMEXPANSION * 0.5);
                      expansion_mask_0 = _mm_set1_pd(idxd_DMEXPANSION * 0.5);
                    }else{
                      compression_0 = _mm_set_pd(1.0, idxd_DMCOMPRESSION);
                      expansion_0 = _mm_set_pd(1.0, idxd_DMEXPANSION * 0.5);
                      expansion_mask_0 = _mm_set_pd(0.0, idxd_DMEXPANSION * 0.5);
                    }
                  }else{
                    compression_0 = _mm_set_pd(idxd_DMCOMPRESSION, 1.0);
                    expansion_0 = _mm_set_pd(idxd_DMEXPANSION * 0.5, 1.0);
                    expansion_mask_0 = _mm_set_pd(idxd_DMEXPANSION * 0.5, 0.0);
                  }
                  for(i = 0; i + 1 <= N_block; i += 1, x += 2){
                    x_0 = _mm_loadu_pd(((double*)x));

                    q_0 = s_0_0;
                    s_0_0 = _mm_add_pd(s_0_0, _mm_or_pd(_mm_mul_pd(x_0, compression_0), blp_mask_tmp));
                    q_0 = _mm_sub_pd(q_0, s_0_0);
                    x_0 = _mm_add_pd(_mm_add_pd(x_0, _mm_mul_pd(q_0, expansion_0)), _mm_mul_pd(q_0, expansion_mask_0));
                    q_0 = s_1_0;
                    s_1_0 = _mm_add_pd(s_1_0, _mm_or_pd(x_0, blp_mask_tmp));
                    q_0 = _mm_sub_pd(q_0, s_1_0);
                    x_0 = _mm_add_pd(x_0, q_0);
                    s_2_0 = _mm_add_pd(s_2_0, _mm_or_pd(x_0, blp_mask_tmp));
                  }
                }else{
                  for(i = 0; i + 1 <= N_block; i += 1, x += 2){
                    x_0 = _mm_loadu_pd(((double*)x));

                    q_0 = s_0_0;
                    s_0_0 = _mm_add_pd(s_0_0, _mm_or_pd(x_0, blp_mask_tmp));
                    q_0 = _mm_sub_pd(q_0, s_0_0);
                    x_0 = _mm_add_pd(x_0, q_0);
                    q_0 = s_1_0;
                    s_1_0 = _mm_add_pd(s_1_0, _mm_or_pd(x_0, blp_mask_tmp));
                    q_0 = _mm_sub_pd(q_0, s_1_0);
                    x_0 = _mm_add_pd(x_0, q_0);
                    s_2_0 = _mm_add_pd(s_2_0, _mm_or_pd(x_0, blp_mask_tmp));
                  }
                }
              }else{
                if(idxd_dmindex0(manY) || idxd_dmindex0(manY + 1)){
                  if(idxd_dmindex0(manY)){
                    if(idxd_dmindex0(manY + 1)){
                      compression_0 = _mm_set1_pd(idxd_DMCOMPRESSION);
                      expansion_0 = _mm_set1_pd(idxd_DMEXPANSION * 0.5);
                      expansion_mask_0 = _mm_set1_pd(idxd_DMEXPANSION * 0.5);
                    }else{
                      compression_0 = _mm_set_pd(1.0, idxd_DMCOMPRESSION);
                      expansion_0 = _mm_set_pd(1.0, idxd_DMEXPANSION * 0.5);
                      expansion_mask_0 = _mm_set_pd(0.0, idxd_DMEXPANSION * 0.5);
                    }
                  }else{
                    compression_0 = _mm_set_pd(idxd_DMCOMPRESSION, 1.0);
                    expansion_0 = _mm_set_pd(idxd_DMEXPANSION * 0.5, 1.0);
                    expansion_mask_0 = _mm_set_pd(idxd_DMEXPANSION * 0.5, 0.0);
                  }
                  for(i = 0; i + 1 <= N_block; i += 1, x += (incX * 2)){
                    x_0 = _mm_loadu_pd(((double*)x));

                    q_0 = s_0_0;
                    s_0_0 = _mm_add_pd(s_0_0, _mm_or_pd(_mm_mul_pd(x_0, compression_0), blp_mask_tmp));
                    q_0 = _mm_sub_pd(q_0, s_0_0);
                    x_0 = _mm_add_pd(_mm_add_pd(x_0, _mm_mul_pd(q_0, expansion_0)), _mm_mul_pd(q_0, expansion_mask_0));
                    q_0 = s_1_0;
                    s_1_0 = _mm_add_pd(s_1_0, _mm_or_pd(x_0, blp_mask_tmp));
                    q_0 = _mm_sub_pd(q_0, s_1_0);
                    x_0 = _mm_add_pd(x_0, q_0);
                    s_2_0 = _mm_add_pd(s_2_0, _mm_or_pd(x_0, blp_mask_tmp));
                  }
                }else{
                  for(i = 0; i + 1 <= N_block; i += 1, x += (incX * 2)){
                    x_0 = _mm_loadu_pd(((double*)x));

                    q_0 = s_0_0;
                    s_0_0 = _mm_add_pd(s_0_0, _mm_or_pd(x_0, blp_mask_tmp));
                    q_0 = _mm_sub_pd(q_0, s_0_0);
                    x_0 = _mm_add_pd(x_0, q_0);
                    q_0 = s_1_0;
                    s_1_0 = _mm_add_pd(s_1_0, _mm_or_pd(x_0, blp_mask_tmp));
                    q_0 = _mm_sub_pd(q_0, s_1_0);
                    x_0 = _mm_add_pd(x_0, q_0);
                    s_2_0 = _mm_add_pd(s_2_0, _mm_or_pd(x_0, blp_mask_tmp));
                  }
                }
              }

              _mm_store_pd(cons_buffer_tmp, s_0_0);
              ((double*)manY)[0] = cons_buffer_tmp[0];
              ((double*)manY)[1] = cons_buffer_tmp[1];
              _mm_store_pd(cons_buffer_tmp, s_1_0);
              ((double*)manY)[(incmanY * 2)] = cons_buffer_tmp[0];
              ((double*)manY)[((incmanY * 2) + 1)] = cons_buffer_tmp[1];
              _mm_store_pd(cons_buffer_tmp, s_2_0);
              ((double*)manY)[(incmanY * 4)] = cons_buffer_tmp[0];
              ((double*)manY)[((incmanY * 4) + 1)] = cons_buffer_tmp[1];

              if(SIMD_daz_ftz_new_tmp != SIMD_daz_ftz_old_tmp){
                _mm_setcsr(SIMD_daz_ftz_old_tmp);
              }
            }
            break;
          default:
            {
              int i, j;
              __m128d x_0;
              __m128d compression_0;
              __m128d expansion_0;
              __m128d expansion_mask_0;
              __m128d q_0;
              __m128d s_0;
              __m128d s_buffer[DIMAXFOLD];

              for(j = 0; j < fold; j += 1){
                s_buffer[j] = _mm_loadu_pd(((double*)manY) + (incmanY * j * 2));
              }

              if(incX == 1){
                if(idxd_dmindex0(manY) || idxd_dmindex0(manY + 1)){
                  if(idxd_dmindex0(manY)){
                    if(idxd_dmindex0(manY + 1)){
                      compression_0 = _mm_set1_pd(idxd_DMCOMPRESSION);
                      expansion_0 = _mm_set1_pd(idxd_DMEXPANSION * 0.5);
                      expansion_mask_0 = _mm_set1_pd(idxd_DMEXPANSION * 0.5);
                    }else{
                      compression_0 = _mm_set_pd(1.0, idxd_DMCOMPRESSION);
                      expansion_0 = _mm_set_pd(1.0, idxd_DMEXPANSION * 0.5);
                      expansion_mask_0 = _mm_set_pd(0.0, idxd_DMEXPANSION * 0.5);
                    }
                  }else{
                    compression_0 = _mm_set_pd(idxd_DMCOMPRESSION, 1.0);
                    expansion_0 = _mm_set_pd(idxd_DMEXPANSION * 0.5, 1.0);
                    expansion_mask_0 = _mm_set_pd(idxd_DMEXPANSION * 0.5, 0.0);
                  }
                  for(i = 0; i + 1 <= N_block; i += 1, x += 2){
                    x_0 = _mm_loadu_pd(((double*)x));

                    s_0 = s_buffer[0];
                    q_0 = _mm_add_pd(s_0, _mm_or_pd(_mm_mul_pd(x_0, compression_0), blp_mask_tmp));
                    s_buffer[0] = q_0;
                    q_0 = _mm_sub_pd(s_0, q_0);
                    x_0 = _mm_add_pd(_mm_add_pd(x_0, _mm_mul_pd(q_0, expansion_0)), _mm_mul_pd(q_0, expansion_mask_0));
                    for(j = 1; j < fold - 1; j++){
                      s_0 = s_buffer[j];
                      q_0 = _mm_add_pd(s_0, _mm_or_pd(x_0, blp_mask_tmp));
                      s_buffer[j] = q_0;
                      q_0 = _mm_sub_pd(s_0, q_0);
                      x_0 = _mm_add_pd(x_0, q_0);
                    }
                    s_buffer[j] = _mm_add_pd(s_buffer[j], _mm_or_pd(x_0, blp_mask_tmp));
                  }
                }else{
                  for(i = 0; i + 1 <= N_block; i += 1, x += 2){
                    x_0 = _mm_loadu_pd(((double*)x));

                    for(j = 0; j < fold - 1; j++){
                      s_0 = s_buffer[j];
                      q_0 = _mm_add_pd(s_0, _mm_or_pd(x_0, blp_mask_tmp));
                      s_buffer[j] = q_0;
                      q_0 = _mm_sub_pd(s_0, q_0);
                      x_0 = _mm_add_pd(x_0, q_0);
                    }
                    s_buffer[j] = _mm_add_pd(s_buffer[j], _mm_or_pd(x_0, blp_mask_tmp));
                  }
                }
              }else{
                if(idxd_dmindex0(manY) || idxd_dmindex0(manY + 1)){
                  if(idxd_dmindex0(manY)){
                    if(idxd_dmindex0(manY + 1)){
                      compression_0 = _mm_set1_pd(idxd_DMCOMPRESSION);
                      expansion_0 = _mm_set1_pd(idxd_DMEXPANSION * 0.5);
                      expansion_mask_0 = _mm_set1_pd(idxd_DMEXPANSION * 0.5);
                    }else{
                      compression_0 = _mm_set_pd(1.0, idxd_DMCOMPRESSION);
                      expansion_0 = _mm_set_pd(1.0, idxd_DMEXPANSION * 0.5);
                      expansion_mask_0 = _mm_set_pd(0.0, idxd_DMEXPANSION * 0.5);
                    }
                  }else{
                    compression_0 = _mm_set_pd(idxd_DMCOMPRESSION, 1.0);
                    expansion_0 = _mm_set_pd(idxd_DMEXPANSION * 0.5, 1.0);
                    expansion_mask_0 = _mm_set_pd(idxd_DMEXPANSION * 0.5, 0.0);
                  }
                  for(i = 0; i + 1 <= N_block; i += 1, x += (incX * 2)){
                    x_0 = _mm_loadu_pd(((double*)x));

                    s_0 = s_buffer[0];
                    q_0 = _mm_add_pd(s_0, _mm_or_pd(_mm_mul_pd(x_0, compression_0), blp_mask_tmp));
                    s_buffer[0] = q_0;
                    q_0 = _mm_sub_pd(s_0, q_0);
                    x_0 = _mm_add_pd(_mm_add_pd(x_0, _mm_mul_pd(q_0, expansion_0)), _mm_mul_pd(q_0, expansion_mask_0));
                    for(j = 1; j < fold - 1; j++){
                      s_0 = s_buffer[j];
                      q_0 = _mm_add_pd(s_0, _mm_or_pd(x_0, blp_mask_tmp));
                      s_buffer[j] = q_0;
                      q_0 = _mm_sub_pd(s_0, q_0);
                      x_0 = _mm_add_pd(x_0, q_0);
                    }
                    s_buffer[j] = _mm_add_pd(s_buffer[j], _mm_or_pd(x_0, blp_mask_tmp));
                  }
                }else{
                  for(i = 0; i + 1 <= N_block; i += 1, x += (incX * 2)){
                    x_0 = _mm_loadu_pd(((double*)x));

                    for(j = 0; j < fold - 1; j++){
                      s_0 = s_buffer[j];
                      q_0 = _mm_add_pd(s_0, _mm_or_pd(x_0, blp_mask_tmp));
                      s_buffer[j] = q_0;
                      q_0 = _mm_sub_pd(s_0, q_0);
                      x_0 = _mm_add_pd(x_0, q_0);
                    }
                    s_buffer[j] = _mm_add_pd(s_buffer[j], _mm_or_pd(x_0, blp_mask_tmp));
                  }
                }
              }

              for(j = 0; j < fold; j += 1){
                _mm_store_pd(cons_buffer_tmp, s_buffer[j]);
                ((double*)manY)[(incmanY * j * 2)] = cons_buffer_tmp[0];
                ((double*)manY)[((incmanY * j * 2) + 1)] = cons_buffer_tmp[1];
              }

              if(SIMD_daz_ftz_new_tmp != SIMD_daz_ftz_old_tmp){
                _mm_setcsr(SIMD_daz_ftz_old_tmp);
              }
            }
            break;
        }

      #else
        long_double blp_tmp; (void)blp_tmp;
        double cons_tmp; (void)cons_tmp;


        switch(fold){
          case 3:
            {
              int i;
              double x_0, x_1;
              double compression_0, compression_1;
              double expansion_0, expansion_1;
              double expansion_mask_0, expansion_mask_1;
              double q_0, q_1;
              double s_0_0, s_0_1;
              double s_1_0, s_1_1;
              double s_2_0, s_2_1;

              s_0_0 = ((double*)manY)[0];
              s_0_1 = ((double*)manY)[1];
              s_1_0 = ((double*)manY)[(incmanY * 2)];
              s_1_1 = ((double*)manY)[((incmanY * 2) + 1)];
              s_2_0 = ((double*)manY)[(incmanY * 4)];
              s_2_1 = ((double*)manY)[((incmanY * 4) + 1)];

              if(incX == 1){
                if(idxd_dmindex0(manY) || idxd_dmindex0(manY + 1)){
                  if(idxd_dmindex0(manY)){
                    if(idxd_dmindex0(manY + 1)){
                      compression_0 = idxd_DMCOMPRESSION;
                      expansion_0 = idxd_DMEXPANSION * 0.5;
                      expansion_mask_0 = idxd_DMEXPANSION * 0.5;
                    }else{
                      compression_0 = idxd_DMCOMPRESSION;
                      compression_1 = 1.0;
                      expansion_0 = idxd_DMEXPANSION * 0.5;
                      expansion_1 = 1.0;
                      expansion_mask_0 = idxd_DMEXPANSION * 0.5;
                      expansion_mask_1 = 0.0;
                    }
                  }else{
                    compression_0 = 1.0;
                    compression_1 = idxd_DMCOMPRESSION;
                    expansion_0 = 1.0;
                    expansion_1 = idxd_DMEXPANSION * 0.5;
                    expansion_mask_0 = 0.0;
                    expansion_mask_1 = idxd_DMEXPANSION * 0.5;
                  }
                  for(i = 0; i + 1 <= N_block; i += 1, x += 2){
                    x_0 = ((double*)x)[0];
                    x_1 = ((double*)x)[1];

                    q_0 = s_0_0;
                    q_1 = s_0_1;
                    blp_tmp.d = x_0 * compression_0;
                    blp_tmp.l |= 1;
                    s_0_0 = s_0_0 + blp_tmp.d;
                    blp_tmp.d = x_1 * compression_1;
                    blp_tmp.l |= 1;
                    s_0_1 = s_0_1 + blp_tmp.d;
                    q_0 = q_0 - s_0_0;
                    q_1 = q_1 - s_0_1;
                    x_0 = x_0 + q_0 * expansion_0 + q_0 * expansion_mask_0;
                    x_1 = x_1 + q_1 * expansion_1 + q_1 * expansion_mask_1;
                    q_0 = s_1_0;
                    q_1 = s_1_1;
                    blp_tmp.d = x_0;
                    blp_tmp.l |= 1;
                    s_1_0 = s_1_0 + blp_tmp.d;
                    blp_tmp.d = x_1;
                    blp_tmp.l |= 1;
                    s_1_1 = s_1_1 + blp_tmp.d;
                    q_0 = q_0 - s_1_0;
                    q_1 = q_1 - s_1_1;
                    x_0 = x_0 + q_0;
                    x_1 = x_1 + q_1;
                    blp_tmp.d = x_0;
                    blp_tmp.l |= 1;
                    s_2_0 = s_2_0 + blp_tmp.d;
                    blp_tmp.d = x_1;
                    blp_tmp.l |= 1;
                    s_2_1 = s_2_1 + blp_tmp.d;
                  }
                }else{
                  for(i = 0; i + 1 <= N_block; i += 1, x += 2){
                    x_0 = ((double*)x)[0];
                    x_1 = ((double*)x)[1];

                    q_0 = s_0_0;
                    q_1 = s_0_1;
                    blp_tmp.d = x_0;
                    blp_tmp.l |= 1;
                    s_0_0 = s_0_0 + blp_tmp.d;
                    blp_tmp.d = x_1;
                    blp_tmp.l |= 1;
                    s_0_1 = s_0_1 + blp_tmp.d;
                    q_0 = q_0 - s_0_0;
                    q_1 = q_1 - s_0_1;
                    x_0 = x_0 + q_0;
                    x_1 = x_1 + q_1;
                    q_0 = s_1_0;
                    q_1 = s_1_1;
                    blp_tmp.d = x_0;
                    blp_tmp.l |= 1;
                    s_1_0 = s_1_0 + blp_tmp.d;
                    blp_tmp.d = x_1;
                    blp_tmp.l |= 1;
                    s_1_1 = s_1_1 + blp_tmp.d;
                    q_0 = q_0 - s_1_0;
                    q_1 = q_1 - s_1_1;
                    x_0 = x_0 + q_0;
                    x_1 = x_1 + q_1;
                    blp_tmp.d = x_0;
                    blp_tmp.l |= 1;
                    s_2_0 = s_2_0 + blp_tmp.d;
                    blp_tmp.d = x_1;
                    blp_tmp.l |= 1;
                    s_2_1 = s_2_1 + blp_tmp.d;
                  }
                }
              }else{
                if(idxd_dmindex0(manY) || idxd_dmindex0(manY + 1)){
                  if(idxd_dmindex0(manY)){
                    if(idxd_dmindex0(manY + 1)){
                      compression_0 = idxd_DMCOMPRESSION;
                      expansion_0 = idxd_DMEXPANSION * 0.5;
                      expansion_mask_0 = idxd_DMEXPANSION * 0.5;
                    }else{
                      compression_0 = idxd_DMCOMPRESSION;
                      compression_1 = 1.0;
                      expansion_0 = idxd_DMEXPANSION * 0.5;
                      expansion_1 = 1.0;
                      expansion_mask_0 = idxd_DMEXPANSION * 0.5;
                      expansion_mask_1 = 0.0;
                    }
                  }else{
                    compression_0 = 1.0;
                    compression_1 = idxd_DMCOMPRESSION;
                    expansion_0 = 1.0;
                    expansion_1 = idxd_DMEXPANSION * 0.5;
                    expansion_mask_0 = 0.0;
                    expansion_mask_1 = idxd_DMEXPANSION * 0.5;
                  }
                  for(i = 0; i + 1 <= N_block; i += 1, x += (incX * 2)){
                    x_0 = ((double*)x)[0];
                    x_1 = ((double*)x)[1];

                    q_0 = s_0_0;
                    q_1 = s_0_1;
                    blp_tmp.d = x_0 * compression_0;
                    blp_tmp.l |= 1;
                    s_0_0 = s_0_0 + blp_tmp.d;
                    blp_tmp.d = x_1 * compression_1;
                    blp_tmp.l |= 1;
                    s_0_1 = s_0_1 + blp_tmp.d;
                    q_0 = q_0 - s_0_0;
                    q_1 = q_1 - s_0_1;
                    x_0 = x_0 + q_0 * expansion_0 + q_0 * expansion_mask_0;
                    x_1 = x_1 + q_1 * expansion_1 + q_1 * expansion_mask_1;
                    q_0 = s_1_0;
                    q_1 = s_1_1;
                    blp_tmp.d = x_0;
                    blp_tmp.l |= 1;
                    s_1_0 = s_1_0 + blp_tmp.d;
                    blp_tmp.d = x_1;
                    blp_tmp.l |= 1;
                    s_1_1 = s_1_1 + blp_tmp.d;
                    q_0 = q_0 - s_1_0;
                    q_1 = q_1 - s_1_1;
                    x_0 = x_0 + q_0;
                    x_1 = x_1 + q_1;
                    blp_tmp.d = x_0;
                    blp_tmp.l |= 1;
                    s_2_0 = s_2_0 + blp_tmp.d;
                    blp_tmp.d = x_1;
                    blp_tmp.l |= 1;
                    s_2_1 = s_2_1 + blp_tmp.d;
                  }
                }else{
                  for(i = 0; i + 1 <= N_block; i += 1, x += (incX * 2)){
                    x_0 = ((double*)x)[0];
                    x_1 = ((double*)x)[1];

                    q_0 = s_0_0;
                    q_1 = s_0_1;
                    blp_tmp.d = x_0;
                    blp_tmp.l |= 1;
                    s_0_0 = s_0_0 + blp_tmp.d;
                    blp_tmp.d = x_1;
                    blp_tmp.l |= 1;
                    s_0_1 = s_0_1 + blp_tmp.d;
                    q_0 = q_0 - s_0_0;
                    q_1 = q_1 - s_0_1;
                    x_0 = x_0 + q_0;
                    x_1 = x_1 + q_1;
                    q_0 = s_1_0;
                    q_1 = s_1_1;
                    blp_tmp.d = x_0;
                    blp_tmp.l |= 1;
                    s_1_0 = s_1_0 + blp_tmp.d;
                    blp_tmp.d = x_1;
                    blp_tmp.l |= 1;
                    s_1_1 = s_1_1 + blp_tmp.d;
                    q_0 = q_0 - s_1_0;
                    q_1 = q_1 - s_1_1;
                    x_0 = x_0 + q_0;
                    x_1 = x_1 + q_1;
                    blp_tmp.d = x_0;
                    blp_tmp.l |= 1;
                    s_2_0 = s_2_0 + blp_tmp.d;
                    blp_tmp.d = x_1;
                    blp_tmp.l |= 1;
                    s_2_1 = s_2_1 + blp_tmp.d;
                  }
                }
              }

              ((double*)manY)[0] = s_0_0;
              ((double*)manY)[1] = s_0_1;
              ((double*)manY)[(incmanY * 2)] = s_1_0;
              ((double*)manY)[((incmanY * 2) + 1)] = s_1_1;
              ((double*)manY)[(incmanY * 4)] = s_2_0;
              ((double*)manY)[((incmanY * 4) + 1)] = s_2_1;

            }
            break;
          default:
            {
              int i, j;
              double x_0, x_1;
              double compression_0, compression_1;
              double expansion_0, expansion_1;
              double expansion_mask_0, expansion_mask_1;
              double q_0, q_1;
              double s_0, s_1;
              double s_buffer[(DIMAXFOLD * 2)];

              for(j = 0; j < fold; j += 1){
                s_buffer[(j * 2)] = ((double*)manY)[(incmanY * j * 2)];
                s_buffer[((j * 2) + 1)] = ((double*)manY)[((incmanY * j * 2) + 1)];
              }

              if(incX == 1){
                if(idxd_dmindex0(manY) || idxd_dmindex0(manY + 1)){
                  if(idxd_dmindex0(manY)){
                    if(idxd_dmindex0(manY + 1)){
                      compression_0 = idxd_DMCOMPRESSION;
                      expansion_0 = idxd_DMEXPANSION * 0.5;
                      expansion_mask_0 = idxd_DMEXPANSION * 0.5;
                    }else{
                      compression_0 = idxd_DMCOMPRESSION;
                      compression_1 = 1.0;
                      expansion_0 = idxd_DMEXPANSION * 0.5;
                      expansion_1 = 1.0;
                      expansion_mask_0 = idxd_DMEXPANSION * 0.5;
                      expansion_mask_1 = 0.0;
                    }
                  }else{
                    compression_0 = 1.0;
                    compression_1 = idxd_DMCOMPRESSION;
                    expansion_0 = 1.0;
                    expansion_1 = idxd_DMEXPANSION * 0.5;
                    expansion_mask_0 = 0.0;
                    expansion_mask_1 = idxd_DMEXPANSION * 0.5;
                  }
                  for(i = 0; i + 1 <= N_block; i += 1, x += 2){
                    x_0 = ((double*)x)[0];
                    x_1 = ((double*)x)[1];

                    s_0 = s_buffer[0];
                    s_1 = s_buffer[1];
                    blp_tmp.d = x_0 * compression_0;
                    blp_tmp.l |= 1;
                    q_0 = s_0 + blp_tmp.d;
                    blp_tmp.d = x_1 * compression_1;
                    blp_tmp.l |= 1;
                    q_1 = s_1 + blp_tmp.d;
                    s_buffer[0] = q_0;
                    s_buffer[1] = q_1;
                    q_0 = s_0 - q_0;
                    q_1 = s_1 - q_1;
                    x_0 = x_0 + q_0 * expansion_0 + q_0 * expansion_mask_0;
                    x_1 = x_1 + q_1 * expansion_1 + q_1 * expansion_mask_1;
                    for(j = 1; j < fold - 1; j++){
                      s_0 = s_buffer[(j * 2)];
                      s_1 = s_buffer[((j * 2) + 1)];
                      blp_tmp.d = x_0;
                      blp_tmp.l |= 1;
                      q_0 = s_0 + blp_tmp.d;
                      blp_tmp.d = x_1;
                      blp_tmp.l |= 1;
                      q_1 = s_1 + blp_tmp.d;
                      s_buffer[(j * 2)] = q_0;
                      s_buffer[((j * 2) + 1)] = q_1;
                      q_0 = s_0 - q_0;
                      q_1 = s_1 - q_1;
                      x_0 = x_0 + q_0;
                      x_1 = x_1 + q_1;
                    }
                    blp_tmp.d = x_0;
                    blp_tmp.l |= 1;
                    s_buffer[(j * 2)] = s_buffer[(j * 2)] + blp_tmp.d;
                    blp_tmp.d = x_1;
                    blp_tmp.l |= 1;
                    s_buffer[((j * 2) + 1)] = s_buffer[((j * 2) + 1)] + blp_tmp.d;
                  }
                }else{
                  for(i = 0; i + 1 <= N_block; i += 1, x += 2){
                    x_0 = ((double*)x)[0];
                    x_1 = ((double*)x)[1];

                    for(j = 0; j < fold - 1; j++){
                      s_0 = s_buffer[(j * 2)];
                      s_1 = s_buffer[((j * 2) + 1)];
                      blp_tmp.d = x_0;
                      blp_tmp.l |= 1;
                      q_0 = s_0 + blp_tmp.d;
                      blp_tmp.d = x_1;
                      blp_tmp.l |= 1;
                      q_1 = s_1 + blp_tmp.d;
                      s_buffer[(j * 2)] = q_0;
                      s_buffer[((j * 2) + 1)] = q_1;
                      q_0 = s_0 - q_0;
                      q_1 = s_1 - q_1;
                      x_0 = x_0 + q_0;
                      x_1 = x_1 + q_1;
                    }
                    blp_tmp.d = x_0;
                    blp_tmp.l |= 1;
                    s_buffer[(j * 2)] = s_buffer[(j * 2)] + blp_tmp.d;
                    blp_tmp.d = x_1;
                    blp_tmp.l |= 1;
                    s_buffer[((j * 2) + 1)] = s_buffer[((j * 2) + 1)] + blp_tmp.d;
                  }
                }
              }else{
                if(idxd_dmindex0(manY) || idxd_dmindex0(manY + 1)){
                  if(idxd_dmindex0(manY)){
                    if(idxd_dmindex0(manY + 1)){
                      compression_0 = idxd_DMCOMPRESSION;
                      expansion_0 = idxd_DMEXPANSION * 0.5;
                      expansion_mask_0 = idxd_DMEXPANSION * 0.5;
                    }else{
                      compression_0 = idxd_DMCOMPRESSION;
                      compression_1 = 1.0;
                      expansion_0 = idxd_DMEXPANSION * 0.5;
                      expansion_1 = 1.0;
                      expansion_mask_0 = idxd_DMEXPANSION * 0.5;
                      expansion_mask_1 = 0.0;
                    }
                  }else{
                    compression_0 = 1.0;
                    compression_1 = idxd_DMCOMPRESSION;
                    expansion_0 = 1.0;
                    expansion_1 = idxd_DMEXPANSION * 0.5;
                    expansion_mask_0 = 0.0;
                    expansion_mask_1 = idxd_DMEXPANSION * 0.5;
                  }
                  for(i = 0; i + 1 <= N_block; i += 1, x += (incX * 2)){
                    x_0 = ((double*)x)[0];
                    x_1 = ((double*)x)[1];

                    s_0 = s_buffer[0];
                    s_1 = s_buffer[1];
                    blp_tmp.d = x_0 * compression_0;
                    blp_tmp.l |= 1;
                    q_0 = s_0 + blp_tmp.d;
                    blp_tmp.d = x_1 * compression_1;
                    blp_tmp.l |= 1;
                    q_1 = s_1 + blp_tmp.d;
                    s_buffer[0] = q_0;
                    s_buffer[1] = q_1;
                    q_0 = s_0 - q_0;
                    q_1 = s_1 - q_1;
                    x_0 = x_0 + q_0 * expansion_0 + q_0 * expansion_mask_0;
                    x_1 = x_1 + q_1 * expansion_1 + q_1 * expansion_mask_1;
                    for(j = 1; j < fold - 1; j++){
                      s_0 = s_buffer[(j * 2)];
                      s_1 = s_buffer[((j * 2) + 1)];
                      blp_tmp.d = x_0;
                      blp_tmp.l |= 1;
                      q_0 = s_0 + blp_tmp.d;
                      blp_tmp.d = x_1;
                      blp_tmp.l |= 1;
                      q_1 = s_1 + blp_tmp.d;
                      s_buffer[(j * 2)] = q_0;
                      s_buffer[((j * 2) + 1)] = q_1;
                      q_0 = s_0 - q_0;
                      q_1 = s_1 - q_1;
                      x_0 = x_0 + q_0;
                      x_1 = x_1 + q_1;
                    }
                    blp_tmp.d = x_0;
                    blp_tmp.l |= 1;
                    s_buffer[(j * 2)] = s_buffer[(j * 2)] + blp_tmp.d;
                    blp_tmp.d = x_1;
                    blp_tmp.l |= 1;
                    s_buffer[((j * 2) + 1)] = s_buffer[((j * 2) + 1)] + blp_tmp.d;
                  }
                }else{
                  for(i = 0; i + 1 <= N_block; i += 1, x += (incX * 2)){
                    x_0 = ((double*)x)[0];
                    x_1 = ((double*)x)[1];

                    for(j = 0; j < fold - 1; j++){
                      s_0 = s_buffer[(j * 2)];
                      s_1 = s_buffer[((j * 2) + 1)];
                      blp_tmp.d = x_0;
                      blp_tmp.l |= 1;
                      q_0 = s_0 + blp_tmp.d;
                      blp_tmp.d = x_1;
                      blp_tmp.l |= 1;
                      q_1 = s_1 + blp_tmp.d;
                      s_buffer[(j * 2)] = q_0;
                      s_buffer[((j * 2) + 1)] = q_1;
                      q_0 = s_0 - q_0;
                      q_1 = s_1 - q_1;
                      x_0 = x_0 + q_0;
                      x_1 = x_1 + q_1;
                    }
                    blp_tmp.d = x_0;
                    blp_tmp.l |= 1;
                    s_buffer[(j * 2)] = s_buffer[(j * 2)] + blp_tmp.d;
                    blp_tmp.d = x_1;
                    blp_tmp.l |= 1;
                    s_buffer[((j * 2) + 1)] = s_buffer[((j * 2) + 1)] + blp_tmp.d;
                  }
                }
              }

              for(j = 0; j < fold; j += 1){
                ((double*)manY)[(incmanY * j * 2)] = s_buffer[(j * 2)];
                ((double*)manY)[((incmanY * j * 2) + 1)] = s_buffer[((j * 2) + 1)];
              }

            }
            break;
        }

      #endif

        }
    //[[[end]]]

    if (isinf(amax[0])){
      manY[0] = amax[0];
    }
    if (isinf(amax[1])){
      manY[1] = amax[1];
    }

    deposits += N_block;
  }

  idxd_zmrenorm(fold, manY, incmanY, carY, inccarY);
}
