/*
 *  Created   13/10/25   H.D. Nguyen
 */

#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include <float.h>

#include "../config.h"
#include "../common/common.h"
#include "indexedBLAS.h"

/*[[[cog
import cog
import generate
import dataTypes
import depositASum
import vectorizations
from src.common import blockSize
from scripts import terminal

code_block = generate.CodeBlock()
vectorizations.conditionally_include_vectorizations(code_block)
cog.out(str(code_block))

cog.outl()

cog.out(generate.generate(blockSize.BlockSize("dmzasum", "N_block_MAX", 32, terminal.get_diendurance()//2, terminal.get_diendurance()//2, ["bench_rdzasum_fold_{}".format(terminal.get_default_fold())]), cog.inFile, args, params, mode))
]]]*/
//[[[end]]]

void dmzasum(const int fold, const int N, const void *X, const int incX, double *manY, const int incmanY, double *carY, const int inccarY){
  double amax_tmp[2];
  double amax;
  int i, j;
  int N_block = MIN(N_block_MAX, DIENDURANCE/2);
  int deposits = 0;
  double_complex_indexed *asum = zialloc(fold);
  zisetzero(fold, asum);

  const double *x = (const double*)X;

  for (i = 0; i < N; i += N_block) {
    N_block = MIN((N - i), N_block);

    zamax_sub(N_block, x, incX, amax_tmp);
    amax = MAX(amax_tmp[0], amax_tmp[1]);

    if (isinf(amax) || isinf(manY[0])){
      for (j = 0; j < N_block; j++){
        manY[0] += fabs(x[j * 2 * incX]);
        manY[0] += fabs(x[j * 2 * incX + 1]);
      }
    }
    if (isnan(manY[0]) || isnan(asum[0]) || isnan(asum[1])){
      manY[0] += asum[0] + asum[1];
      free(asum);
      return;
    } else if (isinf(manY[0])){
      x += N_block * 2 * incX;
      continue;
    }

    if (deposits + N_block > DIENDURANCE) {
      zirenorm(fold, asum);
      deposits = 0;
    }

    zidupdate(fold, amax, asum);

    /*[[[cog
      cog.out(generate.generate(depositASum.DepositASum(dataTypes.DoubleComplex, "N_block", "x", "incX", "asum", 1), cog.inFile, args, params, mode))
      ]]]*/
    //[[[end]]]

    deposits += N_block;
  }

  zirenorm(fold, asum);
  dmdmadd(fold, asum, 2, asum + 2 * fold, 2, manY, incmanY, carY, inccarY);
  dmdmadd(fold, asum + 1, 2, asum + 2 * fold + 1, 2, manY, incmanY, carY, inccarY);

  free(asum);

  return;
}
